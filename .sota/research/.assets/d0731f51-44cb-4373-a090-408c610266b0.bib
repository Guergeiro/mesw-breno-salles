@article{https://doi.org/10.1002/spe.3141,
author = {Correia, José and Rito Silva, António},
title = {Identification of monolith functionality refactorings for microservices migration},
journal = {Software: Practice and Experience},
volume = {n/a},
number = {n/a},
pages = {},
keywords = {heuristics, microservices, monolith migration, refactoring, SAGA Pattern},
doi = {https://doi.org/10.1002/spe.3141},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.3141},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.3141},
abstract = {Abstract In the process of migrating a monolith to a microservice architecture, functionalities which execute on top of a single database as ACID transactions, have their execution split between several databases, one for each microservice. Therefore, the complexity of functionality migration increases, because of the lack of isolation of the functionality execution, which has to be handled by following an eventual consistency model. On the other hand, the object-oriented approach, commonly followed in the development of monolith systems, promotes fine-grained interactions in the functionalities implementation, which further increases the migration effort due to the large number of remote invocations between microservices, because it increases the number of microservices transactions that have to eventually be consistent. The main contribution of this paper is a heuristic method to help the software architect on the identification of functionality refactorings, to reduce the effort required to migrate the functionality to microservices when applying the SAGA pattern in the functionality microservices implementation. The heuristic accuracy and efficiency of the method is evaluated using a dataset extracted from 78 codebases and by comparing the results with expert refactorizations. Additionally, a performance analysis of the heuristic implementation is done.}
}
@article{https://doi.org/10.1002/spe.2608,
author = {Balalaie, Armin and Heydarnoori, Abbas and Jamshidi, Pooyan and Tamburri, Damian A. and Lynn, Theo},
title = {Microservices migration patterns},
journal = {Software: Practice and Experience},
volume = {48},
number = {11},
pages = {2019-2042},
keywords = {cloud-native architectures, cloud computing, microservices, migration patterns},
doi = {https://doi.org/10.1002/spe.2608},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2608},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2608},
abstract = {Summary Microservices architectures are becoming the defacto standard for building continuously deployed systems. At the same time, there is a substantial growth in the demand for migrating on-premise legacy applications to the cloud. In this context, organizations tend to migrate their traditional architectures into cloud-native architectures using microservices. This article reports a set of migration and rearchitecting design patterns that we have empirically identified and collected from industrial-scale software migration projects. These migration patterns can help information technology organizations plan their migration projects toward microservices more efficiently and effectively. In addition, the proposed patterns facilitate the definition of migration plans by pattern composition. Qualitative empirical research is used to evaluate the validity of the proposed patterns. Our findings suggest that the proposed patterns are evident in other architectural refactoring and migration projects and strong candidates for effective patterns in system migrations.},
year = {2018}
}
@article{https://doi.org/10.1002/spe.3081,
author = {Raj, Vinay and Ravichandra, Sadam},
title = {A service graph based extraction of microservices from monolith services of service-oriented architecture},
journal = {Software: Practice and Experience},
volume = {52},
number = {7},
pages = {1661-1678},
keywords = {microservices, migration, monoliths, service graph, service oriented architecture},
doi = {https://doi.org/10.1002/spe.3081},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.3081},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.3081},
abstract = {Abstract Service-oriented architecture (SOA) has been widely used to design enterprise applications in the past two decades. The services in SOA are becoming complex with the increase in changing user requirements and SOA is still seen as monolithic from a deployment perspective. Monolithic services make the application complex, and it becomes difficult to maintain. With the evolution of microservices architecture, software architects started migrating legacy applications to microservices. However, existing migration approaches in the literature mostly focus on migrating monolithic applications to microservices. To the best of our knowledge, very few works have been done in migrating SOA applications to microservices. One of the major challenges in the migration process is the extraction of microservices from the existing legacy applications. To address this, we propose an approach to extract the candidate microservices using graph based algorithms. In particular, four algorithms are defined: (i) construction of service graph (SG), (ii) construction of task graph (TG) for each service of the a SOA application, (iii) extraction of candidate microservices using the SG of SOA application, and (iv) construction of a SG for a microservices application to retain the dependencies between the generated microservices. We chose a SOA-based web application to demonstrate the proposed microservices extraction approach and extracted the microservices. Additionally, we have evaluated the extracted microservices and compared them with SOA based services.},
year = {2022}
}
@article{https://doi.org/10.1002/smr.2503,
author = {Trabelsi, Imen and Abdellatif, Manel and Abubaker, Abdalgader and Moha, Naouel and Mosser, Sébastien and Ebrahimi-Kahou, Samira and Guéhéneuc, Yann-Gaël},
title = {From legacy to microservices: A type-based approach for microservices identification using machine learning and semantic analysis},
journal = {Journal of Software: Evolution and Process},
volume = {n/a},
number = {n/a},
pages = {e2503},
keywords = {decomposition, microservices, migration, ML, monolith, semantic analysis},
doi = {https://doi.org/10.1002/smr.2503},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2503},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.2503},
abstract = {Abstract The microservices architecture (MSA) style has been gaining interest in recent years because of its high scalability, ability to be deployed in the cloud, and suitability for DevOps practices. While new applications can adopt MSA from their inception, many legacy monolithic systems must be migrated to an MSA to benefit from the advantages of this architectural style. To support the migration process, we propose MicroMiner, a microservices identification approach that is based on static-relationship analyses between code elements as well as semantic analyses of the source code. Our approach relies on machine learning (ML) techniques and uses service types to guide the identification of microservices from legacy monolithic systems. We evaluate the efficiency of our approach on four systems and compare our results to ground-truths and to those of two state-of-the-art approaches. We perform a qualitative evaluation of the resulted microservices by analyzing the business capabilities of the identified microservices. Also a quantitative analysis using the state-of-the-art metrics on independence of functionality and modularity of services was conducted. Our results show the effectiveness of our approach to automate one of the most time-consuming steps in the migration of legacy systems to microservices. The proposed approach identifies architecturally significant microservices with a 68.15\% precision and 77\% recall.}
}
@article{https://doi.org/10.1002/spe.2869,
author = {Hassan, Sara and Bahsoon, Rami and Kazman, Rick},
title = {Microservice transition and its granularity problem: A systematic mapping study},
journal = {Software: Practice and Experience},
volume = {50},
number = {9},
pages = {1651-1681},
keywords = {design decision support, granularity, microservices, software economics, systematic mapping study},
doi = {https://doi.org/10.1002/spe.2869},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2869},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2869},
abstract = {Summary Microservices have gained wide recognition and acceptance in software industries as an emerging architectural style for autonomic, scalable, and more reliable computing. The transition to microservices has been highly motivated by the need for better alignment of technical design decisions with improving value potentials of architectures. Despite microservices' popularity, research still lacks disciplined understanding of transition and consensus on the principles and activities underlying that transition. In this paper, we report on a systematic mapping study that consolidates various views, approaches and activities that commonly assist in the transition to microservices. The study aims to provide a better understanding of the transition; it also contributes a working definition of the transition and technical activities underlying it. We term the transition and technical activities leading to microservice architectures as microservitization. We then shed light on a fundamental problem of microservitization: microservice granularity and reasoning about its adaptation as first-class entities. This study reviews state-of-the-art and -practice related to reasoning about microservice granularity; it reviews modeling approaches, aspects considered, guidelines and processes used to reason about microservice granularity. This study identifies opportunities for future research and development related to reasoning about microservice granularity.},
year = {2020}
}
@article{https://doi.org/10.1111/exsy.13158,
author = {Sun, Xiaoxiao and Boranbaev, Salamat and Han, Shicong and Wang, Huanqiang and Yu, Dongjin},
title = {Expert system for automatic microservices identification using API similarity graph},
journal = {Expert Systems},
volume = {n/a},
number = {n/a},
pages = {e13158},
keywords = {API similarity, microservices, microservices identification, migration, RESTful API},
doi = {https://doi.org/10.1111/exsy.13158},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/exsy.13158},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1111/exsy.13158},
abstract = {Abstract As a new software design paradigm, microservices structure an application as a collection of services that are independently deployable and loosely coupled. A key step of migrating non-microservices-based systems to microservices-based systems is the identification of microservices in the target application. Traditional approaches to identify microservices, however, usually suffer from lack of full automation and low effectiveness. This paper puts forward an expert system to identify microservices automatically from legacy systems by leveraging the similarity of RESTful APIs. The system consists of three major parts. The first part calculates the candidate topic similarity and the response message similarity of APIs, and the overall similarity is obtained through their combination. Afterwards, the second part constructs a graph of API similarities with API as the node and the overall similarity as the weight. The third part employs a graph-based clustering algorithm to identify candidate microservices from the API similarity graph. Experiments conducted on open-source projects demonstrate the effectiveness of our system.}
}
@article{https://doi.org/10.1002/spe.2956,
author = {Freire, Augusto Flávio A. A. and Sampaio, Américo Falcone and Carvalho, Luis Heustakio L. and Medeiros, Otávio and Mendonça, Nabor C.},
title = {Migrating production monolithic systems to microservices using aspect oriented programming},
journal = {Software: Practice and Experience},
volume = {51},
number = {6},
pages = {1280-1307},
keywords = {aspect-oriented programming, microservice architecture, system migration},
doi = {https://doi.org/10.1002/spe.2956},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2956},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2956},
abstract = {Abstract Several organizations need to address the challenge to migrate current traditional monolithic applications in production to microservices, preferably, without having to schedule maintenances to take the application offline. This article presents an approach for migrating to microservices with almost zero downtime and minimal changes in the monolithic code. The approach is based on the concepts of aspect-oriented programming (AOP) and reflection to enable to intercept calls inside the monolith and transform them into service requests invoking the newly built microservices using the concept of around advices. The aspects do the “dirty work” of decoupling what will be refactored and which service to call and practically “zero” code changes need to be done in the original monolithic code. This enables one key novel contribution of our migration approach which is the ability to revert code and data changes without having to take the system offline. Two applications are used as proofs of concept to demonstrate that the proposed approach enables to go “forward” or “backward” among different versions of the application with minimal code or data changes. An evaluation performed in the cloud demonstrates that this work does not introduce significant performance or cost overhead when compared to the current state of the art and to the original monolith.},
year = {2021}
}
@article{https://doi.org/10.1002/spe.2974,
author = {Soldani, Jacopo and Muntoni, Giuseppe and Neri, Davide and Brogi, Antonio},
title = {The μTOSCA toolchain: Mining, analyzing, and refactoring microservice-based architectures},
journal = {Software: Practice and Experience},
volume = {51},
number = {7},
pages = {1591-1621},
keywords = {architectural smells, microservices, refactoring, software architecture mining},
doi = {https://doi.org/10.1002/spe.2974},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2974},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2974},
abstract = {Summary Exploiting microservices to architect enterprise applications is becoming commonplace. This makes it crucial to provide some support for designing and analyzing microservice-based applications, for example, for understanding whether a microservice-based application adheres to the main design principles of microservices and for choosing how to refactor it when this is not the case. To provide such support, in this article we present the TOSCA toolchain. More precisely, we first introduce the TOSCA model to represent the architecture of microservice-based applications with the OASIS standard TOSCA. We then describe a technique to automatically mine the architecture of a microservice-based application and represent it with TOSCA, given the Kubernetes deployment of the application. We also present a methodology to analyze the TOSCA representation of a microservice-based architecture to systematically identify the architectural smells potentially affecting the corresponding application and to resolve them. Finally, we present two prototype tools, Miner and Freshener, implementing our mining solution and the support for identifying and resolving architectural smells in microservice-based applications, respectively. We then assess —by discussing some case studies— how effectively Miner, Freshener, and the TOSCA toolchain can support researchers and practitioners working with microservices.},
year = {2021}
}

@inbook{doi:https://doi.org/10.1002/9781119549451.ch11,

publisher = {John Wiley & Sons, Ltd},
isbn = {9781119549451},
title = {Refactor to Microservices},
booktitle = {
               AWS® Certified Developer Official Study Guide},
chapter = {11},
pages = {519-584},
doi = {https://doi.org/10.1002/9781119549451.ch11},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/9781119549451.ch11},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781119549451.ch11},
year = {2019},
keywords = {infrastructure services, software applications, modular services, microservices, application programming interfaces (APIs)},
abstract = {Summary This Chapter covered the different services to refactor larger systems into smaller components that can communicate with each other through infrastructure services. Microservices architecture is a method to design and build software applications as a suite of modular services, each performing a specific functional task, which deploy and access application components via well-defined standard application programming interfaces (APIs). Where possible, you automate the provisioning, termination, and configuration of resources. Message-oriented middleware (MoM) supports messaging types in which the messages that are produced (producers) can broadcast and publish to multiple message consumers, also known as message subscribers. Amazon Simple Queue Service (Amazon SQS) is a fully managed message queuing service that makes it easy to decouple and scale microservices, distributed systems, and serverless applications to assist in event-driven solutions.}
}
