@inproceedings{10.1145/3275219.3275230,
author = {Ren, Zhongshan and Wang, Wei and Wu, Guoquan and Gao, Chushu and Chen, Wei and Wei, Jun and Huang, Tao},
title = {Migrating Web Applications from Monolithic Structure to Microservices Architecture},
year = {2018},
isbn = {9781450365901},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3275219.3275230},
doi = {10.1145/3275219.3275230},
abstract = {In the traditional software development and deployment, the centralized monolithic is always adopted, as the modules are tightly coupled, which caused many inconvenience in software DevOps. The modules with bottlenecks in monolithic application cannot be extend separately as the application is an integral part, and different module cannot use different technology stack. To prolong the lifecycle of the monolithic applications, its need to migrated it to microservice architecture. Due to the complex logic and large number of third party framework libraries depended, get an accurate comprehensive of the application characteristics is challenging. The existing research mostly based on the static characteristics, lack of consideration of the runtime dynamic characteristics, and the completeness and accuracy of the static analysis is inadequate. To resolve above problems, we combined static and dynamic analysis to get static structure and runtime behavior characteristics of monolithic application. We employed the coupling among functions to evaluate the degree of dependence, and through function clustering to achieve the migration of legacy monolithic applications and its data to microservices architecture. Through the empirical study of migrate the typical legacy project to microservices, it is proved that we proposed method can offer precise guidance and assistance in the migration procedure. Experiments show that the method has high accuracy and low performance cost.},
booktitle = {Proceedings of the 10th Asia-Pacific Symposium on Internetware},
articleno = {7},
numpages = {10},
keywords = {microservices, function clustering, monolithic application, application migration},
location = {Beijing, China},
series = {Internetware '18}
}

@inproceedings{10.1145/3445814.3446696,
author = {Lazarev, Nikita and Xiang, Shaojie and Adit, Neil and Zhang, Zhiru and Delimitrou, Christina},
title = {Dagger: Efficient and Fast RPCs in Cloud Microservices with near-Memory Reconfigurable NICs},
year = {2021},
isbn = {9781450383172},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3445814.3446696},
doi = {10.1145/3445814.3446696},
abstract = {The ongoing shift of cloud services from monolithic designs to mi- croservices creates high demand for efficient and high performance datacenter networking stacks, optimized for fine-grained work- loads. Commodity networking systems based on software stacks and peripheral NICs introduce high overheads when it comes to delivering small messages. We present Dagger, a hardware acceleration fabric for cloud RPCs based on FPGAs, where the accelerator is closely-coupled with the host processor over a configurable memory interconnect. The three key design principle of Dagger are: (1) offloading the entire RPC stack to an FPGA-based NIC, (2) leveraging memory interconnects instead of PCIe buses as the interface with the host CPU, and (3) making the acceleration fabric reconfigurable, so it can accommodate the diverse needs of microservices. We show that the combination of these principles significantly improves the efficiency and performance of cloud RPC systems while preserving their generality. Dagger achieves 1.3 − 3.8\texttimes{} higher per-core RPC throughput compared to both highly-optimized software stacks, and systems using specialized RDMA adapters. It also scales up to 84 Mrps with 8 threads on 4 CPU cores, while maintaining state-of- the-art µs-scale tail latency. We also demonstrate that large third- party applications, like memcached and MICA KVS, can be easily ported on Dagger with minimal changes to their codebase, bringing their median and tail KVS access latency down to 2.8 − 3.5 us and 5.4 − 7.8 us, respectively. Finally, we show that Dagger is beneficial for multi-tier end-to-end microservices with different threading models by evaluating it using an 8-tier application implementing a flight check-in service.},
booktitle = {Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {36–51},
numpages = {16},
keywords = {End-host networking, datacenters, smartNICs, FPGAs, RPC frameworks, microservices, cloud computing, cache-coherent FPGAs},
location = {Virtual, USA},
series = {ASPLOS '21}
}

@inproceedings{10.1145/3242163.3242164,
author = {Carrasco, Andr\'{e}s and Bladel, Brent van and Demeyer, Serge},
title = {Migrating towards Microservices: Migration and Architecture Smells},
year = {2018},
isbn = {9781450359740},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3242163.3242164},
doi = {10.1145/3242163.3242164},
abstract = {Migrating to microservices is an error-prone process with deep pitfalls resulting in high costs for mistakes. Microservices is a relatively new architectural style, resulting in the lack of general guidelines for migrating monoliths towards microservices. We present 9 common pitfalls in terms of bad smells with their potential solutions. Using these bad smells, pitfalls can be identified and corrected in the migration process.},
booktitle = {Proceedings of the 2nd International Workshop on Refactoring},
pages = {1–6},
numpages = {6},
keywords = {MicroServices, Migration Smells, Literature Study, Architecture Smells},
location = {Montpellier, France},
series = {IWoR 2018}
}

@inproceedings{10.1145/3457913.3457939,
author = {Wei, Yuyang and Yu, Yijun and Pan, Minxue and Zhang, Tian},
title = {A Feature Table Approach to Decomposing Monolithic Applications into Microservices},
year = {2020},
isbn = {9781450388191},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3457913.3457939},
doi = {10.1145/3457913.3457939},
abstract = {Microservice architecture refers to the use of numerous small-scale and independently deployed services, instead of encapsulating all functions into one monolith. It has been a challenge in software engineering to decompose a monolithic system into smaller parts. In this paper, we propose the Feature Table approach, a structured approach to service decomposition based on the correlation between functional features and microservices: (1) we defined the concept of Feature Cards and 12 instances of such cards; (2) we formulated Decomposition Rules to decompose monolithic applications; (3) we designed the Feature Table Analysis Tool to provide semi-automatic analysis for identification of microservices; and (4) we formulated Mapping Rules to help developers implement microservice candidates. We performed a case study on Cargo Tracking System to validate our microservice-oriented decomposition approach. Cargo Tracking System is a typical case that has been decomposed by other related methods (dataflow-driven approach, Service Cutter, and API Analysis). Through comparison with the related methods in terms of specific coupling and cohesion metrics, the results show that the proposed Feature Table approach can deliver more reasonable microservice candidates, which are feasible in implementation with semi-automatic support.},
booktitle = {Proceedings of the 12th Asia-Pacific Symposium on Internetware},
pages = {21–30},
numpages = {10},
keywords = {monolith decomposition, Microservices, microservice architecture},
location = {Singapore, Singapore},
series = {Internetware '20}
}

@inproceedings{10.1145/3341105.3374046,
author = {Balteanu, Vasile-Daniel and Neculai, Alexandru and Negru, Catalin and Pop, Florin and Stoica, Adrian},
title = {Near Real-Time Scheduling in Cloud-Edge Platforms},
year = {2020},
isbn = {9781450368667},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341105.3374046},
doi = {10.1145/3341105.3374046},
abstract = {As Cloud-Edge architectures are becoming more and more popular, due to their improvement on the battery life of the IoT devices and the high availability of data from the Cloud, this approach also creates new problems. As data gathered from the Edge has to be transferred to the Cloud in order to be processed, the result will be a decreased responsiveness of the system. Also, devices might have to process data by themselves, as the Cloud could be unreachable at random moments in time, resulting in a reduction in battery life. Therefore, we propose an architecture that solves these problems, by introducing an intermediate layer, called Fog, which uses a task scheduling algorithm to send data received from Edge to another device that has enough resources and the required hardware and software to complete the task. In addition, the architecture is based on microservices, hence improving scalability and flexibility. In the performance analysis, we used different values to find the best node that should receive the data for processing. In addition, we compared the microservice based architecture with a monolithic one in order to see how the throughput and responsiveness of the system are affected.},
booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
pages = {1264–1271},
numpages = {8},
keywords = {task scheduling, edge computing, cloud computing},
location = {Brno, Czech Republic},
series = {SAC '20}
}

@inproceedings{10.1145/3412841.3442016,
author = {Brito, Miguel and Cunha, J\'{a}come and Saraiva, Jo\~{a}o},
title = {Identification of Microservices from Monolithic Applications through Topic Modelling},
year = {2021},
isbn = {9781450381048},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412841.3442016},
doi = {10.1145/3412841.3442016},
abstract = {Microservices emerged as one of the most popular architectural patterns in the recent years given the increased need to scale, grow and flexibilize software projects accompanied by the growth in cloud computing and DevOps. Many software applications are being submitted to a process of migration from its monolithic architecture to a more modular, scalable and flexible architecture of microservices. This process is slow and, depending on the project's complexity, it may take months or even years to complete.This paper proposes a new approach on microservice identification by resorting to topic modelling in order to identify services according to domain terms. This approach in combination with clustering techniques produces a set of services based on the original software. The proposed methodology is implemented as an open-source tool for exploration of monolithic architectures and identification of microservices. A quantitative analysis using the state of the art metrics on independence of functionality and modularity of services was conducted on 200 open-source projects collected from GitHub. Cohesion at message and domain level metrics' showed medians of roughly 0.6. Interfaces per service exhibited a median of 1.5 with a compact interquartile range. Structural and conceptual modularity revealed medians of 0.2 and 0.4 respectively.Our first results are positive demonstrating beneficial identification of services due to overall metrics' results.},
booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
pages = {1409–1418},
numpages = {10},
location = {Virtual Event, Republic of Korea},
series = {SAC '21}
}

@article{10.1145/3461011,
author = {Chondamrongkul, Nacha and Sun, Jing and Warren, Ian},
title = {Software Architectural Migration: An Automated Planning Approach},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {30},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/3461011},
doi = {10.1145/3461011},
abstract = {Software architectural designs are usually changed over time to support emerging technologies and to adhere to new principles. Architectural migration is an important activity that helps to transform the architectural styles applied during a system’s design with the result of modernising the system. If not performed correctly, this process could lead to potential system failures. This article presents an automated approach to refactoring architectural design and to planning the evolution process. With our solution, the architectural design can be refactored, ensuring that system functionality is preserved. Furthermore, the architectural migration process allows the system to be safely and incrementally transformed. We have evaluated our approach with five real-world software applications. The results prove the effectiveness of our approach and identify factors that impact the performance of architectural verification and migration planning. An interesting finding is that planning algorithms generate migration plans that differ in term of their relative efficiency.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {jul},
articleno = {50},
numpages = {35},
keywords = {Blockchain, software modernisation, Software architecture, architectural migration, microservice}
}

@inproceedings{10.1145/3234152.3234197,
author = {Auer, Florian and Felderer, Michael and Lenarduzzi, Valentina},
title = {Towards Defining a Microservice Migration Framework},
year = {2018},
isbn = {9781450364225},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234152.3234197},
doi = {10.1145/3234152.3234197},
abstract = {Microservices are more and more popular. As a result, some companies started to believe that microservices are the solution to all of their problems and rush to adopt microservices without sufficient knowledge about the impacts. Most of the time they expect to decrease their maintenance effort or to ease the deployment process. However, re-architecting a system to microservices is not always beneficial. In this work we propose a work-plan to identify a decision framework that supports practitioners in the understanding of possible migration based benefits and issues. This will lead to more reasoned decisions and mitigate the risk of migration.},
booktitle = {Proceedings of the 19th International Conference on Agile Software Development: Companion},
articleno = {27},
numpages = {2},
location = {Porto, Portugal},
series = {XP '18}
}

@article{10.1145/3418899,
author = {Brondolin, Rolando and Santambrogio, Marco D.},
title = {A Black-Box Monitoring Approach to Measure Microservices Runtime Performance},
year = {2020},
issue_date = {December 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {4},
issn = {1544-3566},
url = {https://doi.org/10.1145/3418899},
doi = {10.1145/3418899},
abstract = {Microservices changed cloud computing by moving the applications’ complexity from one monolithic executable to thousands of network interactions between small components. Given the increasing deployment sizes, the architectural exploitation challenges, and the impact on data-centers’ power consumption, we need to efficiently track this complexity. Within this article, we propose a black-box monitoring approach to track microservices at scale, focusing on architectural metrics, power consumption, application performance, and network performance. The proposed approach is transparent w.r.t. the monitored applications, generates less overhead w.r.t. black-box approaches available in the state-of-the-art, and provides fine-grain accurate metrics.},
journal = {ACM Trans. Archit. Code Optim.},
month = {nov},
articleno = {34},
numpages = {26},
keywords = {performance monitoring, cloud computing, docker, kubernetes, Microservices, network performance monitoring, power attribution}
}

@inproceedings{10.1145/3530019.3530040,
author = {Sellami, Khaled and Saied, Mohamed Aymen and Ouni, Ali},
title = {A Hierarchical DBSCAN Method for Extracting Microservices from Monolithic Applications},
year = {2022},
isbn = {9781450396134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3530019.3530040},
doi = {10.1145/3530019.3530040},
abstract = {The microservices architectural style offers many advantages such as scalability, reusability and ease of maintainability. As such microservices has become a common architectural choice when developing new applications. Hence, to benefit from these advantages, monolithic applications need to be redesigned in order to migrate to a microservice based architecture. Due to the inherent complexity and high costs related to this process, it is crucial to automate this task. In this paper, we propose a method that can identify potential microservices from a given monolithic application. Our method takes as input the source code of the source application in order to measure the similarities and dependencies between all of the classes in the system using their interactions and the domain terminology employed within the code. These similarity values are then used with a variant of a density-based clustering algorithm to generate a hierarchical structure of the recommended microservices while identifying potential outlier classes. We provide an empirical evaluation of our approach through different experimental settings including a comparison with existing human-designed microservices and a comparison with 5 baselines. The results show that our method succeeds in generating microservices that are overall more cohesive and that have fewer interactions in-between them with up to 0.9 of precision score when compared to human-designed microservices.},
booktitle = {Proceedings of the International Conference on Evaluation and Assessment in Software Engineering 2022},
pages = {201–210},
numpages = {10},
keywords = {Clustering, Microservices, Legacy decomposition, Static Analysis},
location = {Gothenburg, Sweden},
series = {EASE '22}
}

@inproceedings{10.1145/3501774.3501780,
author = {Gravanis, Dimitrios and Kakarontzas, George and Gerogiannis, Vassilis},
title = {You Don't Need a Microservices Architecture (yet): Monoliths May Do the Trick},
year = {2021},
isbn = {9781450385060},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3501774.3501780},
doi = {10.1145/3501774.3501780},
abstract = {Within the past decade, the advent of cloud computing in terms of infrastructure, technology stacks, availability of services and tooling, along with the gradual improvement of its market environment, has driven many organizations to either consider or migrate many existing software systems to the cloud, either fully or partially. A common predicament in most cases, is the existence of a complex, monolithic application, potentially considered legacy at the time, that was not designed to be cloud-native and therefore requires a degree of redesign/reimplementation in order to benefit from cloud deployment. In such cases, the decomposition of the monolith to a set of loosely coupled, highly cohesive and self-contained microservices is a valid recommendation, provided that the organization is prepared to withstand the additional cost, in terms of human and financial resources, along with the unavoidable development overhead, which is inevitable during the early stages. However, the tendency of the tech world to embrace new trends and jump on hype trains for fear of obsoletion, has led to an excessive adoption of the microservices architecture (MSA), even in cases where such an architecture is not viable for the organization, or does not derive from any business requirements. This research focuses on establishing the position of a traditional monolith in the modern software architecture landscape and determine use cases that can still benefit from this paradigm, as well as use cases that could benefit from a partial or full transition to microservices architectures instead.},
booktitle = {2021 2nd European Symposium on Software Engineering},
pages = {39–44},
numpages = {6},
keywords = {Software Industry, Monolithic Architecture, Migration, Microservices Architecture},
location = {Larissa, Greece},
series = {ESSE 2021}
}

@inproceedings{10.1145/3126858.3126873,
author = {Brilhante, Jonathan and Costa, Rostand and Maritan, Tiago},
title = {Asynchronous Queue Based Approach for Building Reactive Microservices},
year = {2017},
isbn = {9781450350969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3126858.3126873},
doi = {10.1145/3126858.3126873},
abstract = {To achieve scalability and flexibility in larger applications a new approach arises, named by Microservices (MS). However MS architectures are at their inception and are even more a concept than a fully mature design pattern. One of the hardest topics in this approach is how to properly migrate or develop a single microservice, in terms of scope, efficiency and dependability. In this sense, this work proposes a new architectural model based on high-level architecture pattern of reactive programming to the internal structure of a new microservice. The new model of microservices are internally coordinated by asynchronous queues, which allowed to preserve compatibility with most monolithic components and provide an encapsulation process to enable its continuity. A comparative study between the standard approach and the proposed architecture was carried out to measure the eventual performance improvement of the new strategy.},
booktitle = {Proceedings of the 23rd Brazillian Symposium on Multimedia and the Web},
pages = {373–380},
numpages = {8},
keywords = {micro services, asynchronous queues, refactoring, reactive approach},
location = {Gramado, RS, Brazil},
series = {WebMedia '17}
}

@inproceedings{10.1145/3472883.3486985,
author = {Mirhosseini, Amirhossein and Elnikety, Sameh and Wenisch, Thomas F.},
title = {Parslo: A Gradient Descent-Based Approach for Near-Optimal Partial SLO Allotment in Microservices},
year = {2021},
isbn = {9781450386388},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3472883.3486985},
doi = {10.1145/3472883.3486985},
abstract = {Modern cloud services are implemented as graphs of loosely-coupled microservices to improve programmability, reliability, and scalability. Service Level Objectives (SLOs) define end-to-end latency targets for the entire service to ensure user satisfaction. In such environments, each microservice is independently deployed and (auto-)scaled. However, it is unclear how to optimally scale individual microservices when end-to-end SLOs are violated or underutilized, and how to size each microservice to meet the end-to-end SLO at minimal total cost. In this paper, we propose Parslo---a Gradient Descent-based approach to assign partial SLOs among nodes in a microservice graph under an end-to-end latency SLO. At a high level, the Parslo algorithm breaks the end-to-end SLO budget into small incremental "SLO units", and iteratively allocates one marginal SLO unit to the best candidate microservice to achieve the highest total cost savings until the entire end-to-end SLO budget is exhausted. Parslo achieves a near-optimal solution, seeking to minimize the total cost for the entire service deployment, and is applicable to general microservice graphs that comprise patterns like dynamic branching, parallel fan-out, and microservice dependencies. Parslo reduces service deployment costs by more than 6x in real microservice-based applications, compared to a state-of-the-art partial SLO assignment scheme.},
booktitle = {Proceedings of the ACM Symposium on Cloud Computing},
pages = {442–457},
numpages = {16},
keywords = {Service Level Objectives, Auto-scaling, Microservices},
location = {Seattle, WA, USA},
series = {SoCC '21}
}

@inproceedings{10.1145/3475061.3475086,
author = {Freitas, Francisco and Ferreira, Andr\'{e} and Cunha, J\'{a}come},
title = {Refactoring Java Monoliths into Executable Microservice-Based Applications},
year = {2021},
isbn = {9781450390620},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475061.3475086},
doi = {10.1145/3475061.3475086},
abstract = {In the last few years we have been seeing a drastic change in the way software is developed. Large-scale software projects are being assembled by a flexible composition of many (small) components possibly written in different programming languages and deployed anywhere in the cloud – the so-called microservice-based applications. The dramatic growth in popularity of microservice-based applications has pushed several companies to apply major refactorings to their software systems. However, this is a challenging task that may take several months or even years. We propose a methodology to automatically evolve a Java monolithic application into a microservice-based one. Our methodology receives the Java code and a proposition of microservices and refactors the original classes to make each microservice independent. Our methodology creates an API for each method call to classes that are in other services. The database entities are also refactored to be included in the corresponding service. The initial evaluation shows that our tool can successfully refactor 80% of the applications tested.},
booktitle = {Proceedings of the 25th Brazilian Symposium on Programming Languages},
pages = {100–107},
numpages = {8},
keywords = {refactoring, microservice-based applications, microservice architecture, monolithic decomposition, Java},
location = {Joinville, Brazil},
series = {SBLP '21}
}

@inproceedings{10.1145/3234152.3234195,
author = {Eski, Sinan and Buzluca, Feza},
title = {An Automatic Extraction Approach: Transition to Microservices Architecture from Monolithic Application},
year = {2018},
isbn = {9781450364225},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234152.3234195},
doi = {10.1145/3234152.3234195},
abstract = {Microservice architecture has been introduced as a new alternative to the monolithic architecture. It has several benefits like scalability, reliability, increase in agility and productivity, resilience to failure, ease of deployment and maintenance, and decrease in time to market. Therefore, software companies have showed a tendency to transform architecture of their legacy applications from monoliths to microservice architecture. In this transformation process, software development teams face the challenge of migration of large applications to the new architecture, where understanding the current application and reusing existing code base are important. In this paper, we propose a new approach to transform existing applications into microservices using code repositories. We use evolutionary and static code coupling information, and the graph clustering methodology, in order to automatically extract microservices from monoliths. In experimental analysis, we investigate two software projects and our approach reach up to 89% of success rate by comparing extracted microservices with the actual results.},
booktitle = {Proceedings of the 19th International Conference on Agile Software Development: Companion},
articleno = {25},
numpages = {6},
keywords = {graph clustering, microservice transformation, software architecture, microservices},
location = {Porto, Portugal},
series = {XP '18}
}

@inproceedings{10.1145/3379177.3388896,
author = {Wang, Bo and Boehm, Barry W.},
title = {Process Implications of Executable Domain Models for Microservices Development},
year = {2020},
isbn = {9781450375122},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3379177.3388896},
doi = {10.1145/3379177.3388896},
abstract = {Microservice architecture has been recognized as an important enabler for continuous development of many cloud-based systems. Code generation has been tried in the tool chain of building microservices. However, most existing tools generally do not consider the risks from continuous development.We have been developing a toolkit which generates microservices from application domain models. Our approach aligns development process to this toolkit and coordinates domain modeling activity over project life cycles. In this paper, we describe its framework and corresponding development process which eliminates delays brought by the uncertainty of a project at a relatively early stage. Several minimum viable products have been built upon the proposed approach during the past years, including automated generation of code from domain decomposition. Our result shows 10% saving of effort and fewer issues. Effort saving increases to 30% under an extreme condition with high-rate personnel turnover. We also discuss our findings on running these projects and raise discussion and questions for future enhancement.},
booktitle = {Proceedings of the International Conference on Software and System Processes},
pages = {41–50},
numpages = {10},
keywords = {microservices, domain modeling, continuous development, agile, code generation},
location = {Seoul, Republic of Korea},
series = {ICSSP '20}
}

@inproceedings{10.1145/3535511.3535539,
author = {Ramos, Danillo Siqueira and Rocha, F\'{a}bio and Soares, Michel dos Santos},
title = {A Bottom Up Approach for Modeling Business Process Using Time Petri Nets},
year = {2022},
isbn = {9781450396981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3535511.3535539},
doi = {10.1145/3535511.3535539},
abstract = {Context: UML is an important modeling language for software development in industry, considered a de facto standard for specifying a variety of models, including business processes, data models, and user scenarios that represent software at a high level of abstraction. Problem: Although UML provides the user with several diagrams for software modeling, the language still leaves gaps, such as a poor capacity for modeling time constraints, and simulating the desired behaviour of software. Thus, using only UML to model distributed systems developed using microservices, and also modeling time constraints and system’s behaviour becomes an issue that has been identified by many researchers. Proposed solution: Seeking to mitigate UML gaps, an Electronic Document Management System (SGED) modeled using UML was transcribed to Petri nets with time, using a bottom-up approach. In addition, formal verification and analysis of the model’s properties were performed. Results: Through the Petri Nets model with time, it was possible to analyze the behaviour of the modelled system, as well as analyze the systems’ properties, and then detect and prevent possible unwanted behaviour. Contributions: As for conclusion, it is clear the importance of using formal methods in practice, specially Petri nets, in systems with microservices where time constraints are crucial for their correct behaviour. In addition, it is feasible to construct large models by composing Petri nets, using a bottom-up approach, which corresponds nicely with the architecture of microservices, with independent, loosely coupling services.},
booktitle = {XVIII Brazilian Symposium on Information Systems},
articleno = {28},
numpages = {8},
keywords = {Microservices, Time Petri Nets, Business Process, Electronic Documents, UML},
location = {Curitiba, Brazil},
series = {SBSI}
}

@inproceedings{10.1109/CCGrid.2016.37,
author = {Villamizar, Mario and Garc\'{e}s, Oscar and Ochoa, Lina and Castro, Harold and Salamanca, Lorena and Verano, Mauricio and Casallas, Rubby and Gil, Santiago and Valencia, Carlos and Zambrano, Angee and Lang, Mery},
title = {Infrastructure Cost Comparison of Running Web Applications in the Cloud Using AWS Lambda and Monolithic and Microservice Architectures},
year = {2016},
isbn = {9781509024520},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CCGrid.2016.37},
doi = {10.1109/CCGrid.2016.37},
abstract = {Large Internet companies like Amazon, Netflix, and LinkedIn are using the microservice architecture pattern to deploy large applications in the cloud as a set of small services that can be developed, tested, deployed, scaled, operated and upgraded independently. However, aside from gaining agility, independent development, and scalability, infrastructure costs are a major concern for companies adopting this pattern. This paper presents a cost comparison of a web application developed and deployed using the same scalable scenarios with three different approaches: 1) a monolithic architecture, 2) a microservice architecture operated by the cloud customer, and 3) a microservice architecture operated by the cloud provider. Test results show that microservices can help reduce infrastructure costs in comparison to standard monolithic architectures. Moreover, the use of services specifically designed to deploy and scale microservices reduces infrastructure costs by 70% or more. Lastly, we also describe the challenges we faced while implementing and deploying microservice applications.1},
booktitle = {Proceedings of the 16th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing},
pages = {179–182},
numpages = {4},
keywords = {software architecture, microservices, AWS lambda, microservice architecture, service oriented architectures, software engineering, cloud computing, scalable applications, Amazon web services},
location = {Cartagena, Columbia},
series = {CCGRID '16}
}

@inproceedings{10.1145/3468264.3473915,
author = {Kalia, Anup K. and Xiao, Jin and Krishna, Rahul and Sinha, Saurabh and Vukovic, Maja and Banerjee, Debasish},
title = {Mono2Micro: A Practical and Effective Tool for Decomposing Monolithic Java Applications to Microservices},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3473915},
doi = {10.1145/3468264.3473915},
abstract = {In migrating production workloads to cloud, enterprises often face the daunting task of evolving monolithic applications toward a microservice architecture. At IBM, we developed a tool called Mono2Micro to assist with this challenging task. Mono2Micro performs spatio-temporal decomposition, leveraging well-defined business use cases and runtime call relations to create functionally cohesive partitioning of application classes. Our preliminary evaluation of Mono2Micro showed promising results. How well does Mono2Micro perform against other decomposition techniques, and how do practitioners perceive the tool? This paper describes the technical foundations of Mono2Micro and presents results to answer these two questions. To answer the first question, we evaluated Mono2Micro against four existing techniques on a set of open-source and proprietary Java applications and using different metrics to assess the quality of decomposition and tool’s efficiency. Our results show that Mono2Micro significantly outperforms state-of-the-art baselines in specific metrics well-defined for the problem domain. To answer the second question, we conducted a survey of twenty-one practitioners in various industry roles who have used Mono2Micro. This study highlights several benefits of the tool, interesting practitioner perceptions, and scope for further improvements. Overall, these results show that Mono2Micro can provide a valuable aid to practitioners in creating functionally cohesive and explainable microservice decompositions.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1214–1224},
numpages = {11},
keywords = {dynamic analysis, microservices, clustering},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@inproceedings{10.1145/3368089.3417933,
author = {Kalia, Anup K. and Xiao, Jin and Lin, Chen and Sinha, Saurabh and Rofrano, John and Vukovic, Maja and Banerjee, Debasish},
title = {Mono2Micro: An AI-Based Toolchain for Evolving Monolithic Enterprise Applications to a Microservice Architecture},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417933},
doi = {10.1145/3368089.3417933},
abstract = {Mono2Micro is an AI-based toolchain that provides recommendations for decomposing legacy web applications into microservice partitions. Mono2Micro consists of a set of tools that collect static and runtime information from a monolithic application and process the information using an AI-based technique to generate recommendations for partitioning the application classes. Each partition represents a candidate microservice or a grouping of classes with similar business functionalities. Mono2Micro takes a temporo-spatial clustering approach to compute meaningful and explainable partitions. It generates two types of partition recommendations. First, it computes business-logic-seams-based partitions that represent a desired encapsulation of business functionalities. However, such a recommendation may cut across data dependencies between classes, accommodating which could require significant application updates. To address this, Mono2Micro computes natural-seams-based partitions, which respect data dependencies. We describe the set of tools that comprise Mono2Micro and illustrate them using a well-known open-source JEE application.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1606–1610},
numpages = {5},
keywords = {software modularization, clustering, dynamic analysis, microservices},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@inproceedings{10.1145/3444757.3485108,
author = {Morais, Gabriel and Bork, Dominik and Adda, Mehdi},
title = {Towards an Ontology-Driven Approach to Model and Analyze Microservices Architectures},
year = {2021},
isbn = {9781450383141},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3444757.3485108},
doi = {10.1145/3444757.3485108},
abstract = {Microservices Architectures (MSAs) are continuously replacing monolithic systems toward achieving more flexible and maintainable service-oriented software systems. However, the shift toward an MSA also requires a technological and managerial shift for its adopters. Architecting and managing MSAs represent unique challenges, including microservices' identification, interoperability, and reuse. To handle these challenges, we propose an Ontology-driven Conceptual Modelling approach, based on the Ontology of Microservices Architecture Concepts (OMSAC), for modelling and analyzing microservices-based systems. We show, how OMSAC-based conceptual models, stocked in a Stardog triple store, support Stakeholder-specific communication, documentation, and reuse. This paper reports on the application of our approach in three open-source MSA systems with a focus on microservices' discovery based on similarity metrics. Eventually, we compare the extracted similarity metrics derived from the application of machine learning techniques to the OMSAC models with a manual analysis performed by experts.},
booktitle = {Proceedings of the 13th International Conference on Management of Digital EcoSystems},
pages = {79–86},
numpages = {8},
keywords = {Microservices, Stardog, ontology, OMSAC, machine learning},
location = {Virtual Event, Tunisia},
series = {MEDES '21}
}

@inproceedings{10.1145/2851553.2892039,
author = {Knoche, Holger},
title = {Sustaining Runtime Performance While Incrementally Modernizing Transactional Monolithic Software towards Microservices},
year = {2016},
isbn = {9781450340809},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2851553.2892039},
doi = {10.1145/2851553.2892039},
abstract = {Microservices are a promising target architecture for the modernization of monolithic software. However, breaking up a monolith into services can have a severe impact on performance, especially transactions. Therefore, careful planning of such modernizations with respect to performance is required. This is particularly true for incremental modernizations, which release partially modernized states of the application into production. In this paper, we present a simulation-based approach for sustaining runtime performance during incremental modernizations towards Microservices.},
booktitle = {Proceedings of the 7th ACM/SPEC on International Conference on Performance Engineering},
pages = {121–124},
numpages = {4},
keywords = {software modernization, microservices},
location = {Delft, The Netherlands},
series = {ICPE '16}
}

@inproceedings{10.1109/ASE51524.2021.9678704,
author = {Yedida, Rahul and Krishna, Rahul and Kalia, Anup and Menzies, Tim and Xiao, Jin and Vukovic, Maja},
title = {Lessons Learned from Hyper-Parameter Tuning for Microservice Candidate Identification},
year = {2021},
isbn = {9781665403375},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE51524.2021.9678704},
doi = {10.1109/ASE51524.2021.9678704},
abstract = {When optimizing software for the cloud, monolithic applications need to be partitioned into many smaller microservices. While many tools have been proposed for this task, we warn that the evaluation of those approaches has been incomplete; e.g. minimal prior exploration of hyperparameter optimization. Using a set of open source Java EE applications, we show here that (a) such optimization can significantly improve microservice partitioning; and that (b) an open issue for future work is how to find which optimizer works best for different problems. To facilitate that future work, see https://github.com/yrahul3910/ase-tuned-mono2micro for a reproduction package for this research.},
booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1141–1145},
numpages = {5},
keywords = {microservices, hyper-parameter optimization},
location = {Melbourne, Australia},
series = {ASE '21}
}

@inproceedings{10.1145/3297280.3297400,
author = {Cardarelli, Mario and Iovino, Ludovico and Di Francesco, Paolo and Di Salle, Amleto and Malavolta, Ivano and Lago, Patricia},
title = {An Extensible Data-Driven Approach for Evaluating the Quality of Microservice Architectures},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297400},
doi = {10.1145/3297280.3297400},
abstract = {Microservice architecture (MSA) is defined as an architectural style where the software system is developed as a suite of small services, each running in its own process and communicating with lightweight mechanisms. The benefits of MSA are many, ranging from an increase in development productivity, to better business-IT alignment, agility, scalability, and technology flexibility. The high degree of microservices distribution and decoupling is, however, imposing a number of relevant challenges from an architectural perspective. In this context, measuring, controlling, and keeping a satisfactory level of quality of the system architecture is of paramount importance.In this paper we propose an approach for the specification, aggregation, and evaluation of software quality attributes for the architecture of microservice-based systems. The proposed approach allows developers to (i) produce architecture models of the system, either manually or automatically via recovering techniques, (ii) contribute to an ecosystem of well-specified and automatically-computable software quality attributes for MSAs, and (iii) continuously measure and evaluate the architecture of their systems by (re-)using the software quality attributes defined in the ecosystem. The approach is implemented by using Model-Driven Engineering techniques.The current implementation of the approach has been validated by assessing the maintainability of a third-party, publicly available benchmark system.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1225–1234},
numpages = {10},
keywords = {model-driven, software quality, architecture recovery, microservices},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/3387940.3391476,
author = {Strobl, Stefan and Bernhart, Mario and Grechenig, Thomas},
title = {Towards a Topology for Legacy System Migration},
year = {2020},
isbn = {9781450379632},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387940.3391476},
doi = {10.1145/3387940.3391476},
abstract = {Dealing with legacy systems is a decade old industry challenge. The pressure to efficiently modernise legacy both to meet new business requirements and to mitigate inherent risks is ever growing. Our experience shows a lack of collaboration between researchers and practitioners inhibiting innovation in the field. To facilitate communication between academia and industry and as a byproduct to obtain an up to date picture of the state of affairs we are creating a legacy system migration topology based on generalisations from a multi-case study as well as extensive literature research. We expect the topology to be useful in connecting industry needs and challenges with current and potential future research and to improve bidirectional accessibility.},
booktitle = {Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops},
pages = {586–594},
numpages = {9},
keywords = {academia industry collaboration, legacy system migration, academia industry communication, reengineering},
location = {Seoul, Republic of Korea},
series = {ICSEW'20}
}

@inproceedings{10.1145/3483899.3483908,
author = {Santos, Ana and Paula, Hugo},
title = {Microservice Decomposition and Evaluation Using Dependency Graph and Silhouette Coefficient},
year = {2021},
isbn = {9781450384193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3483899.3483908},
doi = {10.1145/3483899.3483908},
abstract = {The benefits provided by microservices architecture in some application scenarios are a motivating factor for organizations to migrate their monoliths to this architecture. Extracting microservices from existing monolithic code bases presents a key challenge in this context, and there is a lack of tools that automate not only the decomposition processes but also the evaluation of the resulting architecture. This work presents a new approach for microservice decomposition that analyzes source code of a monolithic application and, with the combined use of approaches in the literature, suggests parts to be extracted in microservices considering the artifacts: classes, methods and/or history of modifications. The quality of the microservices’ suggestions are assessed, quantitatively, through the silhouette coefficient, a quality metric used in clustering analysis, and the microservice granularity. A tool was developed to automate the process of microservice decomposition for Java repositories. As a result, it was observed that the tool generated clusters with satisfactory results and can be used as an auxiliary instrument by experts during the migration process from monolithic architecture to microservices.},
booktitle = {15th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {51–60},
numpages = {10},
keywords = {decomposition, microservices, monolithic application},
location = {Joinville, Brazil},
series = {SBCARS '21}
}

@inproceedings{10.5555/3374138.3374171,
author = {Bocciarelli, Paolo and D'Ambrogio, Andrea and Giglio, Andrea and Paglia, Emiliano},
title = {A Microservice-Based Approach for Fine-Grained Simulation in MSaaS Platforms},
year = {2019},
publisher = {Society for Computer Simulation International},
address = {San Diego, CA, USA},
abstract = {M&amp;S as a Service (MSaaS) is an increasingly adopted paradigm that brings the benefits of service-oriented architectures and cloud computing into the M&amp;S field. The design and implementation of MSaaS platforms typically address the provision of coarse-grained M&amp;S services, which offer the user easy access and orchestration of M&amp;S components consisting of entire environments, applications and/or tools. This paper introduces an approach to the provision of fine-grained M&amp;S services, which are defined by use of a microservice-based architecture, according to which applications are developed as a suite of small-sized services. The proposed approach extends an already available MSaaS platform, named SOASim. The paper shows how the integration and mutual use of fine-grained and coarse-grained services (e.g., modeling services, transformation services, presentation services etc.) significantly enhance the benefits of SOASim. An example application to the microservice-based setup of a discrete event simulation is used to describe and discuss the proposed approach.},
booktitle = {Proceedings of the 2019 Summer Simulation Conference},
articleno = {33},
numpages = {12},
keywords = {SaaS, microservices, MSaaS, cloud, DES},
location = {Berlin, Germany},
series = {SummerSim '19}
}

@inproceedings{10.1145/3266237.3266262,
author = {Luz, Welder and Agilar, Everton and de Oliveira, Marcos C\'{e}sar and de Melo, Carlos Eduardo R. and Pinto, Gustavo and Bonif\'{a}cio, Rodrigo},
title = {An Experience Report on the Adoption of Microservices in Three Brazilian Government Institutions},
year = {2018},
isbn = {9781450365031},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3266237.3266262},
doi = {10.1145/3266237.3266262},
abstract = {Although monolithic applications are still the modus operandi of many software systems, the microservices architecture, which favors small and independent applications, is gaining increasing popularity. This is part due to its claimed benefits, which includes better scalability, productivity, and maintainability. However, little is known about how developers and architects perceive the benefits of migrating from monolithic applications to microservices, and what are the challenges towards achieving them. In this paper we discuss the motivation, benefits, and challenges related to the migration from monolithic enterprise architectures to a microservices based architecture. We report several lessons learned that arose from a two years process faced by three Brazilian Government Institutions. We also cross-validate these findings with a survey conducted with 13 practitioners in the studied companies. The results of our investigation highlight some evidence that the adoption of microservices brought several benefits for these institutions, such as (a) reducing development time and risks related to deployment activities and (b) increasing the opportunities to experiment with different technologies and development models (such as hackathons). However, our observations reveal that the adoption of microservices is still a challenging task, mainly because it not only demands the understanding of new techniques and tools, but it also increases the need to automate tasks related to software deployment and software monitoring. This study is particularly relevant for institutions interested in adopting a software architecture based on microservices, and we are currently sharing our experiences with other institutions.},
booktitle = {Proceedings of the XXXII Brazilian Symposium on Software Engineering},
pages = {32–41},
numpages = {10},
keywords = {monolithic applications, experience report, lessons learned, microservice applications},
location = {Sao Carlos, Brazil},
series = {SBES '18}
}

@inproceedings{10.1145/3483899.3483904,
author = {Colanzi, Thelma and Amaral, Aline and Assun\c{c}\~{a}o, Wesley and Zavadski, Arthur and Tanno, Douglas and Garcia, Alessandro and Lucena, Carlos},
title = {Are We Speaking the Industry Language? The Practice and Literature of Modernizing Legacy Systems with Microservices},
year = {2021},
isbn = {9781450384193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3483899.3483904},
doi = {10.1145/3483899.3483904},
abstract = {Microservice architecture has gained much attention in the last few years in both industry and academia. Microservice is an architectural style that enables developing systems as a suite of small loosely coupled, and autonomous (micro)services that encapsulate business capabilities and communicate with each other using language-agnostic APIs. Despite the microservice adoption for modernizing legacy systems, few studies investigate how microservices are used in practice. Furthermore, the literature still scarce on presenting studies on why and how the modernization is conducted in practice in comparison to existing literature on the subject. Thus, our goal is to investigate if industry and academy are speaking the same language concerning the modernization of legacy systems with microservices, by means of a rigorous study on the use of microservices in the industry. For doing so, we design a survey to understand the state of practice from the perspective of a modernization process roadmap derived from the literature. In this paper, we report the results of a survey with 56 software companies, from which 35 (63.6%) adopt the microservice architecture in their legacy systems. Results pointed out the most expected benefits that drive the migration to microservices are easier software maintenance, better scalability, ease of deployment, and technology flexibility. Besides, we verified, based on a set of activities defined in the modernization process, that the practitioners are performing their migration process according to the best literature practices.},
booktitle = {15th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {61–70},
numpages = {10},
keywords = {Software Migration, Microservices, Software Re-engineering},
location = {Joinville, Brazil},
series = {SBCARS '21}
}

@inproceedings{10.1145/3476883.3520220,
author = {Lee, Yunhyeok and Liu, Yi},
title = {Using Refactoring to Migrate REST Applications to GRPC},
year = {2022},
isbn = {9781450386975},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3476883.3520220},
doi = {10.1145/3476883.3520220},
abstract = {The Google Remote Procedure Call (gRPC), a variant of the Remote Procedure Call (RPC) architecture, performs better than the widely used REpresentational State Transfer (REST) architecture in some types of Web applications, such as microservices. Being able to transform applications using the REST application programming interface (API) to the gRPC API can potentially improve the communication performance. In this paper, we propose an approach to refactoring REST applications to obtain equivalent gRPC applications and demonstrate the approach using a small microservice-oriented application. This refactoring approach is sufficiently general to apply to any Web application.},
booktitle = {Proceedings of the 2022 ACM Southeast Conference},
pages = {219–223},
numpages = {5},
keywords = {gRPC, code refactoring, web application, REST},
location = {Virtual Event},
series = {ACM SE '22}
}

@inproceedings{10.1145/3336294.3336319,
author = {Carvalho, Luiz and Garcia, Alessandro and Assun\c{c}\~{a}o, Wesley K. G. and Bonif\'{a}cio, Rodrigo and Tizzei, Leonardo P. and Colanzi, Thelma Elita},
title = {Extraction of Configurable and Reusable Microservices from Legacy Systems: An Exploratory Study},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336319},
doi = {10.1145/3336294.3336319},
abstract = {Microservices is an emerging industrial technique to promote better modularization and management of small and autonomous services. Microservice architecture is widely used to overcome the limitations of monolithic legacy systems, such as limited maintainability and reusability. Migration to a microservice architecture is increasingly becoming the focus of academic research. However, there is little knowledge on how microservices are extracted from legacy systems in practice. Among these limitations, there is a lack of understanding if variability is considered useful along the microservice extraction from a configurable system. In order to address this gap, we performed an exploratory study composed of two phases. Firstly, we conducted an online survey with 26 specialists that contributed to the migration of existing systems to a microservice architecture. Secondly, we performed individual interviews with seven survey participants. A subset of the participants (13 out of 26) dealt with systems with variability during the extraction, which stated that variability is a key criterion for structuring the microservices. Moreover, variability in the legacy system is usually implemented with simple mechanisms. Finally, initial evidence points out that microservices extraction can increase software customization.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {26–31},
numpages = {6},
keywords = {software variability, architecture migration, microservice architecture, microservice customization},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1109/ASE51524.2021.9678851,
author = {Krishna, Rahul and Kalia, Anup and Sinha, Saurabh and Tzoref-Brill, Rachel and Rofrano, John and Xiao, Jin},
title = {Transforming Monolithic Applications to Microservices with Mono2Micro},
year = {2021},
isbn = {9781665403375},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE51524.2021.9678851},
doi = {10.1109/ASE51524.2021.9678851},
abstract = {Enterprises are increasingly moving their production workloads to the cloud to take advantage of capabilities, such as streamlined provisioning of infrastructure and services, elasticity, scalability, reliability, and security. To leverage such capabilities, monolithic applications typically have to be decomposed to cloud-native architectures, such as microservices. A microservice encapsulates a small and well-defined set of business functionalities and interacts with other services using lightweight mechanisms, often implemented as RESTful APIs. A recent report shows that only 20% of the enterprise workloads are in the cloud, and they were predominately written for native cloud architectures. This leaves 80% of legacy applications onpremises, waiting to be refactored and modernized for the cloud. In this tutorial, we will discuss the motivation---supported by illustrative industrial case studies---for modernizing and migrating legacy applications to cloud. We will then present a detailed tool-supported approach for transforming a monolithic Java application into microservices. This will be followed by a handson virtual lab, where participants will have the opportunity to apply the learned concepts on a real-world enterprise application. Finally, we will conclude the tutorial with a discussion of promising directions for future research more broadly in the area of application modernization.},
booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering},
pages = {3},
numpages = {1},
location = {Melbourne, Australia},
series = {ASE '21}
}

@inproceedings{10.1145/3463274.3463334,
author = {Wolfart, Daniele and Assun\c{c}\~{a}o, Wesley K. G. and da Silva, Ivonei F. and Domingos, Diogo C. P. and Schmeing, Ederson and Villaca, Guilherme L. Donin and Paza, Diogo do N.},
title = {Modernizing Legacy Systems with Microservices: A Roadmap},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463334},
doi = {10.1145/3463274.3463334},
abstract = {Legacy systems are long-lived applications, with obsolete technology and degraded architecture. These systems hamper digital transformation and innovation, and require a great amount of resources for maintenance. The modernization of monolithic legacy systems is a strategy to promote better evolution and maintenance, taking advantage of new technologies such as microservices. Microservice architectural style is a paradigm to develop systems as a suite of small and autonomous services, communicating through a lightweight protocol. However, the migration of legacy systems to microservices is complex. Although we can find several studies on this topic, they usually focus on specific activities, e.g., the identification of the microservice boundaries in the legacy code. Also, existing pieces of work do not cover real-world scenarios, since they do not take into account organizational, operational, and technical aspects. To overcome this limitation, in this paper we present a roadmap for modernizing monolithic legacy systems with microservices. The roadmap is distilled from the existing body of knowledge, describing common activities and input/output information. The proposed roadmap is composed of eight activities, grouped in four phases, namely initiation, planning, execution, and monitoring. The main contributions are: (i) serve as a basis for practitioners to plan, execute, and monitor the modernization process; (ii) be a reference for researchers to design new studies; and (iii) motivate tool builders to deal with existing needs.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {149–159},
numpages = {11},
keywords = {Cloud Computing, Software Migration, Software Evolution},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@inproceedings{10.1109/CCGRID.2017.28,
author = {Selimi, Mennan and Cerd\`{a}-Alabern, Lloren\c{c} and S\'{a}nchez-Artigas, Marc and Freitag, Felix and Veiga, Lu\'{\i}s},
title = {Practical Service Placement Approach for Microservices Architecture},
year = {2017},
isbn = {9781509066100},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CCGRID.2017.28},
doi = {10.1109/CCGRID.2017.28},
abstract = {Community networks (CNs) have gained momentum in the last few years with the increasing number of spontaneously deployed WiFi hotspots and home networks. These networks, owned and managed by volunteers, offer various services to their members and to the public. To reduce the complexity of service deployment, community micro-clouds have recently emerged as a promising enabler for the delivery of cloud services to community users. By putting services closer to consumers, micro-clouds pursue not only a better service performance, but also a low entry barrier for the deployment of mainstream Internet services within the CN. Unfortunately, the provisioning of the services is not so simple. Due to the large and irregular topology, high software and hardware diversity of CNs, it requires of a "careful" placement of micro-clouds and services over the network.To achieve this, this paper proposes to leverage state information about the network to inform service placement decisions, and to do so through a fast heuristic algorithm, which is vital to quickly react to changing conditions. To evaluate its performance, we compare our heuristic with one based on random placement in Guifi.net, the biggest CN worldwide. Our experimental results show that our heuristic consistently outperforms random placement by 211% in terms of bandwidth gain. We quantify the benefits of our heuristic on a real live video-streaming service, and demonstrate that video chunk losses decrease significantly, attaining a 37% decrease in the loss packet rate. Further, using a popular Web 2.0 service, we demonstrate that the client response times decrease up to an order of magnitude when using our heuristic.},
booktitle = {Proceedings of the 17th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing},
pages = {401–410},
numpages = {10},
keywords = {service placement, community networks, micro-clouds},
location = {Madrid, Spain},
series = {CCGrid '17}
}

@inproceedings{10.1145/3338906.3340452,
author = {Nguyen, Phu H. and Song, Hui and Chauvel, Franck and Muller, Roy and Boyar, Seref and Levin, Erik},
title = {Using Microservices for Non-Intrusive Customization of Multi-Tenant SaaS},
year = {2019},
isbn = {9781450355728},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338906.3340452},
doi = {10.1145/3338906.3340452},
abstract = {Enterprise software vendors often need to support their customer companies to customize the enterprise software products deployed on-premises of customers. But when software vendors are migrating their products to cloud-based Software-as-a-Service (SaaS), deep customization that used to be done on-premises is not applicable to the cloud-based multi-tenant context in which all tenants share the same SaaS. Enabling tenant-specific customization in cloud-based multi-tenant SaaS requires a novel approach. This paper proposes a Microservices-based non-intrusive Customization framework for multi-tenant Cloud-based SaaS, called MiSC-Cloud. Non-intrusive deep customization means that the microservices for customization of each tenant are isolated from the main software product and other microservices for customization of other tenants. MiSC-Cloud makes deep customization possible via authorized API calls through API gateways to the APIs of the customization microservices and the APIs of the main software product. We have implemented a proof-of-concept of our approach to enable non-intrusive deep customization of an open-source cloud native reference application of Microsoft called eShopOnContainers. Based on this work, we provide some lessons learned and directions for future work.},
booktitle = {Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {905–915},
numpages = {11},
keywords = {SaaS, customization, multi-tenancy, cloud, microservices},
location = {Tallinn, Estonia},
series = {ESEC/FSE 2019}
}

@inproceedings{10.1145/3010089.3010092,
author = {Debab, Ramzi and Hidouci, Walid-Khaled},
title = {Towards a More Reliable and Robust Cloud Meta-Operating System Based on Heterogeneous Kernels: A Novel Approach Based on Containers and Microservices},
year = {2016},
isbn = {9781450347792},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3010089.3010092},
doi = {10.1145/3010089.3010092},
abstract = {The Operating Systems (OS) provide services to applications via APIs that encapsulate the system calls interface. In the context of critical applications, the SLA is closely dependent on the underlying OS. This SLA is a big challenge for the most Cloud providers as they have to ensure the sustainability of their customers' workloads. The kernel, which is the core of the OS, knew different approaches for its development. However, monolithic kernels are still the most performant despite of their fragility and unreliability. Today, we know a variety of heterogeneous OS developed by different communities. "Two heads are better than one", applying this principle allows an OS with its benefits to cover the shortcomings of others in a given case. All the known general purpose OS are vulnerable. So, we suppose that the superposition of the OS in such way that a healthy kernel replaces the vulnerable services of another kernel is a good track to operate. This replacement is accomplished via the transfer of system calls from the vulnerable kernel to a more reliable and efficient remote discovered kernel. We propose the architecture of a Meta-OS based on heterogeneous monolithic kernels in order to ensure reliability and performance. The features of this Meta-OS are encapsulated in microservices running inside containers. Two contemporary technologies are used to implement our solution: Virtualization (hardware and OS based) and Web Services.},
booktitle = {Proceedings of the International Conference on Big Data and Advanced Wireless Technologies},
articleno = {7},
numpages = {13},
keywords = {Containers, Microservices, Docker, Monolithic Kernels, Mission critical and intensive applications, System calls, Operating Systems, Web Services, Virtualization},
location = {Blagoevgrad, Bulgaria},
series = {BDAW '16}
}

@inproceedings{10.1145/3338840.3355659,
author = {Smid, Antonin and Wang, Ruolin and Cerny, Tomas},
title = {Case Study on Data Communication in Microservice Architecture},
year = {2019},
isbn = {9781450368438},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338840.3355659},
doi = {10.1145/3338840.3355659},
abstract = {Microservice Architecture is becoming a design standard for modern cloud-based software systems. However, data communication management remains a challenge. This is especially apparent when migrating from an existing monolithic system into microservices. In this paper, we report on data synchronization and improvement of the data-source performance. We faced these challenges in production-level development. Two case studies illustrate and describe our approach. To address data synchronization we propose using an automated data streaming system between databases. To improve the performance of a data-source we introduced a solution with the distributed cache. We discuss the balance between the performance and coupling and point out situations where our architectures are appropriate.},
booktitle = {Proceedings of the Conference on Research in Adaptive and Convergent Systems},
pages = {261–267},
numpages = {7},
keywords = {microservices, cloud-computing, system integration},
location = {Chongqing, China},
series = {RACS '19}
}

@inproceedings{10.1145/3120459.3120483,
author = {Taibi, Davide and Lenarduzzi, Valentina and Pahl, Claus and Janes, Andrea},
title = {Microservices in Agile Software Development: A Workshop-Based Study into Issues, Advantages, and Disadvantages},
year = {2017},
isbn = {9781450352642},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3120459.3120483},
doi = {10.1145/3120459.3120483},
abstract = {In the last years, cloud-native architectures have emerged as a target platform for the deployment of microservice architectures. The migration of existing monoliths into cloud-native applications is still in the early phase, and only few companies already started their migrations. Therefore, success and failure stories about different approaches are not available in the literature. This context connects also to the recently discussed DevOps context where development and continuous deployment are closely linked.},
booktitle = {Proceedings of the XP2017 Scientific Workshops},
articleno = {23},
numpages = {5},
keywords = {microservices, cloud software, SOA, software architecture},
location = {Cologne, Germany},
series = {XP '17}
}

@inproceedings{10.1145/3524304.3524325,
author = {Cao, Lingli and Zhang, Cheng},
title = {Implementation of Domain-Oriented Microservices Decomposition Based on Node-Attributed Network},
year = {2022},
isbn = {9781450385770},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524304.3524325},
doi = {10.1145/3524304.3524325},
abstract = {The features of microservices, such as scalability and maintainability, have attracted the industry to migrate monolithic projects to microservices. However, how to decompose microservices during migration is a tricky problem. At present, microservices decomposition mainly relies on architects or domain experts, which is more subjective and time-consuming. Followed by semi-automated or automated microservice decomposition, such methods produce coarse-grained results affected by different system characteristics, which cannot make desired decomposition according to the migration requirements of domains. Therefore, this paper proposes a domain-oriented fine-grained microservices decomposition resolution scheme. It uses dynamic and static analysis to obtain the invocation relationships and invocation times between entity methods and the response time of entity methods to represent three main system characteristics concerned during the migration: function, inter-service communications, and performance. And express the above information of monolith by the node-attributed network. Then it uses the community detection algorithm and the proposed similar hierarchical clustering algorithm to complete objective and effective decomposition. Finally, the rationality and feasibility of the proposed approach are verified using the JPetStore case.},
booktitle = {2022 11th International Conference on Software and Computer Applications},
pages = {136–142},
numpages = {7},
keywords = {Microservices Decomposition, Node-attributed Network, Dynamic analysis, Static analysis, Domain},
location = {Melaka, Malaysia},
series = {ICSCA 2022}
}

@inproceedings{10.1109/TechDebt.2019.00026,
author = {de Toledo, Saulo S. and Martini, Antonio and Przybyszewska, Agata and Sj\o{}berg, Dag I. K.},
title = {Architectural Technical Debt in Microservices: A Case Study in a Large Company},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/TechDebt.2019.00026},
doi = {10.1109/TechDebt.2019.00026},
abstract = {Introduction: Software companies aim to achieve continuous delivery to constantly provide value to their customers. A popular strategy is to use microservices architecture. However, such an architecture is also subject to debt, which hinders the continuous delivery process and thus negatively affects the software released to the customers.Objectives: The aim of this study is to identify issues, solutions and risks related to Architecture Technical Debt in microservices.Method: We conducted an exploratory case study of a real life project with about 1000 services in a large, international company. Through qualitative analysis of documents and interviews, we investigated Architecture Technical Debt in the communication layer of a system with microservices architecture.Results: Our main contributions are a list of Architecture Technical Debt issues specific for the communication layer in a system with microservices architecture, as well as their associated negative impact (interest), a solution to repay the debt and the its cost (principal). Among the found Architecture Technical Debt issues were the existence of business logic in the communication layer and a high amount of point-to-point connections between services. The studied solution consists of the implementation of different canonical models specific to different domains, the removal of business logic from the communication layer, and migration from services to use the communication layer correctly. We also contributed with a list of possible risks that can affect the payment of the debt, as lack of funding and inadequate prioritization.Conclusion: We found issues, solutions and possible risks that are specific for microservices architectures not yet encountered in the current literature. Our results may be useful for practitioners that want to avoid or repay Technical Debt in their microservices architecture.},
booktitle = {Proceedings of the Second International Conference on Technical Debt},
pages = {78–87},
numpages = {10},
keywords = {microservices, case study, technical debt, architecture},
location = {Montreal, Quebec, Canada},
series = {TechDebt '19}
}

@inproceedings{10.1145/3445814.3446700,
author = {Gan, Yu and Liang, Mingyu and Dev, Sundar and Lo, David and Delimitrou, Christina},
title = {Sage: Practical and Scalable ML-Driven Performance Debugging in Microservices},
year = {2021},
isbn = {9781450383172},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3445814.3446700},
doi = {10.1145/3445814.3446700},
abstract = {Cloud applications are increasingly shifting from large monolithic services to complex graphs of loosely-coupled microservices. Despite the advantages of modularity and elasticity microservices offer, they also complicate cluster management and performance debugging, as dependencies between tiers introduce backpressure and cascading QoS violations. Prior work on performance debugging for cloud services either relies on empirical techniques, or uses supervised learning to diagnose the root causes of performance issues, which requires significant application instrumentation, and is difficult to deploy in practice. We present Sage, a machine learning-driven root cause analysis system for interactive cloud microservices that focuses on practicality and scalability. Sage leverages unsupervised ML models to circumvent the overhead of trace labeling, captures the impact of dependencies between microservices to determine the root cause of unpredictable performance online, and applies corrective actions to recover a cloud service’s QoS. In experiments on both dedicated local clusters and large clusters on Google Compute Engine we show that Sage consistently achieves over 93% accuracy in correctly identifying the root cause of QoS violations, and improves performance predictability.},
booktitle = {Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {135–151},
numpages = {17},
keywords = {counterfactual, Bayesian network, performance debugging, QoS, variational autoencoder, cloud computing, microservices},
location = {Virtual, USA},
series = {ASPLOS '21}
}

@inproceedings{10.1145/3524304.3524306,
author = {Ding, Xiang and Zhang, Cheng},
title = {How Can We Cope with the Impact of Microservice Architecture Smells?},
year = {2022},
isbn = {9781450385770},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524304.3524306},
doi = {10.1145/3524304.3524306},
abstract = {Context: Software Architecture Smells (AS) are potential software structure problems and always impact software quality negatively. And with the development of Microservice architecture, the Microservice Architecture Smells (MAS) have been attracting more and more attention. The software scholars and developers have discovered the influence of MAS and performed some researches on them. However, the definition and category of MAS are still ambiguous.Objects: This paper aims to clarify the specific MAS categories and their definitions, and then further explores the issues caused by MAS in the migration process from a monolithic system to Microservice.Method: We performed a comprehensive systematic literature review about MAS. Specifically, we explored 13 white and 10 grey literature in detail to get MAS information by using the quantitative research method. To explore the issues that influence the migration process from a monolithic system to Microservice, we used the meta-ethnography qualitative research method to extract relevant information and get six three-order translations.Results: This study defined 22 Microservice Architecture Smells and classified them into five categories, namely Design, Deployment, Monitor &amp; Log, Communication and Team &amp; Tool, based on their characteristics. Simultaneously, the issues that influence the migration process are proposed, including service cutting, databases, communication, team and techniques. Finally, we matched the MAS to the issues they caused in the migration process and recommended solutions to these issues.},
booktitle = {2022 11th International Conference on Software and Computer Applications},
pages = {8–14},
numpages = {7},
keywords = {smell impact, Microservice Architecture Smells, meta-ethnography, Systematic Literature Review},
location = {Melaka, Malaysia},
series = {ICSCA 2022}
}

@article{10.1145/2956641.2956643,
author = {Killalea, Tom},
title = {The Hidden Dividends of Microservices: Microservices Aren’t for Every Company, and the Journey Isn’t Easy.},
year = {2016},
issue_date = {May-June 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {14},
number = {3},
issn = {1542-7730},
url = {https://doi.org/10.1145/2956641.2956643},
doi = {10.1145/2956641.2956643},
abstract = {Microservices are an approach to building distributed systems in which services are exposed only through hardened APIs; the services themselves have a high degree of internal cohesion around a specific and well-bounded context or area of responsibility, and the coupling between them is loose. Such services are typically simple, yet they can be composed into very rich and elaborate applications. The effort required to adopt a microservices-based approach is considerable, particularly in cases that involve migration from more monolithic architectures. The explicit benefits of microservices are well known and numerous, however, and can include increased agility, resilience, scalability, and developer productivity. This article identifies some of the hidden dividends of microservices that implementers should make a conscious effort to reap.},
journal = {Queue},
month = {may},
pages = {25–34},
numpages = {10}
}

@inproceedings{10.1145/3358960.3379124,
author = {Eismann, Simon and Bezemer, Cor-Paul and Shang, Weiyi and Okanovi\'{c}, Du\v{s}an and van Hoorn, Andr\'{e}},
title = {Microservices: A Performance Tester's Dream or Nightmare?},
year = {2020},
isbn = {9781450369916},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3358960.3379124},
doi = {10.1145/3358960.3379124},
abstract = {In recent years, there has been a shift in software development towards microservice-based architectures, which consist of small services that focus on one particular functionality. Many companies are migrating their applications to such architectures to reap the benefits of microservices, such as increased flexibility, scalability and a smaller granularity of the offered functionality by a service. On the one hand, the benefits of microservices for functional testing are often praised, as the focus on one functionality and their smaller granularity allow for more targeted and more convenient testing. On the other hand, using microservices has their consequences (both positive and negative) on other types of testing, such as performance testing. Performance testing is traditionally done by establishing the baseline performance of a software version, which is then used to compare the performance testing results of later software versions. However, as we show in this paper, establishing such a baseline performance is challenging in microservice applications. In this paper, we discuss the benefits and challenges of microservices from a performance tester's point of view. Through a series of experiments on the TeaStore application, we demonstrate how microservices affect the performance testing process, and we demonstrate that it is not straightforward to achieve reliable performance testing results for a microservice application.},
booktitle = {Proceedings of the ACM/SPEC International Conference on Performance Engineering},
pages = {138–149},
numpages = {12},
keywords = {regression testing, performance, microservices, DevOps},
location = {Edmonton AB, Canada},
series = {ICPE '20}
}

@inproceedings{10.1145/3053600.3053653,
author = {Heinrich, Robert and van Hoorn, Andr\'{e} and Knoche, Holger and Li, Fei and Lwakatare, Lucy Ellen and Pahl, Claus and Schulte, Stefan and Wettinger, Johannes},
title = {Performance Engineering for Microservices: Research Challenges and Directions},
year = {2017},
isbn = {9781450348997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3053600.3053653},
doi = {10.1145/3053600.3053653},
abstract = {Microservices complement approaches like DevOps and continuous delivery in terms of software architecture. Along with this architectural style, several important deployment technologies, such as container-based virtualization and container orchestration solutions, have emerged. These technologies allow to efficiently exploit cloud platforms, providing a high degree of scalability, availability, and portability for microservices.Despite the obvious importance of a sufficient level of performance, there is still a lack of performance engineering approaches explicitly taking into account the particularities of microservices. In this paper, we argue why new solutions to performance engineering for microservices are needed. Furthermore, we identify open issues and outline possible research directions with regard to performance-aware testing, monitoring, and modeling of microservices.},
booktitle = {Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering Companion},
pages = {223–226},
numpages = {4},
keywords = {software performance engineering, microservices, continuous delivery},
location = {L'Aquila, Italy},
series = {ICPE '17 Companion}
}

@inproceedings{10.1145/3475716.3475784,
author = {Mo, Ran and Zhao, Yang and Feng, Qiong and Li, Zengyang},
title = {The Existence and Co-Modifications of Code Clones within or across Microservices},
year = {2021},
isbn = {9781450386654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475716.3475784},
doi = {10.1145/3475716.3475784},
abstract = {In recent years, microservice architecture has been widely applied in software design. In addition, more and more monolithic software systems have been migrated into a microservice architecture. The core idea is to decompose the concerns of software projects into small and loosely-coupled services. Each service is supposed to be developed and even managed independently, which in turn improving the efficiency of development and maintenance. Code clone is common during software implementations, and many prior studies have revealed that code clones could cause maintenance difficulties. However, there is little work exploring the impacts of code clones on microservice projects. To bridge this gap, we focus on exploring the existence and co-modifications of within-service and cross-service code clones. With our evaluation of eight microservice projects, we have presented that there still exist code clones within services or across services. In addition, both within-service and cross-service code clones have been involved in co-modifications, meaning that these clones have caused maintenance difficulties. Finally, we have explored the characteristics of co-modifications in terms of changed LOC for both within-service and cross-service code clones.},
booktitle = {Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
articleno = {22},
numpages = {11},
keywords = {Code Clone, Co-modification, Microservice},
location = {Bari, Italy},
series = {ESEM '21}
}

@inproceedings{10.1145/2933267.2933427,
author = {Ollesch, Julius},
title = {Adaptive Steering of Cyber-Physical Systems with Atomic Complex Event Processing Services: Doctoral Symposium},
year = {2016},
isbn = {9781450340212},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2933267.2933427},
doi = {10.1145/2933267.2933427},
abstract = {Given the advent of cyber-physical systems (CPS), event-based control paradigms such as complex event processing (CEP) are vital enablers for adaptive analytical control mechanisms. CPS are becoming a high-profile research topic as they are key to disruptive digital innovations such as autonomous driving, industrial internet, smart grid and ambient assisted living. However, organizational and technological scalability of today's CEP approaches is limited by their monolithic architectures. This leads to the research idea for atomic CEP entities and the hypothesis that a network of small event-based control services is better suited for CPS development and operation than current centralised approaches. In addition, the paper summarizes preliminary results of the presented doctoral work and outlines questions for future research as well as an evaluation plan.},
booktitle = {Proceedings of the 10th ACM International Conference on Distributed and Event-Based Systems},
pages = {402–405},
numpages = {4},
keywords = {complex event processing, cyber-physical systems, internet of things, architecture, real-time analytics, microservices, sensor networks, web services, spatio-temporal processing},
location = {Irvine, California},
series = {DEBS '16}
}

@inproceedings{10.1145/3205651.3208253,
author = {Khalloof, Hatem and Jakob, Wilfried and Liu, Jianlei and Braun, Eric and Shahoud, Shadi and Duepmeier, Clemens and Hagenmeyer, Veit},
title = {A Generic Distributed Microservices and Container Based Framework for Metaheuristic Optimization},
year = {2018},
isbn = {9781450357647},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3205651.3208253},
doi = {10.1145/3205651.3208253},
abstract = {In recent years, metaheuristics have been a convincing solution for solving many types of complex optimization problems. Efficient execution for the most variants of metaheuristics e.g. Evolutionary Algorithms (EAs) or Swarm Optimization can require lots of computational power depending on the complexity of the application. For maximizing performance, parallelization of metaheuristic algorithms represents a meaningful approach, especially for EAs featuring an inherent parallelism. However, the majority of existing distributed optimization frameworks are implemented as monolithic and non-distributed applications running on one computer instead of using the computing power of computer clusters. Additionally, the application typically cannot easily work dynamically together with other tools and services like single simulators or combinations of simulators for multi-domain simulations. In the present paper, a new distributed framework for population-based metaheuristics, which can run highly parallelized optimizations on large scale computing clusters is introduced. The framework exploits and combines two lightweight technologies namely container virtualization and microservices for a fully automated and highly scalable solution. Another main advantage of the framework is that it allows plugging in and out different metaheuristic optimization algorithms and services via its modular distributed architecture. In order to validate the new design and implementation, the EA GLEAM (General Learning Evolutionary Algorithm and Method) [2, 3] is integrated into the framework and deployed on a cluster with 4 nodes and 128 cores for benchmarking. The tested master-slave parallelization of this EA shows considerable low overhead times and hence paves the way for future applications in, e.g., smart energy systems.},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference Companion},
pages = {1363–1370},
numpages = {8},
keywords = {microservices, parallel computing, container, virtualization, metaheuristic optimization, cluster, scalability, evolutionary algorithms},
location = {Kyoto, Japan},
series = {GECCO '18}
}

@article{10.1145/3183628.3183631,
author = {Cerny, Tomas and Donahoo, Michael J. and Trnka, Michal},
title = {Contextual Understanding of Microservice Architecture: Current and Future Directions},
year = {2018},
issue_date = {December 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {4},
issn = {1559-6915},
url = {https://doi.org/10.1145/3183628.3183631},
doi = {10.1145/3183628.3183631},
abstract = {Current industry trends in enterprise architectures indicate movement from Service-Oriented Architecture (SOA) to Microservices. By understanding the key differences between these two approaches and their features, we can design a more effective Microservice architecture by avoiding SOA pitfalls. To do this, we must know why this shift is happening and how key SOA functionality is addressed by key features of the Microservice-based system. Unfortunately, Microservices do not address all SOA shortcomings. In addition, Microservices introduce new challenges. This work provides a detailed analysis of the differences between these two architectures and their features. Next, we describe both research and industry perspectives on the strengths and weaknesses of both architectural directions. Finally, we perform a systematic mapping study related to Microservice research, identifying interest and challenges in multiple categories from a range of recent research.},
journal = {SIGAPP Appl. Comput. Rev.},
month = {jan},
pages = {29–45},
numpages = {17},
keywords = {architectures, survey, SOA, systematic mapping study, microservices, self-contained systems}
}

@inproceedings{10.1145/3502181.3531460,
author = {Hossen, Md Rajib and Islam, Mohammad A. and Ahmed, Kishwar},
title = {Practical Efficient Microservice Autoscaling with QoS Assurance},
year = {2022},
isbn = {9781450391993},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502181.3531460},
doi = {10.1145/3502181.3531460},
abstract = {Cloud applications are increasingly moving away from monolithic services to agile microservices-based deployments. However, efficient resource management for microservices poses a significant hurdle due to the sheer number of loosely coupled and interacting components. The interdependencies between various microservices make existing cloud resource autoscaling techniques ineffective. Meanwhile, machine learning (ML) based approaches that try to capture the complex relationships in microservices require extensive training data and cause intentional SLO violations. Moreover, these ML-heavy approaches are slow in adapting to dynamically changing microservice operating environments. In this paper, we propose PEMA (Practical Efficient Microservice Autoscaling), a lightweight microservice resource manager that finds efficient resource allocation through opportunistic resource reduction. PEMA's lightweight design enables novel workload-aware and adaptive resource management. Using three prototype microservice implementations, we show that PEMA can find efficient resource allocation and save up to 33% resources compared to the commercial rule-based resource allocations.},
booktitle = {Proceedings of the 31st International Symposium on High-Performance Parallel and Distributed Computing},
pages = {240–252},
numpages = {13},
keywords = {resource management, quality of service, microservices, cloud computing, autoscaling},
location = {Minneapolis, MN, USA},
series = {HPDC '22}
}

@inproceedings{10.1109/CESSER-IP.2019.00012,
author = {Carvalho, Luiz and Garcia, Alessandro and Assun\c{c}\~{a}o, Wesley K. G. and de Mello, Rafael and de Lima, Maria Julia},
title = {Analysis of the Criteria Adopted in Industry to Extract Microservices},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CESSER-IP.2019.00012},
doi = {10.1109/CESSER-IP.2019.00012},
abstract = {A microservice architecture is expected to provide a better modularization and management of small and autonomous services. Other expected benefits include increased availability and time to market. There is a growing interest of both industry and academia on streamlining the migration of existing systems to a microservice architecture. However, the success of this migration is largely dependent on the use of appropriate criteria for extracting microservices from a code base. Recent studies indicate the selection and decomposition of microservices represent the main challenge along the migration. Academic techniques tend to support the extraction of microservices with either one or two conventional criteria, namely coupling and cohesion. There is limited knowledge on the criteria actually considered as useful by practitioners. Thus, we have performed an exploratory online survey with 15 specialists experienced on migrating systems to a microservices architecture. In particular, we question the relative usefulness of seven possible criteria for supporting decision-making along microservice extraction. The participants were also questioned about tools they have used, their limitations, and whether the decisions on extracted microservices were considered unsuccessful. Overall, the survey results suggest academic techniques do not totally satisfy the needs of practitioners. Practitioners often need to consider simultaneously at least four dominant criteria as well as their trade-offs to support their decisions. Most practitioners consider existing tooling support insufficient or even irrelevant to support their microservice extraction decisions.},
booktitle = {Proceedings of the Joint 7th International Workshop on Conducting Empirical Studies in Industry and 6th International Workshop on Software Engineering Research and Industrial Practice},
pages = {22–29},
numpages = {8},
keywords = {survey, microservices, reengineering, industry, extraction},
location = {Montreal, Quebec, Canada},
series = {CESSER-IP '19}
}

@inproceedings{10.1145/3344948.3344991,
author = {Santos, Nuno and Salgado, Carlos E. and Morais, Francisco and Melo, M\'{o}nica and Silva, Sara and Martins, Raquel and Pereira, Marco and Rodrigues, Helena and Machado, Ricardo J. and Ferreira, Nuno and Pereira, Manuel},
title = {A Logical Architecture Design Method for Microservices Architectures},
year = {2019},
isbn = {9781450371421},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344948.3344991},
doi = {10.1145/3344948.3344991},
abstract = {The use of microservices architectures has been widely adopted in software development, especially for cloud-based solutions. Developing such solutions faces several challenges beyond typical architecture and service design concerns, including service exposition (API), inter-service communication, and infrastructure deployment, among others. Although model-driven approaches allow abstracting microservices behavior from the business domain, there is a lack of proper methods for addressing the referred challenges. In this paper, the elicitation of microservices, their identification uses using functionally decomposed UML use cases as input within a logical architecture derivation method, namely an adapted version of the Four Step Rule Set (4SRS), using SoaML diagrams, that responds to microservices specific characteristics. We demonstrate the approach using a scenario within a live industrial project.},
booktitle = {Proceedings of the 13th European Conference on Software Architecture - Volume 2},
pages = {145–151},
numpages = {7},
keywords = {UML, microservices, SoaML, logical architectures, service participants, decomposition},
location = {Paris, France},
series = {ECSA '19}
}

@inproceedings{10.1145/3241403.3241440,
author = {Mishra, Mayank and Kunde, Shruti and Nambiar, Manoj},
title = {Cracking the Monolith: Challenges in Data Transitioning to Cloud Native Architectures},
year = {2018},
isbn = {9781450364836},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241403.3241440},
doi = {10.1145/3241403.3241440},
abstract = {Application modernization is the process of transforming a monolithic application to cloud native. This involves gradually building a new application consisting of microservices, and running it in conjunction with the monolithic application. Over a period of time, the functionality of the monolith shrinks drastically or transforms into yet another microservice. Solution architects are often faced with the task of ensuring this smooth transition - from monolith to cloud native. For large and complex monoliths, this task is non-trivial as the code base grows non-linearly over a period of time, thus posing multiple challenges.The complexity of a monolith is moved to the interconnections between microservices, leading to multiple points of failure. This also has implications on scalability and the need for replication. One of the biggest challenges is to maintain data consistency and statefulness across the services and enable a smooth transition of the data. Tracing performance issues also becomes complex as a single transaction can encompass multiple service calls, along with increased operational complexity due to increased demand of managing services.In this paper, we envision an automated approach that will enable a smooth transition from the monolith to microservices, thus alleviating the complexities faced by a solution architect. Our system leverages the existing data schema along with details obtained using profiling tools (in production or development environment), to understand the data flow and access patterns and use this information to to propose functional modules (microservices).},
booktitle = {Proceedings of the 12th European Conference on Software Architecture: Companion Proceedings},
articleno = {35},
numpages = {4},
keywords = {monolith, SLA, cloud native, architecture},
location = {Madrid, Spain},
series = {ECSA '18}
}

@inproceedings{10.1145/3011141.3011179,
author = {de Camargo, Andr\'{e} and Salvadori, Ivan and Mello, Ronaldo dos Santos and Siqueira, Frank},
title = {An Architecture to Automate Performance Tests on Microservices},
year = {2016},
isbn = {9781450348072},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3011141.3011179},
doi = {10.1145/3011141.3011179},
abstract = {The microservices architecture provides a new approach to develop applications. As opposed to monolithic applications, in which the application comprises a single software artifact, an application based on the microservices architecture is composed by a set of services, each one designed to perform a single and well-defined task. These services allow the development team to decouple several parts of the application using different frameworks, languages and hardware for each part of the system. One of the drawbacks for adopting the microservices architecture to develop applications is testability. In a single application test boundaries can be more easily established and tend to be more stable as the application evolves, while with microservices we can have a set of hundreds of services that operate together and are prone to change more rapidly. Each one of these services needs to be tested and updated as the service changes. In addition, the different characteristics of these services such as languages, frameworks or the used infrastructure have to be considered in the testing phase. Performance tests are applied to assure that a particular software complies with a set of non-functional requirements such as throughput and response time. These metrics are important to ensure that business constraints are respected and to help finding performance bottlenecks. In this paper, we present a new approach to allow the performance tests to be executed in an automated way, with each microservice providing a test specification that is used to perform tests. Along with the architecture, we also provide a framework that implements some key concepts of this architecture. This framework is available as an open source project1.},
booktitle = {Proceedings of the 18th International Conference on Information Integration and Web-Based Applications and Services},
pages = {422–429},
numpages = {8},
keywords = {performance test, microservices, test automation},
location = {Singapore, Singapore},
series = {iiWAS '16}
}

@inproceedings{10.1145/3195528.3195535,
author = {Jos\'{e}lyne, Munezero Immacul\'{e}e and Tuheirwe-Mukasa, Doreen and Kanagwa, Benjamin and Balikuddembe, Joseph},
title = {Partitioning Microservices: A Domain Engineering Approach},
year = {2018},
isbn = {9781450357197},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3195528.3195535},
doi = {10.1145/3195528.3195535},
abstract = {Architecture styles in the software world continue to evolve driven by the need to present easier and more appealing ways of designing and building software systems to meet stakeholder needs. One of the popular trends at the moment is microservices. Microservice architecture is gaining the market of software development architecture due to its capability to scale. It separates independent small services of a system to perform one business capability at a time. However, determining the right size of business capability that could be called a microservice is still a challenge. Current practices of partitioning microservice rely on personal practice within industry which is prone to bias by practitioners. Based on the ambiguity of determining the optimum size of a microservice, in this paper, we propose a conceptual methodology to partition a microservice based on domain engineering technique. Domain engineering identifies the information needed by a microservice, services needed for microservice functionality and provides description for workflows in the service. We demonstrate the usage of this methodology on the weather information dissemination domain as a confirmatory case study. We show how to split the weather information dissemination system sub-domain into different microservices that accomplish the weather information dissemination business capability.},
booktitle = {Proceedings of the 2018 International Conference on Software Engineering in Africa},
pages = {43–49},
numpages = {7},
keywords = {DDD pattern, sizing microservice, weather domain},
location = {Gothenburg, Sweden},
series = {SEiA '18}
}

@inproceedings{10.1145/3344948.3344952,
author = {Wang, Yuwei},
title = {Towards Service Discovery and Autonomic Version Management in Self-Healing Microservices Architecture},
year = {2019},
isbn = {9781450371421},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344948.3344952},
doi = {10.1145/3344948.3344952},
abstract = {Microservices architectures (MSAs) contribute to building complex distributed systems by decomposing monolithic systems into a set of independent microservices. This makes it possible to design, develop and deploy scalable and flexible systems. However, various unexpected changes could happen during execution, such as a service upgrade, a sudden increase of traffic, or an infrastructural failure. In this cases, how to react autonomously to these changes without outages becomes a challenge to consider. A PhD project has been launched to propose a self-healing microservices architecture, which can adapt dynamically to inside and outside changes without human intervention. In this paper, we present the first results of a systematic state of the art in the field of self-healing MSA systems. As an entry point of our research, we focus on self-healing triggered by upgrade changes. The initial contribution is a new component of a version manager in our self-healing MSA solution, in relation with service discovery elements. This approach can provide an autonomic version management on both the application level and the system level, and helps to control services upgrading changes. We plan to validate our proposition in a company project use case by deploying it in an emulated production environment, and applying a chaos engineering approach.},
booktitle = {Proceedings of the 13th European Conference on Software Architecture - Volume 2},
pages = {63–66},
numpages = {4},
keywords = {self-healing, service discovery, software architecture, version management, industrialization, microservices},
location = {Paris, France},
series = {ECSA '19}
}

@inproceedings{10.1145/3282308.3282313,
author = {Li, Fei and Fr\"{o}hlich, Joachim and Schall, Daniel and Lachenmayr, Markus and St\"{u}ckj\"{u}rgen, Christoph and Meixner, Sebastian and Buschmann, Frank},
title = {Microservice Patterns for the Life Cycle of Industrial Edge Software},
year = {2018},
isbn = {9781450363877},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3282308.3282313},
doi = {10.1145/3282308.3282313},
abstract = {The Industry 4.0 initiative is pushing traditional production systems and methodologies through fundamental changes. In traditional industries such as manufacturing, utilities, and infrastructure monitoring, customers are demanding more flexibility and greater efficiency. The software that oversees these systems addresses these demands by adopting novel architectural styles and patterns. Industrial edge systems are gaining momentum because they offer superior data security and better response time to field operations. Microservice style has been adopted from cloud services because it improves development efficiency. This paper presents architecture patterns that cover four phases in the life cycle of industrial software. In the deployment phase, DOWNSHIFTING moves microservices from the cloud to the edge. During runtime, MONITORING CONNECTORS oversee properties of microservices at the edge, such as performance and resource usage. When adaptation is needed, EDGE-TO-CLOUD LOAD BALANCING leverages cloud resources to fulfill performance expectations. When a new microservice version is deployed, TEST PROBE enables testing the microservice at the edge without interfering with ongoing operations.This paper is intended for architects, developers and practitioners who are involved in delivering software in industrial edge environments.},
booktitle = {Proceedings of the 23rd European Conference on Pattern Languages of Programs},
articleno = {4},
numpages = {11},
keywords = {Embedded software, Industry 4.0, Microservices, Edge Computing, Design patterns},
location = {Irsee, Germany},
series = {EuroPLoP '18}
}

@inproceedings{10.1145/3151759.3151840,
author = {Higashino, Masayuki},
title = {Application of Mobile Agent Technology to Microservice Architecture},
year = {2017},
isbn = {9781450352994},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3151759.3151840},
doi = {10.1145/3151759.3151840},
abstract = {A mobile agent is an autonomous software module which can migrate between different computers via computer networks. A paradigm and a behavior of mobile agents are designed like humans and whose society such as collaboration and competition among people. This feature of mobile agents is assumed to contribute to the ease of management for microservices because microservices are hard to be managed these life cycle and relations among them as a distributed dynamic software module. The problem area of microservice architecture partly overlaps with mobile agent technology. This paper discusses an application of mobile agent technology to microservice architecture and shows requirements for designing a mobile agent framework to manage microservices on the web.},
booktitle = {Proceedings of the 19th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {526–529},
numpages = {4},
keywords = {mobile agent, microservice, web service},
location = {Salzburg, Austria},
series = {iiWAS '17}
}

@inproceedings{10.1145/3524481.3527233,
author = {Camilli, Matteo and Guerriero, Antonio and Janes, Andrea and Russo, Barbara and Russo, Stefano},
title = {Microservices Integrated Performance and Reliability Testing},
year = {2022},
isbn = {9781450392860},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524481.3527233},
doi = {10.1145/3524481.3527233},
abstract = {Continuous quality assurance for extra-functional properties of modern software systems is today a big challenge as their complexity is constantly increasing to satisfy market demands. This is the case of microservice systems. They provide high control on the scale of operation by means of fine-grained service decomposition, but this demands careful consideration of the relations between performance of individual microservices and service failures.In this work, we propose MIPaRT, a novel methodology, and platform to automatically test microservice operations for performance and reliability in combination. The proposed platform can be integrated into a DevOps cycle to support continuous testing and monitoring by the automatic (1) generation and execution of performance-reliability ex-vivo testing sessions, (2) collection of monitoring data, (3) computation of performance and reliability metrics, and (4) integrated visualization of the results.We apply our approach by operating the platform on an open source benchmark. Results show that our integrated approach can provide additional insights into the performance and reliability behaviour of microservices as well as their mutual relationships.},
booktitle = {Proceedings of the 3rd ACM/IEEE International Conference on Automation of Software Test},
pages = {29–39},
numpages = {11},
keywords = {microservices systems, performance testing, reliability testing},
location = {Pittsburgh, Pennsylvania},
series = {AST '22}
}

@inproceedings{10.1109/ECASE.2019.00013,
author = {Yuan, Eric},
title = {Architecture Interoperability and Repeatability with Microservices: An Industry Perspective},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ECASE.2019.00013},
doi = {10.1109/ECASE.2019.00013},
abstract = {Microservices, along with supporting technologies such as containers, have become a prevalent architecture approach for today's software systems, especially in enterprise environments. They represent the latest evolutionary step in the decades-old journey towards service- and component-based software architectures. Along with virtualization technologies, microservices have enabled the loose-coupling of both service interfaces (message passing) and service integration (form and fit). This paper attempts to explore the impact of microservices on software architecture interoperability and repeatability, based on our experiences in developing two microservice-based systems. Our central thesis is that, if we view software architecture as a set of principal design decisions, the microservices approach enable us to more elegantly separate these decisions from non-architectural, domain-specific ones, and thus make these decisions more interoperable, reusable, and repeatable across disparate problem domains. We therefore propose that a microservices based reference architecture (RA) and reference implementation (RI) be created for the community-wide infrastructure for software engineering and software architecture research, along with a set of detailed considerations.},
booktitle = {Proceedings of the 2nd International Workshop on Establishing a Community-Wide Infrastructure for Architecture-Based Software Engineering},
pages = {26–33},
numpages = {8},
keywords = {cloud computing, DevOps, software architecture, microservice},
location = {Montreal, Quebec, Canada},
series = {ECASE '19}
}

@inproceedings{10.1145/3040565.3040569,
author = {Unterberger, Florian and Singer, Robert},
title = {Actor Based Business Process Automation via Intelligent Business Objects},
year = {2017},
isbn = {9781450348621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3040565.3040569},
doi = {10.1145/3040565.3040569},
abstract = {Business processes are a vital part of every company. But, executing business processes with conventional business process engines is complex, and so people rely on services such as email, where processes naturally emerge from the users' interactions. Instead of relying on the typical centralized and monolithic architecture of business process engines, this work shows, that a decentralized approach utilizing the Actor Model and Intelligent Business Objects (IBOs) is also feasible. Using the Actor Model, the process engine is distributed on several smaller independent actors, which enables a high flexibility. But instead of needing to store process configurations on actors to execute a process, the process configuration is stored in an Intelligent Business Object, which is passed around by the actors for each process instance. As a proof-of-concept, a prototype has been developed.},
booktitle = {Proceedings of the 9th Conference on Subject-Oriented Business Process Management},
articleno = {1},
numpages = {5},
keywords = {Execution, Erlang, Workflow, BPM, Business Process},
location = {Darmstadt, Germany},
series = {S-BPM ONE '17}
}

@inproceedings{10.1145/3338906.3338961,
author = {Zhou, Xiang and Peng, Xin and Xie, Tao and Sun, Jun and Ji, Chao and Liu, Dewei and Xiang, Qilin and He, Chuan},
title = {Latent Error Prediction and Fault Localization for Microservice Applications by Learning from System Trace Logs},
year = {2019},
isbn = {9781450355728},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338906.3338961},
doi = {10.1145/3338906.3338961},
abstract = {In the production environment, a large part of microservice failures are related to the complex and dynamic interactions and runtime environments, such as those related to multiple instances, environmental configurations, and asynchronous interactions of microservices. Due to the complexity and dynamism of these failures, it is often hard to reproduce and diagnose them in testing environments. It is desirable yet still challenging that these failures can be detected and the faults can be located at runtime of the production environment to allow developers to resolve them efficiently. To address this challenge, in this paper, we propose MEPFL, an approach of latent error prediction and fault localization for microservice applications by learning from system trace logs. Based on a set of features defined on the system trace logs, MEPFL trains prediction models at both the trace level and the microservice level using the system trace logs collected from automatic executions of the target application and its faulty versions produced by fault injection. The prediction models thus can be used in the production environment to predict latent errors, faulty microservices, and fault types for trace instances captured at runtime. We implement MEPFL based on the infrastructure systems of container orchestrator and service mesh, and conduct a series of experimental studies with two opensource microservice applications (one of them being the largest open-source microservice application to our best knowledge). The results indicate that MEPFL can achieve high accuracy in intraapplication prediction of latent errors, faulty microservices, and fault types, and outperforms a state-of-the-art approach of failure diagnosis for distributed systems. The results also show that MEPFL can effectively predict latent errors caused by real-world fault cases.},
booktitle = {Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {683–694},
numpages = {12},
keywords = {machine learning, fault localization, microservices, tracing, debugging, error prediction},
location = {Tallinn, Estonia},
series = {ESEC/FSE 2019}
}

@inproceedings{10.1145/3241403.3241429,
author = {M\'{a}rquez, Gast\'{o}n and Villegas, M\'{o}nica M. and Astudillo, Hern\'{a}n},
title = {A Pattern Language for Scalable Microservices-Based Systems},
year = {2018},
isbn = {9781450364836},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241403.3241429},
doi = {10.1145/3241403.3241429},
abstract = {Microservices are an emerging distributed architectural style to build highly scalable Web systems. Many design patterns have been proposed for microservices, and some of them for scalability, but this growing corpus has not yet been organized as a coherent, easy-to-use pattern language. This article builds on previous work that identified existing patterns for microservice-based systems, selects those related to scalability, and organizes them in three categories (load-balancing, decomposition, and grouping) corresponding to the three well-known scalability dimensions (also called X-, Y- and Z-axis). The pattern language use is illustrated with a case study of documenting the architecture of a real-time bus position capturing application. This principled pattern language yields a solid basis for organizing current and future patterns that address scalability of microservice-based systems.},
booktitle = {Proceedings of the 12th European Conference on Software Architecture: Companion Proceedings},
articleno = {24},
numpages = {7},
keywords = {microservices, software architecture, scalability, pattern language},
location = {Madrid, Spain},
series = {ECSA '18}
}

@inproceedings{10.1145/3403746.3403915,
author = {Wang, YingQiang and Han, Wei and Nian, ZhaoHua},
title = {Design of Satellite Ground Management System Based on Microservices},
year = {2020},
isbn = {9781450375528},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3403746.3403915},
doi = {10.1145/3403746.3403915},
abstract = {With the rapid development and construction of domestic remote sensing satellite ground systems, the traditional architecture is no longer able to meet the needs of future development. At the same time, technicians are also spending a lot of time when upgrading and maintaining. Widespread application of microservice architecture in recent years has provided a technological approach that can meet the requirements of rapid development, iterative upgrades and flexible deployment. This paper designs a satellite ground management system based on the microservice architecture, focusing on the overall architecture design and application system design based on this new architecture. The results show that the satellite ground management system based on the microservice architecture can have good availability and reliability, reducing the coupling degree of the system, can also meet the new business requirements of high availability, high concurrency, high fault tolerance, and good scalability.},
booktitle = {Proceedings of the 2020 3rd International Conference on Computer Science and Software Engineering},
pages = {119–123},
numpages = {5},
keywords = {Docker, Satellite ground management system, Microservice architecture},
location = {Beijing, China},
series = {CSSE 2020}
}

@inproceedings{10.1145/3538969.3538986,
author = {Billawa, Priyanka and Bambhore Tukaram, Anusha and D\'{\i}az Ferreyra, Nicol\'{a}s E. and Stegh\"{o}fer, Jan-Philipp and Scandariato, Riccardo and Simhandl, Georg},
title = {SoK: Security of Microservice Applications: A Practitioners’ Perspective on Challenges and Best Practices},
year = {2022},
isbn = {9781450396707},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3538969.3538986},
doi = {10.1145/3538969.3538986},
abstract = {Cloud-based application deployment is becoming increasingly popular among businesses, thanks to the emergence of microservices. However, securing such architectures is a challenging task since traditional security concepts cannot be directly applied to microservice architectures due to their distributed nature. The situation is exacerbated by the scattered nature of guidelines and best practices advocated by practitioners and organizations in this field. In this research paper we aim to shay light over the current microservice security discussions hidden within Grey Literature (GL) sources. Particularly, we identify the challenges that arise when securing microservice architectures, as well as solutions recommended by practitioners to address these issues. For this, we conducted a systematic GL study on the challenges and best practices of microservice security present in the Internet with the goal of capturing relevant discussions in blogs, white papers, and standards. We collected 312 GL sources from which 57 were rigorously classified and analyzed. This analysis on the one hand validated past academic literature studies in the area of microservice security, but it also identified improvements to existing methodologies pointing towards future research directions.},
booktitle = {Proceedings of the 17th International Conference on Availability, Reliability and Security},
articleno = {9},
numpages = {10},
keywords = {challenges, security, grey literature, microservices, best practices},
location = {Vienna, Austria},
series = {ARES '22}
}

@inproceedings{10.1145/3147234.3148092,
author = {Martins, Lucas M. C. e and Filho, Francisco L. de Caldas and J\'{u}nior, Rafael T. de Sousa and Giozza, William F. and da Costa, Jo\~{a}o Paulo C.L.},
title = {Increasing the Dependability of IoT Middleware with Cloud Computing and Microservices},
year = {2017},
isbn = {9781450351959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3147234.3148092},
doi = {10.1145/3147234.3148092},
abstract = {Internet of Things (IoT) has left the experimental field and is reaching the final consumer in areas such as residential automation, health, transportation and government support. Since these are applications intrinsically linked to the physical world, they require more attention in aspects related to their dependability. Focusing on its availability and reliability, we present a proposal to apply the Microservices architectural pattern in an IoT middleware with web services in the monolithic architecture. We describe the reengineering that must be done in this middleware and, finally, we analyze the advantages and disadvantages of this approach, highlighting the availability improvement, optimization of the infrastructure resources, the ease of maintenance and evolution, as well as the inclination to the elasticity that the architecture allows.},
booktitle = {Companion Proceedings of The10th International Conference on Utility and Cloud Computing},
pages = {203–208},
numpages = {6},
keywords = {middleware, dependability, microservices, soa., internet of things (iot), cloud computing},
location = {Austin, Texas, USA},
series = {UCC '17 Companion}
}

@inproceedings{10.1145/3147213.3147229,
author = {Torkura, Kennedy A. and Sukmana, Muhammad I.H. and Meinel, Christoph},
title = {Integrating Continuous Security Assessments in Microservices and Cloud Native Applications},
year = {2017},
isbn = {9781450351492},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3147213.3147229},
doi = {10.1145/3147213.3147229},
abstract = {Cloud Native Applications (CNA) consists of multiple collaborating microservice instances working together towards common goals. These microservices leverage the underlying cloud infrastructure to enable several properties such as scalability and resiliency. CNA are complex distributed applications, vulnerable to several security issues affecting microservices and traditional cloud-based applications. For example, each microservice instance could be developed with different technologies e.g. programming languages and databases. This diversity of technologies increases the chances for security vulnerabilities in microservices. Moreover, the fast-paced development cycles of (CNA) increases the probability of insufficient security tests in the development pipelines, and consequent deployment of vulnerable microservices. Furthermore, cloud native environments are ephemeral, microservices are dynamically launched and de-registered, this factor creates a discoverability challenge for traditional security assessment techniques. Hence, security assessments in such environments require new approaches which are specifically adapted and integrated to CNA. In fact, such techniques are to be cloud native i.e. well integrated into the cloud's fabric. In this paper, we tackle the above-mentioned challenges through the introduction of a novel Security Control concept - the Security Gateway. To support the Security Gateway concept, two other concepts are proposed: dynamic document store and security health endpoints. We have implemented these concepts using cloud-native design patterns and integrated them into the CNA workflow. Our experimental evaluations validate the efficiency of our proposals, the time overhead due to the security gateway is minimal and the vulnerability detection rate surpasses that of traditional security assessment approaches. Our proposal can therefore be employed to secure CNA and microservice-based implementations.},
booktitle = {Proceedings of The10th International Conference on Utility and Cloud Computing},
pages = {171–180},
numpages = {10},
keywords = {security assessment, cloud native applications, vulnerability detection, microservices},
location = {Austin, Texas, USA},
series = {UCC '17}
}

@inproceedings{10.1145/3147234.3148093,
author = {Shadija, Dharmendra and Rezai, Mo and Hill, Richard},
title = {Microservices: Granularity vs. Performance},
year = {2017},
isbn = {9781450351959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3147234.3148093},
doi = {10.1145/3147234.3148093},
abstract = {Microservice Architectures (MA) have the potential to increase the agility of software development. In an era where businesses require software applications to evolve to support emerging software requirements, particularly for Internet of Things (IoT) applications, we examine the issue of microservice granularity and explore its effect upon application latency. Two approaches to microservice deployment are simulated; the first with microservices in a single container, and the second with microservices partitioned across separate containers. We observed a negligible increase in service latency for the multiple container deployment over a single container.},
booktitle = {Companion Proceedings of The10th International Conference on Utility and Cloud Computing},
pages = {215–220},
numpages = {6},
keywords = {software engineering, microservice architecture, performance, internet of things},
location = {Austin, Texas, USA},
series = {UCC '17 Companion}
}

@inproceedings{10.1109/MSR.2019.00051,
author = {Bandeira, Alan and Medeiros, Carlos Alberto and Paixao, Matheus and Maia, Paulo Henrique},
title = {We Need to Talk about Microservices: An Analysis from the Discussions on StackOverflow},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2019.00051},
doi = {10.1109/MSR.2019.00051},
abstract = {Microservices are a new and rapidly growing architectural model aimed at developing highly scalable software solutions based on independently deployable and evolvable components. Due to its novelty, microservice-related discussions are increasing in Q&amp;A websites, such as StackOverflow (SO). In order to understand what is being discussed by the microservice community, this work has applied mining techniques and topic modelling to a manually-curated dataset of 1,043 microservice-related posts from StackOverflow. As a result, we found that 13.68% of microservice technical posts on SO discuss a single technology: Netflix Eureka. Moreover, buzzwords in the microservice ecosystem, e.g., blue/green deployment, were not identified as relevant subjects of discussion on SO. Finally, we show how a high discussion rate on SO may not reflect the popularity of a certain subject within the microservice community.},
booktitle = {Proceedings of the 16th International Conference on Mining Software Repositories},
pages = {255–259},
numpages = {5},
keywords = {topic modelling, microservice, StackOverflow},
location = {Montreal, Quebec, Canada},
series = {MSR '19}
}

@inproceedings{10.1145/3524860.3539807,
author = {Zuckmantel, Tilman and Zhou, Yongluan and D\"{u}dder, Boris and Hildebrandt, Thomas},
title = {Event-Based Data-Centric Semantics for Consistent Data Management in Microservices},
year = {2022},
isbn = {9781450393089},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3524860.3539807},
doi = {10.1145/3524860.3539807},
abstract = {There is an emerging trend of migrating traditional service-oriented monolithic systems to the microservice architecture. However, this involves the separation of data previously contained in a single database into several databases tailored to specific domains. Developers are thus faced with a new challenge: features such as transaction processing, coordination, and consistency preservation, which were previously supported by the central database, must now be implemented in a decentralized, asynchronously communicating, distributed structure. Numerous prior studies show that these challenges are not met satisfactorily, resulting in inconsistent system states with potentially detrimental consequences. Therefore, we propose to design a coordination service that relies on clear event-based and data-centric formal semantics for microservices specifying the interaction of cross-microservice transactions with their respective databases. Furthermore, we provide a formalization of consistency properties and outline how they can be used to support dynamic monitoring as well as enforcement of consistency properties, thereby providing robust microservice systems. The envisioned architecture can significantly alleviate the developers' burden of implementing complicated distributed algorithms to maintain consistency across decentralized databases.},
booktitle = {Proceedings of the 16th ACM International Conference on Distributed and Event-Based Systems},
pages = {97–102},
numpages = {6},
location = {Copenhagen, Denmark},
series = {DEBS '22}
}

@inproceedings{10.1145/3387906.3388625,
author = {Pigazzini, Ilaria and Fontana, Francesca Arcelli and Lenarduzzi, Valentina and Taibi, Davide},
title = {Towards Microservice Smells Detection},
year = {2020},
isbn = {9781450379601},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387906.3388625},
doi = {10.1145/3387906.3388625},
abstract = {With the adoption of microservices architectural styles, practitioners started noticing increasing pitfalls in managing and maintaining such architectures, with the risk of introducing architectural debt. Previous studies identified different microservice smells (also named anti-patterns) that harm microservices architectures. However, according to our knowledge, there are no tools that can automatically detect microservice smells, so their identification is left to the experience of the developer. In this paper, we extend an existing tool developed for the detection of architectural smells to explore microservices architecture through the detection of three microservice smells: Cyclic Dependencies, Hard-Coded Endpoints, and Shared Persistence. We detected the smells on five open-source projects implemented with microservices and manually validated the precision of the detection results. This work aims to open new perspectives on facing and studying architectural debt in the field of microservices architectures.},
booktitle = {Proceedings of the 3rd International Conference on Technical Debt},
pages = {92–97},
numpages = {6},
keywords = {anti-patterns, microservice bad smells detection, microservices},
location = {Seoul, Republic of Korea},
series = {TechDebt '20}
}

@inproceedings{10.1145/3129676.3129682,
author = {Cerny, Tomas and Donahoo, Michael J. and Pechanec, Jiri},
title = {Disambiguation and Comparison of SOA, Microservices and Self-Contained Systems},
year = {2017},
isbn = {9781450350273},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3129676.3129682},
doi = {10.1145/3129676.3129682},
abstract = {There is an industrial shift from Service-Oriented Architectures (SOA) into Microservices; however, a quick review of online resources on these topics reveals a range of different understandings of these two architectures. Individuals often mix terms, grant false advantages or expect different quality attributes and properties. The purpose of this paper is to provide readers a solid understanding of the differences between these two architectures and their features. We provide both research and industry perspectives to point out strengths and weaknesses of both architectural directions, and we point out many shortcomings in both approaches that are not addressed by the architecture. Finally, based on this we propose challenges for future research.},
booktitle = {Proceedings of the International Conference on Research in Adaptive and Convergent Systems},
pages = {228–235},
numpages = {8},
keywords = {Self-contained Systems, Architectures, Microservices, SOA},
location = {Krakow, Poland},
series = {RACS '17}
}

@inproceedings{10.1145/3463274.3463337,
author = {Waseem, Muhammad and Liang, Peng and Shahin, Mojtaba and Ahmad, Aakash and Nassab, Ali Rezaei},
title = {On the Nature of Issues in Five Open Source Microservices Systems: An Empirical Study},
year = {2021},
isbn = {9781450390538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3463274.3463337},
doi = {10.1145/3463274.3463337},
abstract = {Due to its enormous benefits, the research and industry communities have shown an increasing interest in the Microservices Architecture (MSA) style over the last few years. Despite this, there is a limited evidence-based and thorough understanding of the types of issues (e.g., faults, errors, failures, mistakes) faced by microservices system developers and causes that trigger the issues. Such evidence-based understanding of issues and causes is vital for long-term, impactful, and quality research and practice in the MSA style. To that end, we conducted an empirical study on 1,345 issue discussions extracted from five open source microservices systems hosted on GitHub. Our analysis led to the first of its kind taxonomy of the types of issues in open source microservices systems, informing that the problems originating from Technical debt (321, 23.86%), Build (145, 10.78%), Security (137, 10.18%), and Service execution and communication (119, 8.84%) are prominent. We identified that “General programming errors”, “Poor security management”, “Invalid configuration and communication”, and “Legacy versions, compatibility and dependency” are the predominant causes for the leading four issue categories. Study results streamline a taxonomy of issues, their mapping with underlying causes, and present empirical findings that could facilitate research and development on emerging and next-generation microservices systems.},
booktitle = {Evaluation and Assessment in Software Engineering},
pages = {201–210},
numpages = {10},
keywords = {Microservice, Open Source Software, Issue, Microservices Architecture, Empirical Study},
location = {Trondheim, Norway},
series = {EASE 2021}
}

@inproceedings{10.1145/3106195.3106224,
author = {Tizzei, Leonardo P. and Nery, Marcelo and Segura, Vin\'{\i}cius C. V. B. and Cerqueira, Renato F. G.},
title = {Using Microservices and Software Product Line Engineering to Support Reuse of Evolving Multi-Tenant SaaS},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106224},
doi = {10.1145/3106195.3106224},
abstract = {In order to achieve economies of scale, a Software as a Service (SaaS) should be configurable, multi-tenant efficient, and scalable. But building SaaS with these characteristics comes at a price of having more complex services. Some works in the literature integrate software product line engineering and service-oriented architecture to tackle the complexity of building multi-tenant SaaS. Most of these works focused on centralized approaches that rely on middleware or platforms, but they do not investigate the use of decentralized architectural style. Microservices architecture is an architectural style that relies on small, decentralized, and autonomous services that work together. Thus, this paper investigates the integrated use of microservices architecture and software produt line techniques to develop multi-tenant SaaS. We conducted an empirical study that analyzes the behavior of software reuse during the evolution of a multi-tenant SaaS. This empirical study showed an average software reuse of 62% of lines of code among tenants. We also provide lessons we learned during the the re-engineering and maintenance of such multi-tenant SaaS.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {205–214},
numpages = {10},
keywords = {Microservices, Service-oriented Architectures, Multi-tenancy, Software Reuse, Software Evolution},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3018896.3018961,
author = {Lehmann, Martin and Sandnes, Frode Eika},
title = {A Framework for Evaluating Continuous Microservice Delivery Strategies},
year = {2017},
isbn = {9781450347747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3018896.3018961},
doi = {10.1145/3018896.3018961},
abstract = {The emergence of service-oriented computing, and in particular microservice architecture, has introduced a new layer of complexity to the already challenging task of continuously delivering changes to the end users. Cloud computing has turned scalable hardware into a commodity, but also imposes some requirements on the software development process. Yet, the literature mainly focuses on quantifiable metrics such as number of manual steps and lines of code required to make a change. The industry, on the other hand, appears to focus more on qualitative metrics such as increasing the productivity of their developers. These are common goals, but must be measured using different approaches. Therefore, based on interviews of industry stakeholders a framework for evaluating and comparing approaches to continuous microservice delivery is proposed. We show that it is possible to efficiently evaluate and compare strategies for continuously delivering microservices.},
booktitle = {Proceedings of the Second International Conference on Internet of Things, Data and Cloud Computing},
articleno = {64},
numpages = {9},
keywords = {microservices, evaluation framework, continuous deployment, microservice architectures, deployment strategy, cloud computing},
location = {Cambridge, United Kingdom},
series = {ICC '17}
}

@inproceedings{10.1145/3175731.3176176,
author = {Cuesta, Carlos E. and Navarro, Elena and Zdun, Uwe},
title = {Synergies of System-of-Systems and Microservices Architectures},
year = {2016},
isbn = {9781450363990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3175731.3176176},
doi = {10.1145/3175731.3176176},
abstract = {Systems-of-Systems (SoS) are being widely embraced by both practitioners and researchers. They share properties such as distribution, evolutionary development (i.e., openness), operational and managerial independence, and emergent behavior. Those properties imply that any element (system) in an SoS is able to operate independently. Similarly, microservices are suggested as a system architecture with a strong emphasis on independence, as containers provide the required degree of isolation, and their infrastructure automation frameworks provide the means to deploy them as needed. In a microservices architecture, even data is independently managed; every service maintains its own datastore, and transaction-less interaction is emphasized. Our hypothesis in this work is that while the two approaches have been treated separately in the literature so far, they share many common characteristics, and it would be fruitful to investigate their synergies. In this paper, we analyze to what extent microservices architectures can be understood as a kind of system-of-systems, explaining some of the success of the microservices approach a consequence of their SoS properties. In addition, the best practices proposed for microservices can enable a conscious, controlled, and manageable introduction of SoS concepts into system architectures, if they are needed.},
booktitle = {Proceedings of the International Colloquium on Software-Intensive Systems-of-Systems at 10th European Conference on Software Architecture},
articleno = {1},
numpages = {7},
keywords = {microservices architecture, emergent behavior, scalability, IoT, container, self-adaptation, system-of-systems},
location = {Copenhagen, Denmark},
series = {SiSoS@ECSA '16}
}

@inproceedings{10.1145/3238147.3240730,
author = {Zhou, Xiang and Peng, Xin and Xie, Tao and Sun, Jun and Li, Wenhai and Ji, Chao and Ding, Dan},
title = {Delta Debugging Microservice Systems},
year = {2018},
isbn = {9781450359375},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3238147.3240730},
doi = {10.1145/3238147.3240730},
abstract = {Debugging microservice systems involves the deployment and manipulation of microservice systems on a containerized environment and faces unique challenges due to the high complexity and dynamism of microservices. To address these challenges, in this paper, we propose a debugging approach for microservice systems based on the delta debugging algorithm, which is to minimize failureinducing deltas of circumstances (e.g., deployment, environmental configurations) for effective debugging. Our approach includes novel techniques for defining, deploying/manipulating, and executing deltas following the idea of delta debugging. In particular, to construct a (failing) circumstance space for delta debugging to minimize, our approach defines a set of dimensions that can affect the execution of microservice systems. Our experimental study on a medium-size microservice benchmark system shows that our approach can effectively identify failure-inducing deltas that help diagnose the root causes.},
booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
pages = {802–807},
numpages = {6},
keywords = {Delta Debugging, Testing, Microservice},
location = {Montpellier, France},
series = {ASE 2018}
}

@inproceedings{10.1145/3517206.3526274,
author = {Lyu, Xiaosu and Cherkasova, Ludmila and Aitken, Robert and Parmer, Gabriel and Wood, Timothy},
title = {Towards Efficient Processing of Latency-Sensitive Serverless DAGs at the Edge},
year = {2022},
isbn = {9781450392532},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3517206.3526274},
doi = {10.1145/3517206.3526274},
abstract = {Many emerging novel applications expect "near real-time" processing and responses, which can not be guaranteed by today's Cloud and would require processing at the Edge. Serverless computing is a particularly promising architecture for edge environments since it offers to improve efficiency by precisely scaling resources to meet application needs. As the edge applications grow more complex and get composed from a subset of simpler functions or microservices, there is a need to support more complicated function topologies which can be represented as directed acyclic graphs (DAGs). However, running DAG functions on a serverless platform poses new challenges related to interconnecting, instantiating, and scheduling function sandboxes. In this paper1, we explore how Sledge, a Wasm-based serverless runtime, can be extended to support DAG functions. Sledge's unique design allows for extremely lightweight sandbox instantiation - a new sandbox can be started for each function invocation in under 30μsec - which mitigates the cold start problems that can be especially detrimental to DAGs. Rather than relying on expensive coordination via shared storage, the enhanced Sledge framework provides a fast memory communication channel to propagate data through the DAG. We consider the DAGs with service level objectives, defined by their execution deadlines. To ensure the DAGs meet their performance requirements, we consider, analyze, and compare two deadline-aware pluggable schedulers (that we implemented in Sledge) on a variety of realistic workloads.},
booktitle = {Proceedings of the 5th International Workshop on Edge Systems, Analytics and Networking},
pages = {49–54},
numpages = {6},
keywords = {WebAssembly, edge computing, serverless, DAGs, SLOs},
location = {Rennes, France},
series = {EdgeSys '22}
}

@inproceedings{10.1145/3357141.3357148,
author = {C\^{a}ndido, Adriano L. and Trinta, Fernando A. M. and Rocha, Lincoln S. and Rego, Paulo A. L. and Mendon\c{c}a, Nabor C. and Garcia, Vinicius C.},
title = {A Microservice Based Architecture to Support Offloading in Mobile Cloud Computing},
year = {2019},
isbn = {9781450376372},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3357141.3357148},
doi = {10.1145/3357141.3357148},
abstract = {Mobile devices are increasingly present in people's daily lives. However, despite the substantial improvement of new generations of smartphones, the amount of information and the complexity of the procedures delegated to these devices still imposes certain restrictions on processing, especially regarding energy consumption. A promise solution to this issue is the technique known as offloading. Over the last few years, several offloading support platforms have been proposed. This work has a particular interest in one of those platforms, called CAOS. Despite its success to perform offloading tasks, CAOS still has problems such as low scalability. In this paper, we report on the refactoring of CAOS into a new microservice-based architecture. Performance and scalability evaluations were performed in both monolithic and microservices versions to show the benefits achieved with the new CAOS architecture.},
booktitle = {Proceedings of the XIII Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {93–102},
numpages = {10},
keywords = {Microservices, Mobile Cloud Computing, Offloading},
location = {Salvador, Brazil},
series = {SBCARS '19}
}

@inproceedings{10.1145/2961111.2962587,
author = {Shahin, Mojtaba and Babar, Muhammad Ali and Zhu, Liming},
title = {The Intersection of Continuous Deployment and Architecting Process: Practitioners' Perspectives},
year = {2016},
isbn = {9781450344272},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2961111.2962587},
doi = {10.1145/2961111.2962587},
abstract = {Context: Development and Operations (DevOps) is an emerging software industry movement to bridge the gap between software development and operations teams. DevOps supports frequently and reliably releasing new features and products-- thus subsuming Continuous Deployment (CD) practice. Goal: This research aims at empirically exploring the potential impact of CD practice on architecting process. Method: We carried out a case study involving interviews with 16 software practitioners. Results: We have identified (1) a range of recurring architectural challenges (i.e., highly coupled monolithic architecture, team dependencies, and ever-changing operational environments and tools) and (2) five main architectural principles (i.e., small and independent deployment units, not too much focus on reusability, aggregating logs, isolating changes, and testability inside the architecture) that should be considered when an application is (re-) architected for CD practice. This study also supports that software architecture can better support operations if an operations team is engaged at an early stage of software development for taking operational aspects into considerations. Conclusion: These findings provide evidence that software architecture plays a significant role in successfully and efficiently adopting continuous deployment. The findings contribute to establish an evidential body of knowledge about the state of the art of architecting for CD practice},
booktitle = {Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {44},
numpages = {10},
keywords = {DevOps, continuous deployment, Software architecture, empirical study},
location = {Ciudad Real, Spain},
series = {ESEM '16}
}

@inproceedings{10.1145/3477314.3507317,
author = {de Bayser, Maximillien and Segura, Vin\'{\i}cius and Azevedo, Leonardo G. and Tizzei, Leonardo P. and Thiago, Raphael and Soares, Elton and Cerqueira, Renato},
title = {DevOps and Microservices in Scientific System Development: Experience on a Multi-Year Industry Research Project},
year = {2022},
isbn = {9781450387132},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477314.3507317},
doi = {10.1145/3477314.3507317},
abstract = {In this work, we present the experience of a multi-year industry research project where agile methods, microservices and DevOps were applied. Our goal is to validate the hypothesis that the use of microservices would allow computational scientists to work in the more minimalistic prototype-oriented way they prefer while the software engineering team handle the integration. Hence, scientific multidisciplinary systems gain in a twofold way: (i) Subject Matter Experts (SME) use their preferable tools to develop the specific scientific part of the system; (ii) software engineers provide the high quality software code for the system delivery.},
booktitle = {Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing},
pages = {1452–1455},
numpages = {4},
keywords = {DevOps, microservices architecture, applied research, scientific computing, modern software engineering},
location = {Virtual Event},
series = {SAC '22}
}

@inproceedings{10.1145/3341105.3373875,
author = {Grambow, Martin and Meusel, Lukas and Wittern, Erik and Bermbach, David},
title = {Benchmarking Microservice Performance: A Pattern-Based Approach},
year = {2020},
isbn = {9781450368667},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341105.3373875},
doi = {10.1145/3341105.3373875},
abstract = {Benchmarking microservices serves to understand and check their non-functional properties for relevant workloads and over time. Performing benchmarks, however, can be costly: each microservice requires the design and implementation of a benchmark, possibly repeatedly as the service evolves. As microservice APIs differ, benchmarking tools that assume common interfaces - like ones for databases - do not exist.In this work, we present a pattern-based approach to reduce the efforts for defining microservice benchmarks, while still allowing to measure qualities of complex interactions. It assumes that microservices expose a REST API, described in a machine-understandable way, and allows developers to model interaction patterns from abstract operations that can be mapped to that API. Possible data-dependencies between operations are resolved at runtime. We implement a prototype of our approach, which we use to demonstrate that it can be applied to open-source microservices with little effort. Our work shows that pattern-based benchmarking of microservices is feasible and opens up opportunities for microservice providers and tooling developers.},
booktitle = {Proceedings of the 35th Annual ACM Symposium on Applied Computing},
pages = {232–241},
numpages = {10},
location = {Brno, Czech Republic},
series = {SAC '20}
}

@inproceedings{10.1145/3123779.3123804,
author = {Haselb\"{o}ck, Stefan and Weinreich, Rainer and Buchgeher, Georg},
title = {Decision Guidance Models for Microservices: Service Discovery and Fault Tolerance},
year = {2017},
isbn = {9781450348430},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3123779.3123804},
doi = {10.1145/3123779.3123804},
abstract = {Introducing a microservice system is a challenging task and requires the exploration and documentation of several related areas of design. Exploration and documentation of software architecture design is supported by decision guidance models in software architecture. In this paper, we present such guidance models for several microservice system design areas, including service discovery and fault tolerance. The presented models have been created based on existing microservice literature and have been validated and refined in design workshops with business partners as part of a technical action research (TAR) study.},
booktitle = {Proceedings of the Fifth European Conference on the Engineering of Computer-Based Systems},
articleno = {4},
numpages = {10},
keywords = {software architecture, design decisions, microservices, decision guidance models, technical action research (TAR)},
location = {Larnaca, Cyprus},
series = {ECBS '17}
}

@inproceedings{10.1145/3360774.3360790,
author = {Bosak, T. and Jantos, P. and Boryczko, K.},
title = {Simulation of a Big Number of Microservices in a Highly Distributed Vast Network},
year = {2019},
isbn = {9781450372831},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3360774.3360790},
doi = {10.1145/3360774.3360790},
abstract = {The rapidly increasing number of instances and types of services, especially microservices, and the growing complexity of systems create uncertainty if the existing algorithms and solutions for such problems as service discovery or load balancing are still the case. Building a huge infrastructure for the verification purposes is often too costly and impractical in the production environment therefore it is necessary to find other ways to test architectural approaches and algorithms. One of them is simulators. For simulating very big systems like a telecommunications radio access network the simulator should have certain features: capability of simulating a huge number of services, possibility to model heterogenic and vast network, facility to add a new type of services and logic. This paper presents a concept of such a simulator of services.},
booktitle = {Proceedings of the 16th EAI International Conference on Mobile and Ubiquitous Systems: Computing, Networking and Services},
pages = {378–386},
numpages = {9},
keywords = {service discovery, edge cloud, microservices, simulation},
location = {Houston, Texas, USA},
series = {MobiQuitous '19}
}

@inproceedings{10.1145/3465480.3466919,
author = {Laigner, Rodrigo and Zhou, Yongluan and Salles, Marcos Antonio Vaz},
title = {A Distributed Database System for Event-Based Microservices},
year = {2021},
isbn = {9781450385558},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3465480.3466919},
doi = {10.1145/3465480.3466919},
abstract = {Microservice architectures are an emerging industrial approach to build large scale and event-based systems. In this architectural style, an application is functionally partitioned into several small and autonomous building blocks, so-called microservices, communicating and exchanging data with each other via events.By pursuing a model where fault isolation is enforced at microservice level, each microservice manages their own database, thus database systems are not shared across microservices. Developers end up encoding substantial data management logic in the application-tier and encountering a series of challenges on enforcing data integrity and maintaining data consistency across microservices.In this vision paper, we argue that there is a need to rethink how database systems can better support microservices and relieve the burden of handling complex data management tasks faced by programmers. We envision the design and research opportunities for a novel distributed database management system targeted at event-driven microservices.},
booktitle = {Proceedings of the 15th ACM International Conference on Distributed and Event-Based Systems},
pages = {25–30},
numpages = {6},
keywords = {event-driven architecture, microservices, database system},
location = {Virtual Event, Italy},
series = {DEBS '21}
}

@inproceedings{10.1145/3424771.3424812,
author = {Tighilt, Rafik and Abdellatif, Manel and Moha, Naouel and Mili, Hafedh and Boussaidi, Ghizlane El and Privat, Jean and Gu\'{e}h\'{e}neuc, Yann-Ga\"{e}l},
title = {On the Study of Microservices Antipatterns: A Catalog Proposal},
year = {2020},
isbn = {9781450377690},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3424771.3424812},
doi = {10.1145/3424771.3424812},
abstract = {Microservice architecture has become popular in the last few years as it allows the development of independent, highly reusable, and fine grained services. However, a lack of understanding of its core concepts and the absence of a ground-truth lead to design and implementation decisions, which might be applied often and introduce poorly designed solutions, called antipatterns. The definition of microservice antipatterns is essential for improving the design, maintenance, and evolution of microservice-based systems. Moreover, the few existing specifications and definitions of microservice antipatterns are scattered in the literature. Consequently, we conducted a systematic literature review of 27 papers related to microservices and analyzed 67 open-source microservice-based systems. Based on our analysis, we report in this paper 16 microservice antipatterns. We concisely describe these antipatterns, how they are implemented, and suggest refactoring solutions to remove them.},
booktitle = {Proceedings of the European Conference on Pattern Languages of Programs 2020},
articleno = {34},
numpages = {13},
keywords = {antipatterns, architecture, Microservices},
location = {Virtual Event, Germany},
series = {EuroPLoP '20}
}

@inproceedings{10.1145/3234152.3234154,
author = {Lenarduzzi, Valentina and Sievi-Korte, Outi},
title = {Software Components Selection in Microservices-Based Systems},
year = {2018},
isbn = {9781450364225},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234152.3234154},
doi = {10.1145/3234152.3234154},
abstract = {Software is commonly developed integrating custom-developed code with existing components. Companies commonly develop only a small percentage of the whole system under development.The research on component selection is in great need of future studies. Selecting components is one of the most important activities in a system development process and choosing the right ones is one of the key-factorsOur goal is to support developers in selecting alternative components in case the component is not working anymore or future versions cannot be used in the future.In this paper, we present our idea reporting the approach we want to follow and the road map.},
booktitle = {Proceedings of the 19th International Conference on Agile Software Development: Companion},
articleno = {29},
numpages = {3},
keywords = {microservices, component selection},
location = {Porto, Portugal},
series = {XP '18}
}

@inproceedings{10.1145/3393822.3432339,
author = {Dinh-Tuan, Hai and Mora-Martinez, Maria and Beierle, Felix and Garzon, Sandro Rodriguez},
title = {Development Frameworks for Microservice-Based Applications: Evaluation and Comparison},
year = {2020},
isbn = {9781450377621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3393822.3432339},
doi = {10.1145/3393822.3432339},
abstract = {The microservice architectural style has gained much attention from both academia and industry recently as a novel way to design, develop, and deploy cloud-native applications. This concept encourages the decomposition of a monolith into multiple independently deployable units. A typical microservices-based application is formed of two service types: functional services, which provide the core business logic, and infrastructure services, which provide essential functionalities for a microservices ecosystem. To improve developers' productivity, many software frameworks have been developed to provide those reusable infrastructure services, allowing programmers to focus on implementing microservices in arbitrary ways. In this work, we made use of four open source frameworks to develop a cloud-based application in order to compare and evaluate their usability and practicability. While all selected frameworks promote asynchronous microservice design in general, there are differences in the ways each implements services. This leads to interoperability issues, such as message topic naming convention. Additionally, a key finding is the long startup times of JVM-based services that might reduce application's resiliency and portability. Some other advantages come directly from the programming language, such as the ability of Go to generate native binary executables, which results in very small and compact Docker images (up to 78% smaller compared to other languages).},
booktitle = {Proceedings of the 2020 European Symposium on Software Engineering},
pages = {12–20},
numpages = {9},
keywords = {Microservices, framework-based software development, software engineering},
location = {Rome, Italy},
series = {ESSE 2020}
}

@inproceedings{10.1145/3361821.3361823,
author = {Agarwal, Preyashi and Lakshmi, J.},
title = {Cost Aware Resource Sizing and Scaling of Microservices},
year = {2019},
isbn = {9781450372411},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3361821.3361823},
doi = {10.1145/3361821.3361823},
abstract = {Microservices are small, independent, loosely coupled components which provide flexibility, agility, and scalability to an application. While these are aimed for scalability, achieving it needs judicious trade-offs between size, number and cost of provisioning. In this architecture, sizing in both homogeneous and heterogeneous resources plays a key role to balance application performance and resource requirement, as workload demand varies. This paper provides insights where the importance of considering workload characterization to decide a homogeneous or heterogeneous scaling strategy for a microservice is discussed. The work exploits the correlation of workload characterization, predicted workload demand and selection of right-sized microservice to minimize resource costs. Size of microservice is referred with respect to the amount of resources allocated to the microservice. This work also evaluates trade-offs between considering the entire predicted workload demand for resource cost optimization against algorithmic computational complexity and designs a heuristic to reduce such complexity. Evaluation of results demonstrate two important outcomes. Firstly, workload characterization helps to choose between homogeneous or heterogeneous sizing for different microservices. And secondly, by considering workload demand prediction beyond the current scheduling interval, allows to make scaling decision in the current cycle keeping in view whether the demand is going to increase or decrease. The paper also details on how to use the insights of application characterization and workload trend for choosing an appropriate scaling strategy.},
booktitle = {Proceedings of the 2019 4th International Conference on Cloud Computing and Internet of Things},
pages = {66–74},
numpages = {9},
keywords = {Microservices, Workload Characterization, Scalability, Container Sizing, Resource Optimization},
location = {Tokyo, Japan},
series = {CCIOT 2019}
}

@inproceedings{10.1145/3297858.3304004,
author = {Gan, Yu and Zhang, Yanqi and Hu, Kelvin and Cheng, Dailun and He, Yuan and Pancholi, Meghna and Delimitrou, Christina},
title = {Seer: Leveraging Big Data to Navigate the Complexity of Performance Debugging in Cloud Microservices},
year = {2019},
isbn = {9781450362405},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297858.3304004},
doi = {10.1145/3297858.3304004},
abstract = {Performance unpredictability is a major roadblock towards cloud adoption, and has performance, cost, and revenue ramifications. Predictable performance is even more critical as cloud services transition from monolithic designs to microservices. Detecting QoS violations after they occur in systems with microservices results in long recovery times, as hotspots propagate and amplify across dependent services. We present Seer, an online cloud performance debugging system that leverages deep learning and the massive amount of tracing data cloud systems collect to learn spatial and temporal patterns that translate to QoS violations. Seer combines lightweight distributed RPC-level tracing, with detailed low-level hardware monitoring to signal an upcoming QoS violation, and diagnose the source of unpredictable performance. Once an imminent QoS violation is detected, Seer notifies the cluster manager to take action to avoid performance degradation altogether. We evaluate Seer both in local clusters, and in large-scale deployments of end-to-end applications built with microservices with hundreds of users. We show that Seer correctly anticipates QoS violations 91% of the time, and avoids the QoS violation to begin with in 84% of cases. Finally, we show that Seer can identify application-level design bugs, and provide insights on how to better architect microservices to achieve predictable performance.},
booktitle = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {19–33},
numpages = {15},
keywords = {datacenter, microservices, data mining, resource management, monitoring, QoS, performance debugging, deep learning, cloud computing, tracing},
location = {Providence, RI, USA},
series = {ASPLOS '19}
}

@inproceedings{10.1145/3344341.3368800,
author = {Pallewatta, Samodha and Kostakos, Vassilis and Buyya, Rajkumar},
title = {Microservices-Based IoT Application Placement within Heterogeneous and Resource Constrained Fog Computing Environments},
year = {2019},
isbn = {9781450368940},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344341.3368800},
doi = {10.1145/3344341.3368800},
abstract = {Fog computing paradigm has created innovation opportunities within Internet of Things (IoT) domain by extending cloud services to the edge of the network. Due to the distributed, heterogeneous and resource constrained nature of the Fog computing nodes, Fog applications need to be developed as a collection of interdependent, lightweight modules. Since this concept aligns with the goals of microservices architecture, efficient placement of microservices-based IoT applications within Fog environments has the potential to fully leverage capabilities of Fog devices. In this paper, we propose a decentralized microservices-based IoT application placement policy for heterogeneous and resource constrained Fog environments. The proposed policy utilizes the independently deployable and scalable nature of microservices to place them as close as possible to the data source to minimize latency and network usage. Moreover, it aims to handle service discovery and load balancing related challenges of the microservices architecture. We implement and evaluate our policy using iFogSim simulated Fog environment. Results of the simulations show around 85% improvement in latency and network usage for the proposed microservice placement policy when compared with Cloud-only placement approach and around 40% improvement over an alternative Fog application placement method known as Edge-ward placement policy. Moreover, the decentralized placement approach proposed in this paper demonstrates significant reduction in microservice placement delay over centralized placement.},
booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing},
pages = {71–81},
numpages = {11},
keywords = {application deployment, fog computing, application placement, microservices architecture, internet of things (iot)},
location = {Auckland, New Zealand},
series = {UCC'19}
}

@inproceedings{10.1145/3147234.3148111,
author = {L\'{o}pez, Manuel Ram\'{\i}rez and Spillner, Josef},
title = {Towards Quantifiable Boundaries for Elastic Horizontal Scaling of Microservices},
year = {2017},
isbn = {9781450351959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3147234.3148111},
doi = {10.1145/3147234.3148111},
abstract = {One of the most useful features of a microservices architecture is its versatility to scale horizontally. However, not all services scale in or out uniformly. The performance of an application composed of microservices depends largely on a suitable combination of replica count and resource capacity. In practice, this implies limitations to the efficiency of autoscalers which often overscale based on an isolated consideration of single service metrics. Consequently, application providers pay more than necessary despite zero gain in overall performance. Solving this issue requires an application-specific determination of scaling limits due to the general infeasibility of an application-agnostic solution. In this paper, we study microservices scalability, the auto-scaling of containers as microservice implementations and the relation between the number of replicas and the resulting application task performance. We contribute a replica count determination solution with a mathematical approach. Furthermore, we offer a calibration software tool which places scalability boundaries into declarative composition descriptions of applications ready to be consumed by cloud platforms.},
booktitle = {Companion Proceedings of The10th International Conference on Utility and Cloud Computing},
pages = {35–40},
numpages = {6},
keywords = {scalability, optimization, replication, microservices},
location = {Austin, Texas, USA},
series = {UCC '17 Companion}
}

@inproceedings{10.1145/3337821.3337857,
author = {Hou, Xiaofeng and Liu, Jiacheng and Li, Chao and Guo, Minyi},
title = {Unleashing the Scalability Potential of Power-Constrained Data Center in the Microservice Era},
year = {2019},
isbn = {9781450362955},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3337821.3337857},
doi = {10.1145/3337821.3337857},
abstract = {Recent scale-out cloud services have undergone a shift from monolithic applications to microservices by putting each functionality into lightweight software containers. Although traditional data center power optimization frameworks excel at per-server or per-rack management, they can hardly make informed decisions when facing microservices that have different QoS requirements on a per-service basis. In a power-constrained data center, blindly budgeting power usage could lead to a power unbalance issue: microservices on the critical path may not receive adequate power budget. This unavoidably hinders the growth of cloud productivity.To unleash the performance potential of cloud in the microservice era, this paper investigates microservice-aware data center resource management. We model microservice using a bipartite graph and propose a metric called microservice criticality factor (MCF) to measure the overall impact of performance scaling on a microservice from the whole application's perspective. We further devise ServiceFridge, a novel system framework that leverages MCF to jointly orchestrate software containers and control hardware power demand. Our detailed case study on a practical microservice application demonstrates that ServiceFridge allows data center to reduce its dynamic power by 25% with slight performance loss. It improves the mean response time by 25.2% and improves the 90th tail latency by 18.0% compared with existing schemes.},
booktitle = {Proceedings of the 48th International Conference on Parallel Processing},
articleno = {10},
numpages = {10},
location = {Kyoto, Japan},
series = {ICPP 2019}
}

@inproceedings{10.1145/3297280.3297401,
author = {Ibrahim, Amjad and Bozhinoski, Stevica and Pretschner, Alexander},
title = {Attack Graph Generation for Microservice Architecture},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297401},
doi = {10.1145/3297280.3297401},
abstract = {Microservices, which are typically technologically heterogenous and can be deployed automatically, are increasingly dominating service systems. However, with increased utilization of third-party components distributed as images, the potential vulnerabilities in microservice-based systems increase. Based on component dependency, such vulnerabilities can lead to exposing a system's critical assets. Similar problems have been addressed by the computer networks community. In this paper, we propose utilizing attack graphs in the continuous delivery infrastructure of microservices-based systems. To that end, we relate microservices to network nodes and automatically generate attack graphs that help practitioners identify, analyze, and prevent plausible attack paths in their microservice-based container networks. We present a complete solution that can be easily embedded in continuous delivery systems and demonstrate its efficiency and scalability based on real-world use cases.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1235–1242},
numpages = {8},
keywords = {attack graph generation, containers, microservices},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/3297858.3304013,
author = {Gan, Yu and Zhang, Yanqi and Cheng, Dailun and Shetty, Ankitha and Rathi, Priyal and Katarki, Nayan and Bruno, Ariana and Hu, Justin and Ritchken, Brian and Jackson, Brendon and Hu, Kelvin and Pancholi, Meghna and He, Yuan and Clancy, Brett and Colen, Chris and Wen, Fukang and Leung, Catherine and Wang, Siyuan and Zaruvinsky, Leon and Espinosa, Mateo and Lin, Rick and Liu, Zhongling and Padilla, Jake and Delimitrou, Christina},
title = {An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud &amp; Edge Systems},
year = {2019},
isbn = {9781450362405},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297858.3304013},
doi = {10.1145/3297858.3304013},
abstract = {Cloud services have recently started undergoing a major shift from monolithic applications, to graphs of hundreds or thousands of loosely-coupled microservices. Microservices fundamentally change a lot of assumptions current cloud systems are designed with, and present both opportunities and challenges when optimizing for quality of service (QoS) and cloud utilization.In this paper we explore the implications microservices have across the cloud system stack. We first present DeathStarBench, a novel, open-source benchmark suite built with microservices that is representative of large end-to-end services, modular and extensible. DeathStarBench includes a social network, a media service, an e-commerce site, a banking system, and IoT applications for coordination control of UAV swarms. We then use DeathStarBench to study the architectural characteristics of microservices, their implications in networking and operating systems, their challenges with respect to cluster management, and their trade-offs in terms of application design and programming frameworks. Finally, we explore the tail at scale effects of microservices in real deployments with hundreds of users, and highlight the increased pressure they put on performance predictability.},
booktitle = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {3–18},
numpages = {16},
keywords = {cluster management, qos, acceleration, datacenters, serverless, cloud computing, fpga, microservices},
location = {Providence, RI, USA},
series = {ASPLOS '19}
}

@inproceedings{10.1145/3184407.3184430,
author = {Gotin, Manuel and L\"{o}sch, Felix and Heinrich, Robert and Reussner, Ralf},
title = {Investigating Performance Metrics for Scaling Microservices in CloudIoT-Environments},
year = {2018},
isbn = {9781450350952},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3184407.3184430},
doi = {10.1145/3184407.3184430},
abstract = {A CloudIoT solution typically connects thousands of IoT things with cloud applications in order to store or process sensor data. In this environment, the cloud applications often consist of microservices which are connected to each other via message queues and must reliably handle a large number of messages produced by the IoT things. The state of a message queue in such a system can be a challenge if the rate of incoming messages continuously exceeds the rate of outgoing messages. This can lead to performance and reliability degradations due to overloaded queues and result in the unavailability of the cloud application. In this paper we present a case study to investigate which performance metrics to be used by a threshold-based auto-scaler for scaling consuming microservices of a message queue in order to prevent overloaded queues and to avoid SLA violations. We evaluate the suitability of each metric for scaling I/O-intensive and compute-intensive microservices with constant and varying characteristics, such as service time. We show, that scaling decisions based on message queue metrics are much more resilient to microservice characteristics variations. In this case, relying on the CPU utilization may result in massive overprovisioning or no scaling decision at all which could lead to an overloaded queue and SLA violations. We underline the benefits of using message queue metrics for scaling decisions instead of the more traditional CPU utilization particularly for I/O-intensive microservices due to the vulnerability to variations in the microservice characteristics.},
booktitle = {Proceedings of the 2018 ACM/SPEC International Conference on Performance Engineering},
pages = {157–167},
numpages = {11},
keywords = {auto-scaler, performance, threshold-based rules, microservices, message queues, performance metrics, internet of things (IoT), cloud computing},
location = {Berlin, Germany},
series = {ICPE '18}
}

@inproceedings{10.1145/3234152.3234193,
author = {Rademacher, Florian and Sorgalla, Jonas and Wizenty, Philip Nils and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {Microservice Architecture and Model-Driven Development: Yet Singles, Soon Married (?)},
year = {2018},
isbn = {9781450364225},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234152.3234193},
doi = {10.1145/3234152.3234193},
abstract = {Microservice Architecture (MSA) is a comparatively novel service-based architectural style with a strong focus on high cohesion, loose coupling, and independence of services and their development teams. In this position paper we argue that Microservice Architecture (MSA) can benefit from the application of Model-driven Development (MDD). Therefore, we elucidate how typical MSA concerns may be addressed by means of MDD such as abstraction, model transformation, and modeling viewpoints. Because this contemplation is driven from a conceptual perspective on MSA, we conversely present an overview of existing methodologies and tools for applying MDD holistically in MSA development to further substantiate our position.},
booktitle = {Proceedings of the 19th International Conference on Agile Software Development: Companion},
articleno = {23},
numpages = {5},
keywords = {microservice architecture, domain-driven design, modeling languages, model-driven microservice development, model-driven development, model transformation},
location = {Porto, Portugal},
series = {XP '18}
}

@inproceedings{10.1145/3011141.3011155,
author = {Salvadori, Ivan and Huf, Alexis and Mello, Ronaldo dos Santos and Siqueira, Frank},
title = {Publishing Linked Data through Semantic Microservices Composition},
year = {2016},
isbn = {9781450348072},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3011141.3011155},
doi = {10.1145/3011141.3011155},
abstract = {Microservices are replacing monolithic applications by splitting them out into small and independent artifacts that collaborate with one another. Focused on managing highly cohesive information, microservices may be composed to provide richer and linked information. This paper presents a composition method, aimed at composing semantic microservices for achieving data integration based on Linked Data principles. Moreover, the proposed method leverages the independence of development and composability of microservices. This paper also presents a framework and a case study for the proposed method.},
booktitle = {Proceedings of the 18th International Conference on Information Integration and Web-Based Applications and Services},
pages = {443–452},
numpages = {10},
keywords = {microservices, composition, linked data},
location = {Singapore, Singapore},
series = {iiWAS '16}
}

@inproceedings{10.1145/3234152.3234194,
author = {Sorgalla, Jonas and Rademacher, Florian and Sachweh, Sabine and Z\"{u}ndorf, Albert},
title = {Collaborative Model-Driven Software Engineering and Microservice Architecture: A Perfect Match?},
year = {2018},
isbn = {9781450364225},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234152.3234194},
doi = {10.1145/3234152.3234194},
abstract = {The emerging microservice architectural style (MSA) provides means predestined to cope with the essential complexity of distributed software systems. However, this gives rise to accidental complexity which can be reduced with the application of Model-Driven Development (MDD). Although there are first MDD approaches for microservices, we take the position that for a holistic modeling approach the organizational characteristics of MSA need more attention.},
booktitle = {Proceedings of the 19th International Conference on Agile Software Development: Companion},
articleno = {24},
numpages = {2},
keywords = {collaborative model-driven software engineering, model-driven development, microservice architecture},
location = {Porto, Portugal},
series = {XP '18}
}

@inproceedings{10.1145/3437984.3458828,
author = {Somashekar, Gagan and Gandhi, Anshul},
title = {Towards Optimal Configuration of Microservices},
year = {2021},
isbn = {9781450382984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3437984.3458828},
doi = {10.1145/3437984.3458828},
abstract = {The microservice architecture allows applications to be designed in a modular format, whereby each microservice can implement a single functionality and can be independently managed and deployed. However, an undesirable side-effect of this modular design is the large state space of possibly inter-dependent configuration parameters (of the constituent microservices) which have to be tuned to improve application performance. This workshop paper investigates optimization techniques and dimensionality reduction strategies for tuning microservices applications, empirically demonstrating the significant tail latency improvements (as much as 23%) that can be achieved with configuration tuning.},
booktitle = {Proceedings of the 1st Workshop on Machine Learning and Systems},
pages = {7–14},
numpages = {8},
keywords = {microservices, tail latency, ML for systems, optimization, configuration tuning},
location = {Online, United Kingdom},
series = {EuroMLSys '21}
}

