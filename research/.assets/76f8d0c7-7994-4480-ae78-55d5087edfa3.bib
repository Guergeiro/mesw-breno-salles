@inproceedings{19772647 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Microservices identification strategies : A review focused on Model-Driven Engineering and Domain Driven Design approaches},
journal = {2020 15th Iberian Conference on Information Systems and Technologies (CISTI)},
author = {Anderson Schmidt, R. and Thiry, M.},
year = {2020//},
pages = {6 pp. - },
address = {Piscataway, NJ, USA},
abstract = {A proper architectural design for a microservices system is crucial for its success. Although there are several design strategies to identify software components in general, microservices demands special consideration. In this context of distributed systems, the component size directly impacts on nonfunctional requirements, such as performance, flexibility, reusability, etc. Design practices of coupling and cohesion have to be fine-tuned to determine the ideal microservices granularity. In order to shed light on this question, this study conducted a Systematic Literature Review that investigates microservices identification proposals. From procedures and guidelines inspired by Kitchenham et al., a rigorous research protocol was defined and performed, that covers publications from 2013 to 2019. Starting with an initial screening of 715 papers, 27 studies were considered relevant to answer four research questions. Besides microservices decomposition strategies, this review underlines Model Driven Engineering and Domain Driven Design, once they represent valuable approaches to support this challenging task. Moreover, this work highlights that only a few studies had explored these approaches in their strategies, which opens promising potential for further research.},
keywords = {distributed processing;software architecture;software maintenance;},
note = {microservices identification strategies;Model-Driven Engineering;Domain Driven Design;architectural design;microservices system;software components;distributed systems;Systematic Literature Review;microservices decomposition strategies;},
URL = {http://dx.doi.org/10.23919/CISTI49556.2020.9141150},
}


@inproceedings{19967225 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Search-based many-criteria identification of microservices from legacy systems},
journal = {GECCO'20. Proceedings of the 2020 Genetic and Evolutionary Computation Conference Companion},
author = {Carvalho, L. and Garcia, A. and Colanzi, T.E. and Assuncao, W.K.G. and Lima, M.J. and Fonseca, B. and Ribeiro, M. and Lucena, C.},
year = {2020/07/12},
pages = {305 - 6},
address = {New York, NY, USA},
abstract = {The expensive maintenance of legacy systems lead companies to migrate such systems to a microservice architecture. This migration requires the identification of microservice candidates, which requires analysis of many criteria. Existing search-based approaches to solve this problem are only based on the coupling and cohesion criteria. To overcome these limitations, we propose a many-objective search-based approach for identifying microservice candidates. Its five objectives correspond to criteria pointed as useful by experienced developers. Our approach was evaluated in the context of a legacy system. The results show that our approach is very similar on optimizing the traditional criteria of coupling and cohesion, but much better when taking into account the additional criteria.},
keywords = {search problems;service-oriented architecture;software maintenance;},
note = {legacy system maintenance;microservice architecture;many objective search;search based many criteria identification;},
URL = {http://dx.doi.org/10.1145/3377929.3390030},
}


@inproceedings{20405215 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Towards an Automatic Identification of Microservices from Business Processes},
journal = {2020 IEEE 29th International Conference on Enabling Technologies: Infrastructure for Collaborative Enterprises (WETICE)},
author = {Daoud, M. and El Mezouari, A. and Faci, N. and Benslimane, D. and Maamar, Z. and El Fazziki, A.},
year = {2020//},
pages = {42 - 7},
address = {Piscataway, NJ, USA},
abstract = {Microservices have emerged as an alternative solution to many existing technologies allowing to break monolithic applications into &#8220;small&#8221; fine-grained, highly-cohesive, and loosely-coupled units. However, identifying microservices remains a challenge that could undermine this migration success. This paper proposes an approach for microservices automatic-identification from a set of business processes (BP). The approach is multi-models combining different independent models that represent a BP&#8217;s control dependencies, data dependencies, semantic dependencies, respectively. the approach is also based on collaborative clustering. A case study about renting bikes is adopted to illustrate and demonstrate the approach. In term of precision, the results show how BPs as inputs permit to generate better microservices compared to other approaches discussed in the paper, as well.},
keywords = {business data processing;pattern clustering;service-oriented architecture;},
note = {data dependencies;semantic dependencies;business processes;monolithic applications;loosely-coupled units;microservices automatic-identification;BP control dependencies;collaborative clustering;},
URL = {http://dx.doi.org/10.1109/WETICE49692.2020.00017},
}


@inproceedings{19913970 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {System Decomposition to Optimize Functionality Distribution in Microservices with Rule Based Approach},
journal = {2020 IEEE International Conference on Service Oriented Systems Engineering (SOSE)},
author = {Eyitemi, F.-D. and Reiff-Marganiec, S.},
year = {2020//},
pages = {65 - 71},
address = {Piscataway, NJ, USA},
abstract = {The microservice architecture is an architecture in which a single system is divided into small independently deployed services that are orchestrated together with the use of a lightweight mechanism. Each microservice does not rely much on other microservices (low coupling), but rather on its own resources to perform its task (high cohesion). This paper proposes a novel methodology which decomposes a monolith or other system into microservices in such a way that each microservice will function independently of other microservices while preserving some other key features, with the functionality distribution across each microservice being optimized with regards to usage of the functionality. This methodology makes use of dynamic analysis to identify resources that play a role in enabling the microservice to fulfill its functionality. We establish a set of rules which allows optimized distribution of the functionality. We evaluate the approach by applying it to real systems.},
keywords = {knowledge based systems;optimisation;software architecture;},
note = {functionality distribution;microservice architecture;dynamic analysis;system decomposition;rule based approach;},
URL = {http://dx.doi.org/10.1109/SOSE49046.2020.00015},
}


@inproceedings{20490000 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Microservice Migration Using Strangler Fig Pattern: A Case Study on the Green Button System},
journal = {2020 International Computer Symposium (ICS)},
author = {Chia-Yu Li and Shang-Pin Ma and Tsung-Wen Lu},
year = {2020//},
pages = {519 - 24},
address = {Piscataway, NJ, USA},
abstract = {Microservice is a software architecture style which is adopted widely and rapidly in recent years. An application of microservice architecture (MSA) consists of multiple small microservices. Each microservice is autonomous, as well as easy to scale up, test, and maintain. Nowadays, many enterprises choose to replace existing monolithic architecture with MSA to enhance software quality. Accordingly, the microservice migration has become a hot topic of practical research. However, a complete and systematic microservice migration process is still lacking. Therefore, we propose a microservice migration approach based on the Strangler Fig pattern and Domain-Driven Design (DDD) to provide a complete architecture migration process and involving methods. Besides, we applied the proposed approach in an existing monolithic application, the DataCustodian system of the Green Button project. In the case study, appropriate microservices were successfully identified and established using the Strangler Fig pattern. We also conducted quantitative experiments to evaluate the performance of both new microservices and unmigrated modules during the architecture migration.},
keywords = {service-oriented architecture;software quality;},
note = {software architecture style;microservice architecture consists;MSA;monolithic architecture;complete microservice migration process;systematic microservice migration process;microservice migration approach;complete architecture migration process;involving methods;existing monolithic application;appropriate microservices;green button project;green button system;strangler fig pattern;},
URL = {http://dx.doi.org/10.1109/ICS51289.2020.00107},
}


@inproceedings{19635760 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {A Complexity Metric for Microservices Architecture Migration},
journal = {2020 IEEE International Conference on Software Architecture (ICSA). Proceedings},
author = {Santos, N. and Rito Silva, A.},
year = {2020//},
pages = {169 - 78},
address = {Los Alamitos, CA, USA},
abstract = {Monolith applications tend to be difficult to deploy, upgrade, maintain, and understand. Microservices, on the other hand, have the advantages of being independently developed, tested, deployed, scaled and, more importantly, easier to change and maintain. This paper addresses the problem of migrating a monolith to a microservices architecture. Therefore, we address two research questions: (1) Can we define the cost of decomposition in terms of the effort to redesign a functionality, which is implemented in the monolith as an ACID transaction, into several distributed transactions? (2) Considering several similarity measures between domain entities, which provide a better decomposition when they are compared using the proposed complexity metric? To answer the first research question, we propose a complexity metric, for each functionality of the monolith application, that measures the impact of relaxing the functionality consistency on the architecture redesign and implementation. Regarding the second research question, we experiment with four similarity measures, each based on a different type of information collected from monolith functionality implementation. We evaluated our approach with three monolith systems and compared our complexity metric against industry metrics of cohesion and coupling. We also evaluated the different similarity measures in terms of the complexity of the decomposition they produce. We were able to correctly correlate the complexity metric with other metrics of cohesion and coupling defined in other research and we conclude that no single combination of similarity measures outperforms the other, which is confirmed by the existing research. Additionally, we conclude that the approach can help on an incremental migration to microservices, which, actually, is the strategy proposed by the industry experts.},
keywords = {software architecture;software metrics;},
note = {complexity metric;architecture redesign;monolith systems;similarity measures;microservices architecture migration;ACID transaction;},
URL = {http://dx.doi.org/10.1109/ICSA47634.2020.00024},
}


@inproceedings{20031419 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Migrating Application from Monolith to Microservices},
journal = {2020 International Conference on Information Management and Technology (ICIMTech)},
author = {Prasandy, T. and Titan and Murad, D.F. and Darwis, T.},
year = {2020//},
pages = {726 - 31},
address = {Piscataway, NJ, USA},
abstract = {Companies need information systems to facilitate their work and organizational management. From the application that went through very important developments from desktop-based applications to web-based applications to mobile-based applications as the latest development. But maintenance of mobile applications will be done more often, because the mobile applications are very dependent on the application service and API used to retrieve data in the database and to display information that is displayed in mobile applications. The goal is to discover the preparation that needs to be done by the developer so that the transfer of technology to micro services still gives the user a comfortable feeling without any interference. Preparing for migration from monoliths to microservices is modularization of application source code, modularization of databases and cloud servers such as the Google cloud platform if you want to stay on your own server.},
keywords = {application program interfaces;cloud computing;file servers;information systems;mobile computing;organisational aspects;service-oriented architecture;software maintenance;},
note = {microservices;Web based applications;mobile applications;application service;desktop based applications;information systems;organizational management;monolith;API;application source code modularization;database modularization;cloud servers;application migration;},
URL = {http://dx.doi.org/10.1109/ICIMTech50083.2020.9211252},
}


@inproceedings{19596728 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {A Reconfigurable Microservice-Based Migration Technique for IoT Systems},
journal = {Service-Oriented Computing &#8211; ICSOC 2019 Workshops. WESOACS, ASOCA, ISYCC, TBCE, and STRAPS. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12019)},
author = {Chang-ai Sun and Jing Wang and Jing Guo and Zhen Wang and Li Duan},
year = {2020//},
pages = {142 - 55},
address = {Cham, Switzerland},
abstract = {An Internet of Things (IoT) system is often an integration of a large number of hardware and software modules, which are expected to be easily replaced or reconfigured in order to cater for quickly-changing environments and requirements. With the popularity of microservices, people have attempted to introduce the microservice architecture to IoT systems, while paid little attention to the connectivity between the decomposed microservices, resulting in poor reconfigurability of the resulting system. In this paper, we propose a reconfigurable microservice-based migration technique for IoT systems, which first decomposes an IoT system as a set of microservices and then introduces variation contexts to make the decomposed microservices reconfigurable. We have conducted a case study on an open-source real-life unmanned aerial vehicle (UAV) system. The results demonstrate that the migrated UAV system can be dynamically reconfigured to handle various run-time changes.},
keywords = {autonomous aerial vehicles;Internet;Internet of Things;remotely operated vehicles;service-oriented architecture;software architecture;software prototyping;},
note = {decomposed microservices;poor reconfigurability;reconfigurable microservice-based migration technique;IoT system;real-life unmanned aerial vehicle system;migrated UAV system;Things system;microservice architecture;},
URL = {http://dx.doi.org/10.1007/978-3-030-45989-5_12},
}


@inproceedings{19785970 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Enhancing microservices architectures using data-driven service discovery and QoS guarantees},
journal = {2020 20th IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing (CCGRID)},
author = {Houmani, Z. and Balouek-Thomert, D. and Caron, E. and Parashar, M.},
year = {2020//},
pages = {290 - 9},
address = {Piscataway, NJ, USA},
abstract = {Microservices promise the benefits of services with an efficient granularity using dynamically allocated resources. In the current evolving architectures, data producers and consumers are created as decoupled components that support different data objects and quality of service. Actual implementations of service meshes lack support for data-driven paradigms, and focus on goal-based approaches designed to fulfill the general system goal. This diversity of available components demands the integration of users requirements and data products into the discovery mechanism. This paper proposes a data-driven service discovery framework based on profile matching using data-centric service descriptions. We have designed and evaluated a microservices architecture for providing service meshes with a standalone set of components that manages data profiles and resources allocations over multiple geographical zones. Moreover, we demonstrated an adaptation scheme to provide quality of service guarantees. Evaluation of the implementation on a real life testbed shows effectiveness of this approach with stable and fluctuating request incoming rates.},
keywords = {data handling;quality of service;resource allocation;software architecture;Web services;},
note = {data producers;data-driven paradigms;goal-based approach;data products;data-centric service descriptions;microservices architecture;data profiles;resource allocations;quality of service;QoS;data-driven service discovery;},
URL = {http://dx.doi.org/10.1109/CCGrid49817.2020.00-64},
}


@article{21626749 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Microservice transition and its granularity problem: a systematic mapping study},
journal = {Software: Practice and Experience},
journal = {Softw., Pract. Exp. (USA)},
author = {Hassan, S. and Bahsoon, R. and Kazman, R.},
volume = { 50},
number = { 9},
year = {Sept. 2020},
pages = {1651 - 81},
issn = {0038-0644},
address = {USA},
abstract = {Microservices have gained wide recognition and acceptance in software industries as an emerging architectural style for autonomic, scalable, and more reliable computing. The transition to microservices has been highly motivated by the need for better alignment of technical design decisions with improving value potentials of architectures. Despite microservices' popularity, research still lacks disciplined understanding of transition and consensus on the principles and activities underlying that transition. In this paper, we report on a systematic mapping study that consolidates various views, approaches and activities that commonly assist in the transition to microservices. The study aims to provide a better understanding of the transition; it also contributes a working definition of the transition and technical activities underlying it. We term the transition and technical activities leading to microservice architectures as microservitization. We then shed light on a fundamental problem of microservitization: microservice granularity and reasoning about its adaptation as first-class entities. This study reviews state-of-the-art and -practice related to reasoning about microservice granularity; it reviews modeling approaches, aspects considered, guidelines and processes used to reason about microservice granularity. This study identifies opportunities for future research and development related to reasoning about microservice granularity.},
keywords = {business data processing;DP industry;granular computing;service-oriented architecture;},
note = {first-class entities;microservitization problem;software industries;technical design decisions;reliable computing;scalable computing;autonomic computing;systematic mapping study;microservice transition;microservice granularity;},
URL = {http://dx.doi.org/10.1002/spe.2869},
}


@inproceedings{20242240 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Decomposing Monolithic Systems to Microservices},
journal = {2020 3rd International Conference on Computer and Informatics Engineering (IC2IE)},
author = {Sheikh, A. and Bs, A.},
year = {2020//},
pages = {478 - 81},
address = {Piscataway, NJ, USA},
abstract = {Decomposition is one of the most mind-boggling assignments during the movement from legacy systems to microservices, by and large performed physically, in light of the experience of the product designers. In this paper we define a 6-step process that will help to reduce the complexity of determining when to introduce a new service into the project. This decomposition technique will help to ease the architecture of the project and determine a decomposition option that the product architect had not considered.},
keywords = {software architecture;software maintenance;Web services;},
note = {monolithic system decomposition;mind-boggling assignments;microservices;legacy systems;},
URL = {http://dx.doi.org/10.1109/IC2IE50715.2020.9274641},
}


@inproceedings{20279391 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Realizing A Composable Enterprise Microservices Fabric with AI-Accelerated Material Discovery API Services},
journal = {2020 IEEE 13th International Conference on Cloud Computing (CLOUD)},
author = {Chang, R.N. and Bhaskaran, K. and Dey, P. and Hsu, H. and Takeda, S. and Hama, T.},
year = {2020//},
pages = {313 - 20},
address = {Los Alamitos, CA, USA},
abstract = {The complexity of building, deploying, and managing cross-organizational enterprise computing services with self-service, security, and quality assurances has been increasing exponentially in the era of hybrid multiclouds. AI-accelerated material discovery capabilities, for example, are desirable for enterprise application users to consume through business API services with assurance of satisfactory nonfunctional properties, e.g., enterprise-compliant self-service management of sharable sensitive data and machine learning capabilities at Internet scale. This paper presents a composable microservices based approach to creating and continuously improving enterprise computing services. Moreover, it elaborates on several key architecture design decisions for Navarch, a composable enterprise microservices fabric that facilitates consuming, managing, and composing enterprise API services. Under service management model of individual administration, every Navarch microservice is a managed composable API service that can be provided by an internal organization, an enterprise partner, or a public service provider. This paper also illustrates a Navarch-enabled systematic and efficient approach to transforming an AI-accelerated material discovery tool into secure, scalable, and composable enterprise microservices. Performance of the microservices can be continuously improved by exploiting advanced heterogeneous microservice hosting infrastructures. Factual comparative performance analyses are provided before the paper concludes with future work.},
keywords = {application program interfaces;business data processing;cloud computing;Internet;service-oriented architecture;software architecture;},
note = {scalable enterprise microservices;service management model;composing enterprise API services;composable microservices;machine learning capabilities;sharable sensitive data;enterprise-compliant self-service management;business API services;enterprise application users;AI-accelerated material discovery capabilities;managing cross-organizational enterprise computing services;AI-accelerated material discovery API services;composable enterprise microservices fabric;heterogeneous microservice hosting infrastructures;secure enterprise microservices;material discovery tool;public service provider;enterprise partner;managed composable API service;Navarch microservice;},
URL = {http://dx.doi.org/10.1109/CLOUD49709.2020.00051},
}


@inproceedings{20489240 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Proactive Microservice Placement and Migration for Mobile Edge Computing},
journal = {2020 IEEE/ACM Symposium on Edge Computing (SEC)},
author = {Ray, K. and Banerjee, A. and Narendra, N.C.},
year = {2020//},
pages = {28 - 41},
address = {Piscataway, NJ, USA},
abstract = {In recent times, Mobile Edge Computing (MEC) has emerged as a new paradigm allowing low-latency access to services deployed on edge nodes offering computation, storage and communication facilities. Vendors deploy their services on MEC servers to improve performance and mitigate network latencies often encountered in accessing cloud services. A service placement policy determines which services are deployed on which MEC servers. A number of mechanisms exist in literature to determine the optimal placement of services considering different performance metrics. However, for applications designed as microservice workflow architectures, service placement schemes need to be re-examined through a different lens owing to the inherent interdependencies which exist between microservices. Indeed, the dynamic environment, with stochastic user movement and service invocations, along with a large placement configuration space makes microservice placement in MEC a challenging task. Additionally, owing to user mobility, a placement scheme may need to be recalibrated, triggering service migrations to maintain the advantages offered by MEC. Existing microservice placement and migration schemes consider on-demand strategies. In this work, we take a different route and propose a Reinforcement Learning based proactive mechanism for microservice placement and migration. We use the San Francisco Taxi dataset to validate our approach. Experimental results show the effectiveness of our approach in comparison to other state-of-the-art methods.},
keywords = {cloud computing;learning (artificial intelligence);mobile computing;mobility management (mobile radio);stochastic processes;},
note = {service placement schemes;proactive microservice placement;MEC servers;cloud services;microservice workflow architectures;proactive microservice migration;mobile edge computing;on-demand strategies;reinforcement learning based proactive mechanism;},
URL = {http://dx.doi.org/10.1109/SEC50012.2020.00010},
}


@inproceedings{20168245 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Mono2Micro: an AI-based toolchain for evolving monolithic enterprise applications to a microservice architecture},
journal = {ESEC/FSE 2020: Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
author = {Kalia, A.K. and Jin Xiao and Chen Lin and Sinha, S. and Rofrano, J. and Vukovic, M. and Banerjee, D.},
year = {2020/11/08},
pages = {1606 - 10},
address = {New York, NY, USA},
abstract = {Mono2Micro is an AI-based toolchain that provides recommendations for decomposing legacy web applications into microservice partitions. Mono2Micro consists of a set of tools that collect static and runtime information from a monolithic application and process the information using an AI-based technique to generate recommendations for partitioning the application classes. Each partition represents a candidate microservice or a grouping of classes with similar business functionalities. Mono2Micro takes a temporo-spatial clustering approach to compute meaningful and explainable partitions. It generates two types of partition recommendations. First, it computes business-logic-seams-based partitions that represent a desired encapsulation of business functionalities. However, such a recommendation may cut across data dependencies between classes, accommodating which could require significant application updates. To address this, Mono2Micro computes natural-seams-based partitions, which respect data dependencies. We describe the set of tools that comprise Mono2Micro and illustrate them using a well-known open-source JEE application.},
keywords = {artificial intelligence;Internet;pattern clustering;software architecture;},
note = {Mono2Micro;microservice partitions;partition recommendations;business-logic-seams-based partitions;monolithic enterprise applications;AI-based toolchain;microservice architecture;legacy web applications;AI-based technique;business functionalities;temporo-spatial clustering approach;},
URL = {http://dx.doi.org/10.1145/3368089.3417933},
}


@inproceedings{19693958 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {An Analysis of Throughput and Latency Behaviours Under Microservice Decomposition},
journal = {Web Engineering 20th International Conference, ICWE 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12128)},
author = {Jayasinghe, M. and Chathurangani, J. and Kuruppu, G. and Tennage, P. and Perera, S.},
year = {2020//},
pages = {53 - 69},
address = {Cham, Switzerland},
abstract = {Microservice architecture is a widely used architectural style which allows you to design your application using a set of loosely coupled services which can be developed, deployed, and scaled independently. The service decomposition is the act of decomposing (breaking) a coarse-grained service into a set of fine-grained services that collectively perform the functionality of the original service. The service decomposition introduces additional overhead due to inter-service communication of services which impacts the performance. In this paper, we study the effect of service decomposition on the throughput and average latency. We perform an extensive performance analysis using a set of standard microservice benchmarks with different workload characteristics. Our results indicate that when we decompose a service into a set of micro-services the performance of the new application can improve or degrade. The factors which impact the performance behaviours are the number of service calls, the service demand, concurrency (i.e. number of concurrent users) and the decomposition strategy. In addition to the experimental performance evaluation, we analyze the performance impact of service decomposition using queueing theoretic models. We compare the analytical results with experimental results and notice that analytical results match well with the experimental results.},
keywords = {performance evaluation;queueing theory;service-oriented architecture;software architecture;},
note = {microservice decomposition;loosely coupled services;coarse-grained service;fine-grained services;original service;performance analysis;latency behaviour analysis;concurrent users;queueing theoretic models;},
URL = {http://dx.doi.org/10.1007/978-3-030-50578-3_5},
}


@inproceedings{20165727 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Edge-supported Microservice-based Resource Discovery for Mist Computing},
journal = {2020 IEEE Intl Conf on Dependable, Autonomic and Secure Computing, Intl Conf on Pervasive Intelligence and Computing, Intl Conf on Cloud and Big Data Computing, Intl Conf on Cyber Science and Technology Congress (DASC/PiCom/CBDCom/CyberSciTech)},
author = {Sattari, A. and Ehsani, R. and Leppanen, T. and Pirttikangas, S. and Riekki, J.},
year = {2020//},
pages = {462 - 8},
address = {Los Alamitos, CA, USA},
abstract = {Mist computing extends the Internet of Things computing infrastructures to the IoT devices at the edges of the networks. The dynamic characteristics of the IoT environments and resource limitations of the devices introduce challenges to the orchestration of the mist platform resources. In this paper, we present a hybrid resource discovery solution for mist, based on the IETF CoRE Resource Directories deployed as containerized Microservices to the supporting edge devices. This way the directory instances can be deployed on-demand as part of the edge platform, where each instance serves a mist network connected to the hosting edge device. This enables low latency resource queries at one-hop distance for the mist applications. At the edge layer, the directories form a distributed discovery infrastructure, connecting resources in disparate mist networks with each other and cloud and edge applications. A real-world prototype of such discovery infrastructure is implemented, based on low resource edge devices hosting the directory instances and low-power embedded devices as the mist resource servers and clients. The prototype is evaluated with latency and power consumption measurements, where the results show that discovery latency is as low as half a millisecond with a low power consumption.},
keywords = {embedded systems;grid computing;Internet of Things;peer-to-peer computing;resource allocation;Web services;},
note = {latency resource queries;mist applications;edge layer;distributed discovery infrastructure;disparate mist networks;cloud;edge applications;low resource edge devices;directory instances;low-power embedded devices;mist resource servers;edge-supported microservice-based Resource discovery;mist computing;Internet of Things;IoT devices;IoT environments;resource limitations;mist platform resources;hybrid resource discovery solution;IETF CoRE Resource Directories;containerized Microservices;supporting edge devices;edge platform;mist network;hosting edge device;},
URL = {http://dx.doi.org/10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00087},
}


@inproceedings{18888839 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Attributes Assessing the Quality of Microservices Automatically Decomposed from Monolithic Applications},
journal = {2019 18th International Symposium on Parallel and Distributed Computing (ISPDC). Proceedings},
author = {Cojocaru, M.-D. and Uta, A. and Oprescu, A.-M.},
year = {2019//},
pages = {84 - 93},
address = {Los Alamitos, CA, USA},
abstract = {The architectural styles in the world of software development are constantly evolving. Recently the microservice architecture is gaining more and more traction, building on concepts of Service Oriented Architecture (SOA) and steering further away from monolithic architectures. Emerged from agile communities, the microservice oriented architecture implies a number of small-sized microservices independently deployable. The adoption of microservices as the base for creating enterprise applications is certain, yet many companies intend to migrate from the old monolithic style instead of creating new products mainly due to cost related implications as well as challenging and complex tasks. Several tools and approaches for the semi-automatic decomposition of monolithic applications to microservices have emerged, yet many of them still struggle to verify the result of such process, the architect being indispensable for assessing the output microservices. Although this area is intensely studied, no unanimously accepted and clear guidelines for defining a good microservice exist. This survey focuses on providing a comprehensive and broadly applicable set of quality assessment criteria for microservices resulted from semi-automatic migration tools or techniques. Our study aligns with industry requirements, including a case study which further validates our set of quality attributes. In the refinement step of the quality attributes set, the prospect of automating the process of validation is also discussed.},
keywords = {service-oriented architecture;Web services;},
note = {broadly applicable set;quality assessment criteria;quality attributes set;monolithic applications;architectural styles;microservice architecture;monolithic architectures;microservice oriented architecture;small-sized microservices;enterprise applications;old monolithic style;semiautomatic decomposition;SOA;},
URL = {http://dx.doi.org/10.1109/ISPDC.2019.00021},
}


@inproceedings{19213621 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Microservices Migration in Industry: Intentions, Strategies, and Challenges},
journal = {2019 IEEE International Conference on Software Maintenance and Evolution (ICSME). Proceedings},
author = {Fritzsch, J. and Bogner, J. and Wagner, S. and Zimmermann, A.},
year = {2019//},
pages = {481 - 90},
address = {Los Alamitos, CA, USA},
abstract = {To remain competitive in a fast changing environment, many companies started to migrate their legacy applications towards a Microservices architecture. Such extensive migration processes require careful planning and consideration of implications and challenges likewise. In this regard, hands-on experiences from industry practice are still rare. To fill this gap in scientific literature, we contribute a qualitative study on intentions, strategies, and challenges in the context of migrations to Microservices. We investigated the migration process of 14 systems across different domains and sizes by conducting 16 in-depth interviews with software professionals from 10 companies. Along with a summary of the most important findings, we present a separate discussion of each case. As primary migration drivers, maintainability and scalability were identified. Due to the high complexity of their legacy systems, most companies preferred a rewrite using current technologies over splitting up existing code bases. This was often caused by the absence of a suitable decomposition approach. As such, finding the right service cut was a major technical challenge, next to building the necessary expertise with new technologies. Organizational challenges were especially related to large, traditional companies that simultaneously established agile processes. Initiating a mindset change and ensuring smooth collaboration between teams were crucial for them. Future research on the evolution of software systems can in particular profit from the individual cases presented.},
keywords = {business data processing;groupware;organisational aspects;software architecture;software maintenance;software prototyping;},
note = {Microservices migration;fast changing environment;legacy applications;Microservices architecture;extensive migration processes;careful planning;hands-on experiences;industry practice;scientific literature;qualitative study;migration process;in-depth interviews;software professionals;important findings;separate discussion;primary migration drivers;maintainability;legacy systems;splitting up existing code bases;suitable decomposition approach;technical challenge;organizational challenges;traditional companies;agile processes;mindset change;ensuring smooth collaboration;software systems;},
URL = {http://dx.doi.org/10.1109/ICSME.2019.00081},
}


@article{19295325 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {A Decomposition and Metric-Based Evaluation Framework for Microservices [arXiv]},
journal = {arXiv},
journal = {arXiv (USA)},
author = {Taibi, D. and Systa, K.},
year = {2019/08/22},
pages = {17 pp. - },
address = {USA},
abstract = {Migrating from monolithic systems into microservice is a very complex task. Companies are commonly decomposing the monolithic system manually, analyzing dependencies of the monolith and then assessing different decomposition options. The goal of our work is two-folded: 1) we provide a microservice measurement framework to objectively evaluate and compare the quality of microservices-based systems; 2) we propose a decomposition system based on business process mining. The microservice measurement framework can be applied independently from the decomposition process adopted, but is also useful to continuously evaluate the architectural evolution of a system. Results show that the decomposition framework helps companies to easily identify the different decomposition options. The measurement framework can help to decrease the subjectivity of the decision between different decomposition options and to evaluate architectural erosion in existing systems. [Communications in Computer and Information Science 2020. (under review)].},
keywords = {business data processing;data mining;service-oriented architecture;software architecture;},
note = {monolithic system;complex task;monolith;different decomposition options;microservice measurement framework;microservices-based systems;decomposition system;business process mining;decomposition process;decomposition framework;},
}


@inproceedings{19012803 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Analysis of the Criteria Adopted in Industry to Extract Microservices},
journal = {2019 IEEE/ACM Joint 7th International Workshop on Conducting Empirical Studies in Industry (CESI) and 6th International Workshop on Software Engineering Research and Industrial Practice (SER&amp;IP). Proceedings},
author = {Carvalho, L. and Garcia, A. and Assuncao, W.K.G. and de Mello, R. and Julia de Lima, M.},
year = {2019//},
pages = {22 - 9},
address = {Los Alamitos, CA, USA},
abstract = {A microservice architecture is expected to provide a better modularization and management of small and autonomous services. Other expected benefits include increased availability and time to market. There is a growing interest of both industry and academia on streamlining the migration of existing systems to a microservice architecture. However, the success of this migration is largely dependent on the use of appropriate criteria for extracting microservices from a code base. Recent studies indicate the selection and decomposition of microservices represent the main challenge along the migration. Academic techniques tend to support the extraction of microservices with either one or two conventional criteria, namely coupling and cohesion. There is limited knowledge on the criteria actually considered as useful by practitioners. Thus, we have performed an exploratory online survey with 15 specialists experienced on migrating systems to a microservices architecture. In particular, we question the relative usefulness of seven possible criteria for supporting decision-making along microservice extraction. The participants were also questioned about tools they have used, their limitations, and whether the decisions on extracted microservices were considered unsuccessful. Overall, the survey results suggest academic techniques do not totally satisfy the needs of practitioners. Practitioners often need to consider simultaneously at least four dominant criteria as well as their trade-offs to support their decisions. Most practitioners consider existing tooling support insufficient or even irrelevant to support their microservice extraction decisions.},
keywords = {decision making;software architecture;},
note = {autonomous services;decision making;microservice extraction decisions;migrating systems;academic techniques;microservice architecture;},
URL = {http://dx.doi.org/10.1109/CESSER-IP.2019.00012},
}


@inproceedings{18977198 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Tool Support for the Migration to Microservice Architecture: An Industrial Case Study},
journal = {Software Architecture. 13th European Conference, ECSA 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11681)},
author = {Pigazzini, I. and Arcelli Fontana, F. and Maggioni, A.},
year = {2019//},
pages = {247 - 63},
address = {Cham, Switzerland},
abstract = {With the introduction of microservice architecture, many investigate how to migrate their legacy systems into this architectural paradigm. The migration process requires the recovery of the project architecture to be migrated together with the knowledge necessary to understand how to decompose the code and obtain new microservices. At the moment, this process is realized mostly manually. This paper introduces an approach to identify candidate microservices in monolithic Java projects, implemented in a tool named Arcan and the validation of the approach in an industrial setting. The approach involves static analysis of the system architecture, architectural smell detection and topic detection, a text mining method used here to model software domains starting from code analysis. We report the feedbacks we get from an experienced industrial developer who carried out the migration described in the case study. From this collaboration with industry we collected useful information to enhance the approach, improve the tool and replicate the study.},
keywords = {data mining;Java;object-oriented programming;program diagnostics;service-oriented architecture;software maintenance;text analysis;},
note = {monolithic Java projects;industrial setting;system architecture;architectural smell detection;topic detection;code analysis;experienced industrial developer;tool support;microservice architecture;legacy systems;architectural paradigm;migration process;project architecture;candidate microservices;text mining method;},
URL = {http://dx.doi.org/10.1007/978-3-030-29983-5_17},
}


@inproceedings{19300252 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {MicroValid: a validation framework for automatically decomposed microservices},
journal = {2019 IEEE International Conference on Cloud Computing Technology and Science (CloudCom). Proceedings},
author = {Cojocaru, M. and Uta, A. and Oprescu, A.-M.},
year = {2019//},
pages = {78 - 86},
address = {Los Alamitos, CA, USA},
abstract = {In a dynamic world of software development, the architectural styles are continuously evolving, adapting to new technologies and trends. Microservice architecture (MSA) is gaining adoption among industry practitioners due to its advantages compared to the monolithic architecture. Although MSA builds on the core concepts of Service Oriented Architecture (SOA), it pushes for a finer granularity, with stricter boundaries. Due to cost rationale, numerous companies choose to migrate from the monolithic style instead of developing from scratch. Recently, semi-automatic decomposition tools assist the migration process, yet a crucial part is still missing: validation. The current study focuses on providing a validation framework for microservices decomposed from monolithic applications and complete the puzzle of architectural migrations. From previous work we select quality attributes of microservices that may be assessed using static analysis. We then provide an implementation specification of the validation framework. We use five applications to evaluate our approach, and the results show that our solution is scalable while providing insightful measurements of the assessed quality attributes of microservices.},
keywords = {service-oriented architecture;software architecture;},
note = {architectural migrations;software development;architectural styles;microservice architecture;MSA;monolithic architecture;SOA;monolithic style;semiautomatic decomposition tools;MicroValid;service oriented architecture;},
URL = {http://dx.doi.org/10.1109/CloudCom.2019.00023},
}


@article{19033814 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Microservices migration in industry: intentions, strategies, and challenges [arXiv]},
journal = {arXiv},
journal = {arXiv (USA)},
author = {Fritzsch, J. and Bogner, J. and Wagner, S. and Zimmermann, A.},
year = {2019/06/11},
pages = {11 pp. - },
address = {USA},
abstract = {To remain competitive in a fast changing environment, many companies started to migrate their legacy applications towards a Microservices architecture. Such extensive migration processes require careful planning and consideration of implications and challenges likewise. In this regard, handson experiences from industry practice are still rare. To fill this gap in scientific literature, we contribute a qualitative study on intentions, strategies, and challenges in the context of migrations to Microservices. We investigated the migration process of 14 systems across different domains and sizes by conducting 16 indepth interviews with software professionals from 10 companies. We present a separate description of each case and summarize the most important findings. As primary migration drivers, maintainability and scalability were identified. Due to the high complexity of their legacy systems, most companies preferred a rewrite using current technologies over splitting up existing code bases. This was often caused by the absence of a suitable decomposition approach. As such, finding the right service cut was a major technical challenge, next to building the necessary expertise with new technologies. Organizational challenges were especially related to large, traditional companies that simultaneously established agile processes. Initiating a mindset change and ensuring smooth collaboration between teams were crucial for them. Future research on the evolution of software systems will in particular profit from the individual cases presented.},
keywords = {software maintenance;software prototyping;},
note = {legacy applications;migration process;maintainability;legacy systems;agile processes;software systems;microservice migration;},
}


@inproceedings{19122332 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Availability and Scalability Optimized Microservice Discovery from Enterprise Systems},
journal = {On the Move to Meaningful Internet Systems. OTM 2019 Conferences. Confederated International Conferences: CoopIS, ODBASE, C&amp;TC 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11877)},
author = {Alwis, A.A.C. and Barros, A. and Fidge, C. and Polyvyanyy, A.},
year = {2019//},
pages = {496 - 514},
address = {Cham, Switzerland},
abstract = {Microservices have been introduced to industry as a novel architectural design for software development in cloud-based applications. This development has increased interest in finding new methodologies to migrate existing enterprise systems into microservices to achieve desirable performance characteristics such as high scalability, high availability, high cohesion and low coupling. A key challenge in this context is discovering microserviceable components with promising characteristics from a complex monolithic code base while predicting their resulting characteristics. This paper presents a technique to support such re-engineering of an enterprise system based on the fundamental mechanisms for structuring its architecture, i.e., business objects managed by software functions and their interactions. The technique relies on queuing theory and business object relationship analysis. A prototype for microservice discovery and characteristic analysis was developed using the NSGA II software clustering and optimization technique and has been validated against two open-source enterprise systems, SugarCRM and ChurchCRM. Our experiments demonstrate that the proposed approach can recommend microservice design which improves scalability, availability and execution efficiency of the system while achieving high cohesion and low coupling in software modules.},
keywords = {business data processing;cloud computing;optimisation;public domain software;queueing theory;software architecture;software maintenance;},
note = {complex monolithic code base;resulting characteristics;enterprise system;business objects;software functions;business object relationship analysis;microservice discovery;optimization technique;open-source enterprise systems;microservice design;execution efficiency;high cohesion;low coupling;software modules;microservices;novel architectural design;software development;cloud-based applications;existing enterprise systems;desirable performance characteristics;microserviceable components;promising characteristics;},
URL = {http://dx.doi.org/10.1007/978-3-030-33246-4_31},
}


@inproceedings{19694559 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {An Experience Report from the Migration of Legacy Software Systems to Microservice Based Architecture},
journal = {16th International Conference on Information Technology-New Generations (ITNG 2019). Advances in Intelligent Systems and Computing (AISC 800)},
author = {Silva, H.H.S. and Carneiro, G.F. and Monteiro, M.P.},
year = {2019//},
pages = {183 - 9},
address = {Cham, Switzerland},
abstract = {        <i>Context:</i> The literature provides evidence of challenges and difficulties related to the migration of legacy software systems to a microservice based architecture. The idea of microservices stipulates that the software be organized as a suite of small, modular, and independently deployed services, in which each service runs on its own process and communicates through well-defined, lightweight mechanisms to serve a business goal. However, the literature lacks step-by-step guidelines telling practitioners how to accomplish the migration from an existing, monolithic structure to a microservice based architecture. <i>Goal:</i> Discuss lessons learned from the migration of legacy software systems to microservices-based architecture. <i>Method:</i> We conducted two studies (a pilot and a case study) aiming at characterizing the relevants steps of such guidelines. <i>Results:</i> We report the steps and challenges observed during the migration reported in this study. <i>Conclusion:</i> We identify at least three main phases that drive the migration process.},
keywords = {program testing;service-oriented architecture;software maintenance;},
note = {legacy software systems;microservice based architecture;independently deployed services;step-by-step guidelines;microservices-based architecture;migration process;modular deployed services;lightweight mechanisms;monolithic structure;},
URL = {http://dx.doi.org/10.1007/978-3-030-14070-0_26},
}


@inproceedings{18432967 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {From Monolith to Microservices: A Classification of Refactoring Approaches},
journal = {Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment. First International Workshop, DEVOPS 2018. Revised Selected Papers: Lecture Notes in Computer Science (LNCS 11350)},
author = {Fritzsch, J. and Bogner, J. and Zimmermann, A. and Wagner, S.},
year = {2019//},
pages = {128 - 41},
address = {Cham, Switzerland},
abstract = {While the recently emerged Microservices architectural style is widely discussed in literature, it is difficult to find clear guidance on the process of refactoring legacy applications. The importance of the topic is underpinned by high costs and effort of a refactoring process which has several other implications, e.g. overall processes (DevOps) and team structure. Software architects facing this challenge are in need of selecting an appropriate strategy and refactoring technique. One of the most discussed aspects in this context is finding the right service granularity to fully leverage the advantages of a Microservices architecture. This study first discusses the notion of architectural refactoring and subsequently compares 10 existing refactoring approaches recently proposed in academic literature. The approaches are classified by the underlying decomposition technique and visually presented in the form of a decision guide for quick reference. The review yielded a variety of strategies to break down a monolithic application into independent services. With one exception, most approaches are only applicable under certain conditions. Further concerns are the significant amount of input data some approaches require as well as limited or prototypical tool support.},
keywords = {software architecture;software maintenance;software prototyping;},
note = {refactoring approaches;decomposition technique;refactoring process;monolithic application;architectural refactoring;Microservices architecture;service granularity;refactoring technique;software architects;},
URL = {http://dx.doi.org/10.1007/978-3-030-06019-0_10},
}


@inproceedings{19358656 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Automatic Performance Monitoring and Regression Testing During the Transition from Monolith to Microservices},
journal = {2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW). Proceedings},
author = {Janes, A. and Russo, B.},
year = {2019//},
pages = {163 - 8},
address = {Los Alamitos, CA, USA},
abstract = {The transition from monolith to microservices poses several challenges, like how to redistribute the features of system over different microservices. During the transition, developers may also redesign or rethink system services significantly, which can have a strong impact on various quality aspects of the resulting system. Thus, the new system may be more or less performing depending on the ability of the developers to design microservices and the capability of the microservice architecture to represent the system. Overall, a transition to microservices may or may not end up with the same or a better performing system. One way to control the migration to microservices is to continuously monitor a system by continuously collecting performance data and feeding the resulting data analysis back in the transition process. In DevOps, such continuous feedback can be exploited to re-tune the development and deployment of system's builds. In this paper, we present PPTAM+, a tool to continuously assess the degradation of a system during a transition to microservices. In an in-production system, the tool can continuously monitor each microservice and provide indications of lost performance and overall degradation. The system is designed to be integrated in a DevOps process. The tool automates the whole process from collecting data for building the reference operational profile to streamline performance data and automatically adapt and regress performance tests on each build based the analysis' feedback obtained from tests of the previous build.},
keywords = {cloud computing;data privacy;distributed databases;program testing;software performance evaluation;},
note = {automatic performance monitoring;system services;microservice architecture;performing system;performance data;transition process;in-production system;performance tests;},
URL = {http://dx.doi.org/10.1109/ISSREW.2019.00067},
}


@inproceedings{19142128 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Towards Automated Microservices Extraction Using Muti-objective Evolutionary Search},
journal = {Service-Oriented Computing. 17th International Conference, ICSOC 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11895)},
author = {Saidani, I. and Ouni, A. and Mkaouer, M.W. and Saied, A.},
year = {2019//},
pages = {58 - 63},
address = {Cham, Switzerland},
abstract = {We introduce in this paper a novel approach, named MSExtractor, that formulate the microservices identification problem as a multi-objective combinatorial optimization problem to decompose a legacy application into a set of cohesive, loosely-coupled and coarse-grained services. We employ the non-dominated sorting genetic algorithm (NSGA-II) to drive a search process towards optimal microservices identification while considering structural dependencies in the source code. We conduct an empirical evaluation on a benchmark of two open-source legacy software systems to assess the efficiency of our approach. Results show that MSExtractor is able to find relevant microservice candidates and outperforms recent three state-of-the-art approaches.},
keywords = {combinatorial mathematics;evolutionary computation;public domain software;search problems;software maintenance;sorting;},
note = {optimal microservice identification problem;loosely-coupled services;automated microservice extraction;MSExtractor;mutiobjective evolutionary search;open-source legacy software systems;structural dependencies;search process;NSGA-II;nondominated sorting genetic algorithm;coarse-grained services;multiobjective combinatorial optimization problem;},
URL = {http://dx.doi.org/10.1007/978-3-030-33702-5_5},
}


@article{18841298 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Microservice Transition and its Granularity Problem: A Systematic Mapping Study [arXiv]},
journal = {arXiv},
journal = {arXiv (USA)},
author = {Hassan, S. and Bahsoon, R. and Kazman, R.},
year = {2019/03/27},
pages = {36 pp. - },
address = {USA},
abstract = {Microservices have gained wide recognition and acceptance in software industries as an emerging architectural style for autonomic, scalable, and more reliable computing. The transition to microservices has been highly motivated by the need for better alignment of technical design decisions with improving value potentials of architectures. Despite microservices' popularity, research still lacks disciplined understanding of transition and consensus on the principles and activities underlying "micro-ing" architectures. In this paper, we report on a systematic mapping study that consolidates various views, approaches and activities that commonly assist in the transition to microservices. The study aims to provide a better understanding of the transition; it also contributes a working definition of the transition and technical activities underlying it. We term the transition and technical activities leading to microservice architectures as microservitization. We then shed light on a fundamental problem of microservitization: microservice granularity and reasoning about its adaptation as first-class entities. This study reviews state-of-the-art and -practice related to reasoning about microservice granularity; it reviews modelling approaches, aspects considered, guidelines and processes used to reason about microservice granularity. This study identifies opportunities for future research and development related to reasoning about microservice granularity.},
keywords = {DP industry;granular computing;software architecture;software prototyping;},
note = {software industries;microservitization;systematic mapping study;scalable computing;autonomic computing;emerging architectural style;acceptance;granularity problem;microservice transition;microservice granularity;microservice architectures;technical activities;},
}


@inproceedings{19694544 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Strategies Reported in the Literature to Migrate to Microservices Based Architecture},
journal = {16th International Conference on Information Technology-New Generations (ITNG 2019). Advances in Intelligent Systems and Computing (AISC 800)},
author = {Cardoso da Silva Filho, H. and de Figueiredo Carneiro, G.},
year = {2019//},
pages = {575 - 80},
address = {Cham, Switzerland},
abstract = {Context: Microservice-oriented architecture relies on the implementation and deployment of small and autonomous microservices, rather than implementing the functionalities in one unique module to be deployed. They have been adopted as a solution to the shortcomings of the monolithic architecture such as lack of flexibility. Goal: This paper discusses lessons learned and challenges reported in the literature regarding the migration of legacy monolithic software systems to microservices based architecture. Method: We performed an automated search targeting public repositories to accomplish the stated goal. Results: Based on the evidence provided by 12 studies, we classified main findings in lessons learned related to the migration, as well as associated difficulties and challenges. Conclusions: the guidelines to migrate to microservices based architecture are maturing/evolving and the literature has pinpointed issues that deserve further investigation.},
keywords = {service-oriented architecture;software engineering;Web services;},
note = {microservice based architecture;autonomous microservices;monolithic architecture;legacy monolithic software systems;public repositories;},
URL = {http://dx.doi.org/10.1007/978-3-030-14070-0_81},
}


@inproceedings{17879698 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Performance evaluation in the migration process from a monolithic application to microservices},
journal = {2018 13th Iberian Conference on Information Systems and Technologies (CISTI)},
author = {Guaman, D. and Yaguachi, L. and Samanta, C.C. and Danilo, J.H. and Soto, F.},
year = {2018//},
pages = {8 pp. - },
address = {Piscataway, NJ, USA},
abstract = {Microservices are considered as a software architecture that allows the decomposition of a system, its components or its functionalities into a set of small services, which are implemented, deployed and managed independently. In this study, the models that allow migrating a Monolith to Microservices such as NGINX and IBM are analyzed. From these models, activities that allow such migration are carefully selected and identified. In order to implement and evaluate the activities proposed in those models, an application that initially does not have any structure at the design and coding level (using PHP programming language) is applied. Then, the application's coding language changes to Java and the classes and libraries are distributed into packages. Subsequently, as it is suggested in the models, services are identified and implemented using RESTful Web Services to finally implement the microservices using technologies such as Spring Boot, Eureka, and Zuul. In the migration process, the application under study is modified at the code and design level, including patterns such as Singleton, Fa&#231;ade, Strangler, Single Service per Host, Service Discovery, and API Gateway, which are used to evaluate performance as a quality attribute in each migration phase. In order to obtain the performance related metrics and to analyze the advantages and disadvantages of each migration phase, Apache JMeter as tool is used. This tool is set up to generate results regarding the use of resources such as CPU, memory, network, and database access. Finally, the results show scenarios of several concurrent users who access to consult records in the database that uses the aforementioned application in each migration phase.},
keywords = {Java;service-oriented architecture;software performance evaluation;Web services;},
note = {design level;migration phase;performance related metrics;performance evaluation;migration process;monolithic application;microservices;software architecture;Monolith;coding level;PHP programming language;coding language;RESTful Web Services;system decomposition;Java;API Gateway;},
URL = {http://dx.doi.org/10.23919/CISTI.2018.8399148},
}


@inproceedings{18740347 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Migrating Legacy Software to Microservices Architecture},
journal = {2019 Open Conference of Electrical, Electronic and Information Sciences (eStream). Proceedings},
author = {Kazanavicius, J. and Mazeika, D.},
year = {2019//},
pages = {5 pp. - },
address = {Piscataway, NJ, USA},
abstract = {As a legacy monolithic software become too large to deal with, many enterprises are drawn to breaking them down into the microservices architectural style. Migrating a monolithic architecture to an ecosystem of microservices is an epic journey. Each legacy monolithic application is unique and migration to microservices creates different challenges. This article elaborates on challenges and technics of legacy software migration from monolithic architecture to microservice architecture. Different migration methods and techniques are reviewed, and their benefits and drawbacks are analyzed. Microservices is a relatively new architectural style and legacy monoliths are very different in many aspects. Existing migration techniques and methods do not cover every use case.},
keywords = {service-oriented architecture;software maintenance;},
note = {migrating legacy software;microservices architecture;legacy monolithic software;microservices architectural style;monolithic architecture;legacy monolithic application;legacy software migration;microservice architecture;relatively new architectural style;legacy monoliths;migration techniques;migration methods;},
URL = {http://dx.doi.org/10.1109/eStream.2019.8732170},
}


@inproceedings{19297445 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Migrating from monolithic architecture to microservices: A Rapid Review},
journal = {2019 38th International Conference of the Chilean Computer Science Society (SCCC)},
author = {Ponce, F. and Marquez, G. and Astudillo, H.},
year = {2019//},
pages = {7 pp. - },
address = {Piscataway, NJ, USA},
abstract = {Microservices architecture has become enormously popular because traditional monolithic architectures no longer meet the needs of scalability and rapid development cycle, and the success of some large companies in building and deploying services is a strong motivation for others to consider making the change. However, performing the migration process is not trivial. Most systems acquire too many dependencies between their modules, and thus can't be sensibly broken apart. It is for this reason that studies that provide information associated with the migration process to practitioners are necessary. This study gathers, organizes and analyzes 20 migration techniques proposed in the literature. Results show that most proposals use approaches based on design elements as input; 90% of the proposals were applied to object-oriented software (Java being the predominant programming language); And that the main challenge is to perform the database migration.},
keywords = {database management systems;Java;object-oriented programming;software architecture;},
note = {microservices architecture;database migration;monolithic architecture;object-oriented software;Java;},
URL = {http://dx.doi.org/10.1109/SCCC49216.2019.8966423},
}


@inproceedings{19213612 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Assuring the Evolvability of Microservices: Insights into Industry Practices and Challenges},
journal = {2019 IEEE International Conference on Software Maintenance and Evolution (ICSME). Proceedings},
author = {Bogner, J. and Fritzsch, J. and Wagner, S. and Zimmermann, A.},
year = {2019//},
pages = {546 - 56},
address = {Los Alamitos, CA, USA},
abstract = {While Microservices promise several beneficial characteristics for sustainable long-term software evolution, little empirical research covers what concrete activities industry applies for the evolvability assurance of Microservices and how technical debt is handled in such systems. Since insights into the current state of practice are very important for researchers, we performed a qualitative interview study to explore applied evolvability assurance processes, the usage of tools, metrics, and patterns, as well as participants' reflections on the topic. In 17 semi-structured interviews, we discussed 14 different Microservice-based systems with software professionals from 10 companies and how the sustainable evolution of these systems was ensured. Interview transcripts were analyzed with a detailed coding system and the constant comparison method. We found that especially systems for external customers relied on central governance for the assurance. Participants saw guidelines like architectural principles as important to ensure a base consistency for evolvability. Interviewees also valued manual activities like code review, even though automation and tool support was described as very important. Source code quality was the primary target for the usage of tools and metrics. Despite most reported issues being related to Architectural Technical Debt (ATD), our participants did not apply any architectural or service-oriented tools and metrics. While participants generally saw their Microservices as evolvable, service cutting and finding an appropriate service granularity with low coupling and high cohesion were reported as challenging. Future Microservices research in the areas of evolution and technical debt should take these findings and industry sentiments into account.},
keywords = {project management;service-oriented architecture;software development management;software maintenance;software quality;},
note = {semistructured interviews;microservice-based systems;software professionals;sustainable evolution;interview transcripts;constant comparison method;manual activities;code review;source code quality;architectural technical debt;evolvable service cutting;industry sentiments;long-term software evolution;concrete activities industry;evolvability assurance processes;participants reflections;service-oriented tools;},
URL = {http://dx.doi.org/10.1109/ICSME.2019.00089},
}


@inproceedings{18671948 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Functional-first recommendations for beneficial microservices migration and integration lessons learned from an industrial experience},
journal = {2019 IEEE International Conference on Software Architecture Companion (ICSA-C). Proceedings},
author = {Gouigoux, J.-P. and Tamzalit, D.},
year = {2019//},
pages = {182 - 6},
address = {Los Alamitos, CA, USA},
abstract = {MGDIS is a French software development company which successfully migrated her monolith application towards a microservices architecture. This migration was due to a major strategic and technical change and needed an investment of 17 300 person.days over three years. While some results were initially targeted, others were not expected at all. However, with hindsight following an afterward in-depth analysis, they eventually proved to be unexpected best-practices that should be adopted for successful microservices adoption. These lessons learned are outlined following four crucial aspects: functional approach, norms and standards, microservices granularity and their semantics, and finally technical and integration outcomes.},
keywords = {DP industry;recommender systems;software architecture;software development management;Web services;},
note = {in-depth analysis;functional approach;microservices granularity;Functional-first recommendations;beneficial microservices migration;integration lessons;industrial experience;MGDIS;French software development company;microservices architecture;standards;norms;},
URL = {http://dx.doi.org/10.1109/ICSA-C.2019.00040},
}


@article{19034005 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Assuring the Evolvability of Microservices: Insights into Industry Practices and Challenges [arXiv]},
journal = {arXiv},
journal = {arXiv (USA)},
author = {Bogner, J. and Fritzsch, J. and Wagner, S. and Zimmermann, A.},
year = {2019/06/12},
pages = {11 pp. - },
address = {USA},
abstract = {While Microservices promise several beneficial characteristics for sustainable long-term software evolution, little empirical research covers what concrete activities industry applies for the evolvability assurance of Microservices and how technical debt is handled in such systems. Since insights into the current state of practice are very important for researchers, we performed a qualitative interview study to explore applied evolvability assurance processes, the usage of tools, metrics, and patterns, as well as participants' reflections on the topic. In 17 semi-structured interviews, we discussed 14 different Microservice-based systems with software professionals from 10 companies and how the sustainable evolution of these systems was ensured. Interview transcripts were analyzed with a detailed coding system and the constant comparison method. We found that especially systems for external customers relied on central governance for the assurance. Participants saw guidelines like architectural principles as important to ensure a base consistency for evolvability. Interviewees also valued manual activities like code review or boy scouting, even though automation and tool support was described as very important. Source code quality was the primary target for the usage of tools and metrics. Despite most reported issues being related to Architectural Technical Debt (ATD), our participants did not apply any architectural or service-oriented tools and metrics. While participants generally saw their Microservices as evolvable, service cutting and finding an appropriate service granularity with low coupling and high cohesion were reported as challenging. Future Microservices research in the areas of evolution and technical debt should take these findings and industry sentiments into account.},
keywords = {service-oriented architecture;software maintenance;software metrics;software quality;software tools;source code (software);},
note = {long-term software evolution;sustainable evolution;constant comparison method;code review;source code quality;architectural service-oriented tools;microservice-based systems;architectural technical debt;evolvability assurance processes;software professionals;software industry;boy scouting;software tools;software metrics;},
}


@inproceedings{18849613 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Implementation of Microservices Architecture for Application of Cyclooxygenase-2 Inhibitors Identifier},
journal = {Journal of Physics: Conference Series},
journal = {J. Phys., Conf. Ser. (UK)},
author = {Adi, P.S. and Istyastono, E.P.},
volume = { 1235},
year = {2019//},
pages = {012053 (5 pp.) - },
issn = {1742-6596},
address = {UK},
abstract = {The identification of drug compounds that react to the body&#8217;s cells is known as structure screening. This process can be assisted by a computer known as Structure-Based Virtual Screening (SBVS). This virtual screening process has been carried out by Istyastono for Cyclooxygenase-2 (COX-2). The screening process that has been carried out needs to be documented so that researchers can utilize for further research. Web-based applications with microservices architecture were chosen to develop a means of compound documentation because this application will be developed by bringing together two platforms, web and Linux shell script. An urgent need for this application to be built with the microservices architecture is the speed of application development for other enzymes based on this application. Application consist of web user interface, web service, data access and compound table. These components are mutually independent. Based on the results of implementation and discussion, the microservices architecture has provided guidance in developing applications so that applications are quickly built and easy to maintain and develop. It can be done because application is developed independently of each other.},
keywords = {drugs;enzymes;inhibitors;medical computing;molecular biophysics;user interfaces;Web services;},
note = {microservices architecture;drug compounds;virtual screening process;web-based applications;web user interface;web service;data access;compound table;structure-based virtual screening;cyclooxygenase-2 inhibitors identifier;},
URL = {http://dx.doi.org/10.1088/1742-6596/1235/1/012053},
}


@article{18572912 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Microservices migration patterns},
journal = {Software: Practice and Experience},
journal = {Softw., Pract. Exp. (USA)},
author = {Balalaie, A. and Heydarnoori, A. and Jamshidi, P. and Tamburri, D.A. and Lynn, T.},
volume = { 48},
number = { 11},
year = {2018/11/},
pages = {2019 - 42},
issn = {0038-0644},
address = {USA},
abstract = {Microservices architectures are becoming the defacto standard for building continuously deployed systems. At the same time, there is a substantial growth in the demand for migrating on-premise legacy applications to the cloud. In this context, organizations tend to migrate their traditional architectures into cloud-native architectures using microservices. This article reports a set of migration and rearchitecting design patterns that we have empirically identified and collected from industrial-scale software migration projects. These migration patterns can help information technology organizations plan their migration projects toward microservices more efficiently and effectively. In addition, the proposed patterns facilitate the definition of migration plans by pattern composition. Qualitative empirical research is used to evaluate the validity of the proposed patterns. Our findings suggest that the proposed patterns are evident in other architectural refactoring and migration projects and strong candidates for effective patterns in system migrations.},
keywords = {cloud computing;object-oriented programming;project management;software architecture;software maintenance;},
note = {system migrations;microservices migration patterns;microservices architectures;defacto standard;on-premise legacy applications;cloud-native architectures;industrial-scale software migration projects;information technology organizations;migration plans;pattern composition;qualitative empirical research;architectural refactoring;continuously deployed systems;on-premise legacy application migration;design pattern rearchitecting;},
URL = {http://dx.doi.org/10.1002/spe.2608},
}


@article{18213818 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Matrix Clustering based Migration of System Application to Microservices Architecture},
journal = {International Journal of Advanced Computer Science and Applications},
journal = {Int. J. Adv. Comput. Sci. Appl. (USA)},
author = {Ghayyur, S.A.K. and Ullah, S. and Razzaq, A. and Ahmed, S.},
volume = { 9},
number = { 1},
year = {2018/01/},
pages = {284 - 96},
issn = {2156-5570},
address = {USA},
abstract = {A microservice architecture (MSA) style is an emerging approach which is gaining strength with the passage of time. Micro services are recommended by a number of researchers to overcome the limitations and issues encountered by usage of aging method of monolithic architecture styles. Previously the monolithic applications cannot be decomposed into smaller and different services. Monolithic styles application was the one build application. The issue resolution has the focus on lightweight independent application services in the form of sizable services, self-contained units with primary focus on maintenance, performance, scalability, and online services eliminating dependency. All quality factors have been thoroughly discussed in literature, system application migration is becoming an emerging issue with different challenges. This study is addressing the tight coupling to reducing this issue. Moreover, this literature review indicates some complex problems about the migration or conversion of system application into microservice. In architecture, dependency is a big challenge and issue in recent technology. Microservices are recommended by a number of researchers to overcome the limitations issue about how to migrate the existing system application to microservice. The need for a systematic mapping is essential in order to recap the improvement and identify the gaps and requirements for future studies. This study shows open issues first, new findings of quality attributes of microservices and then this study helps to understand the difference between previous traditional systems and microservices based systems. This research study creates awareness about system migration to microservices.},
keywords = {service-oriented architecture;software architecture;Web services;},
note = {monolithic styles application;lightweight independent application services;system application migration;system migration;microservice architecture style;monolithic architecture styles;monolithic applications;online services;matrix clustering based migration;},
}


@article{17736461 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Migrating Enterprise Legacy Source Code to Microservices: On Multitenancy, Statefulness, and Data Consistency},
journal = {IEEE Software},
journal = {IEEE Softw. (USA)},
author = {Furda, A. and Fidge, C. and Zimmermann, O. and Kelly, W. and Barros, A.},
volume = { 35},
number = { 3},
year = {2018/05/},
pages = {63 - 72},
issn = {0740-7459},
address = {USA},
abstract = {Microservice migration is a promising technique to incrementally modernize monolithic legacy enterprise applications and enable them to exploit the benefits of cloud-computing environments. This article elaborates on three challenges of microservice migration: multitenancy, statefulness, and data consistency. The authors show how to identify each of these challenges in legacy code and explain refactoring and architectural pattern-based migration techniques relevant to microservice architectures. They explain how multitenancy enables microservices to be utilized by different organizations with distinctive requirements, why statefulness affects both the availability and reliability of a microservice system, and why data consistency challenges are encountered when migrating legacy code that operates on a centralized data repository to microservices operating on decentralized data repositories. They also explain the interdependencies between multitenancy, statefulness, and data consistency.},
keywords = {business data processing;cloud computing;software architecture;software maintenance;},
note = {migrating enterprise legacy source code;microservice migration;monolithic legacy enterprise applications;cloud-computing environments;refactoring pattern-based migration techniques;architectural pattern-based migration techniques;microservice architectures;microservice system;data consistency challenges;migrating legacy code;decentralized data repositories;},
URL = {http://dx.doi.org/10.1109/MS.2017.440134612},
}


@inproceedings{18721543 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Extracting Candidates of Microservices from Monolithic Application Code},
journal = {2018 25th Asia-Pacific Software Engineering Conference (APSEC)},
author = {Kamimura, M. and Yano, K. and Hatano, T. and Matsuo, A.},
year = {2018//},
pages = {571 - 80},
address = {Los Alamitos, CA, USA},
abstract = {Technology that facilitates rapid modification of existing business applications is necessary and it has been reported that making the system more adaptable to change is the strongest driver for legacy system modernization. There has been considerable interest in service-oriented architectures or microservices which enables the system to be quickly changed. Refactoring and, in particular, re-modularization operations can be performed to repair the design of a software system. Various approaches have been proposed to support developers during the re-modularization of a software system. The common problem in these efforts is to identify from monolithic applications the candidates of microservices, i.e., the programs or data that can be turned into cohesive, standalone services; this is a tedious manual effort that requires analyzing many dimensions of software architecture views and often heavily relies on the experience and expertise of the expert performing the extraction. To solve this problem, we developed a method that identifies the candidates of microservices from the source code by using software clustering algorithm SArF with the relation of "program groups" and "data" which we defined. Our method also visualizes the extracted candidates to show the relationship between extracted candidates and the whole structure. The candidates and visualization help the developers to capture the overview of the whole system and facilitated a dialogue with customers. We report two case studies to evaluate our results in which we applied our method to an open source application and an industrial application with our results reviewed by developers.},
keywords = {data visualisation;pattern clustering;service-oriented architecture;software maintenance;},
note = {monolithic application code;business applications;legacy system modernization;service-oriented architectures;software system;monolithic applications;software architecture views;source code;open source application;SArF software clustering algorithm;remodularization operations;},
URL = {http://dx.doi.org/10.1109/APSEC.2018.00072},
}


@inproceedings{18237768 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Function-Splitting Heuristics for Discovery of Microservices in Enterprise Systems},
journal = {Service-Oriented Computing. 16th International Conference, ICSOC 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11236)},
author = {Alwis, A.A.C. and Barros, A. and Polyvyanyy, A. and Fidge, C.},
year = {2018//},
pages = {37 - 53},
address = {Cham, Switzerland},
abstract = {We present heuristics that help to identify suitable consumer-oriented parts of enterprise systems which could be re-engineered as microservices. Our approach assesses the key structural and behavioural properties common to both enterprise and microservice systems, as needed to guide a microservices discovery process and coherently assess restructuring recommendations. Building upon existing business object and system structural definitions, we present heuristics for two fundamental areas of microservice discovery, namely function splitting based on object subtypes (i.e., the lowest granularity of software based on structural properties) and functional splitting based on common execution fragments across software (i.e., the lowest granularity of software based on behavioural properties). A prototype analysis tool was developed based on the defined heuristics and experiments show that it can identify microservice designs which support multiple microservice characteristics, such as high cohesion, low coupling, high scalability, high availability, and processing efficiency while preserving coherent features of enterprise systems. In particular, we illustrate the usefulness of this new approach by conducting a case study based on customer management systems: SugarCRM and ChurchCRM.},
keywords = {business data processing;customer relationship management;data mining;object-oriented programming;organisational aspects;software architecture;},
note = {function-splitting heuristics;enterprise systems;suitable consumer-oriented parts;key structural properties;behavioural properties;microservice systems;microservices discovery process;business object;system structural definitions;microservice discovery;function splitting;lowest granularity;functional splitting;common execution fragments;defined heuristics;microservice designs;multiple microservice characteristics;customer management systems;},
URL = {http://dx.doi.org/10.1007/978-3-030-03596-9_3},
}


@inproceedings{18076502 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Object-Aware Identification of Microservices},
journal = {2018 IEEE International Conference on Services Computing (SCC). Proceedings},
author = {Amiri, M.J.},
year = {2018//},
pages = {253 - 6},
address = {Los Alamitos, CA, USA},
abstract = {Microservices is an architectural style inspired by service-oriented computing that structures an application as a collection of cohesive and loosely coupled components, which implement business capabilities. One of today&#8217;s problems in designing microservice architectures is to decompose a system into cohesive, loosely coupled, and fine-grained microservices. Identification of microservices is usually performed intuitively, based on the experience of the system designers, however, if the functionalities of a system are highly interconnected, it is a challenging task to decompose the system into appropriate microservices. To tackle this challenge, we present a microservice identification method that decomposes a system using clustering technique. To this end, we model a system as a set of business processes and take two aspects of structural dependency and data object dependency of functionalities into account. Furthermore, we conduct a study to evaluate the effect of process characteristics on the accuracy of identification approaches.},
keywords = {business data processing;service-oriented architecture;},
note = {microservice identification method;structural dependency;object-aware identification;architectural style;service-oriented computing;cohesive coupled components;loosely coupled components;business capabilities;microservice architectures;system designers;clustering technique;business processes;data object dependency;},
URL = {http://dx.doi.org/10.1109/SCC.2018.00042},
}


@inproceedings{18076567 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Functionality-Oriented Microservice Extraction Based on Execution Trace Clustering},
journal = {2018 IEEE International Conference on Web Services (ICWS). Proceedings},
author = {Wuxia Jin and Ting Liu and Qinghua Zheng and Di Cui and Yuanfang Cai},
year = {2018//},
pages = {211 - 18},
address = {Los Alamitos, CA, USA},
abstract = {The main task of microservice extraction is to find which software entities (e.g., methods, classes) should be grouped together from existing monolithic software as candidate microservices, responsible for specific functionalities and evolving independently. Current methods extract microservices by analyzing source code and following the assumption that "classes with strong relation should be in the same service", which originates from software structure analysis. We find that 1) many program behaviors cannot be explicitly reflected in the source code, and 2) the relation at code-level is not equivalent to the same functionality. Thus, we propose a functionality-oriented microservice extraction (FoME) method in this study by monitoring program dynamic behavior and clustering execution traces. Instead of source code analysis, the execution traces of a program are applied to group source code entities that are dedicated to the same functionality. We also construct a systematic measurement of microservice by integrating five complementary metrics of service cohesion and coupling. These metrics measure Functional Independence of microservices. That is, it qualifies whether a microservices can have its own responsibilities independently. In the experiment, our method is compared with three state-of-the-art methods on four open-source projects. The microservice candidates generated using our method present similar functional cohesion to the services produced using the other methods, but have considerably looser coupling measurements (dramatically reducing measurements of IRN and OPN).},
keywords = {pattern clustering;program diagnostics;public domain software;software architecture;software maintenance;software metrics;},
note = {execution trace clustering;Functional Independence;functional cohesion;microservice candidates;open-source projects;service cohesion;group source code entities;source code analysis;program dynamic behavior;functionality-oriented microservice extraction method;code-level;software structure analysis;specific functionalities;candidate microservices;monolithic software;software entities;},
URL = {http://dx.doi.org/10.1109/ICWS.2018.00034},
}


@inproceedings{18174560 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Discovering Microservices in Enterprise Systems Using a Business Object Containment Heuristic},
journal = {On the Move to Meaningful Internet Systems. OTM 2018 Conferences. Confederated International Conferences: CoopIS, C&amp;TC, and ODBASE 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11230)},
author = {Alwis, A.A.C. and Barros, A. and Fidge, C. and Polyvyanyy, A.},
volume = {pt.II},
year = {2018//},
pages = {60 - 79},
address = {Cham, Switzerland},
abstract = {The growing impact of IoT and Blockchain platforms on business applications has increased interest in leveraging large enterprise systems as Cloud-enabled microservices. However, large and monolithic enterprise systems are unsuitable for flexible integration with such platforms. This paper presents a technique to support the re-engineering of an enterprise system based on the fundamental mechanisms for structuring its architecture, i.e., business objects managed by software functions and their relationships which influence business object interactions via the functions. The technique relies on a heuristic for deriving business object exclusive containment relationships based on analysis of source code and system logs. Furthermore, the paper provides an analysis of distributing enterprise systems based on the business object containment relationships using the NSGA II software clustering and optimization technique. The heuristics and the software clustering and optimization techniques have been validated against two open-source enterprise systems: SugarCRM and ChurchCRM. The experiments demonstrate that the proposed approach can identify microservice designs which support multiple desired microservice characteristics, such as high cohesion, low coupling, high scalability, high availability, and processing efficiency.},
keywords = {business data processing;public domain software;systems re-engineering;},
note = {optimization technique;software clustering;optimization techniques;open-source enterprise systems;enterprise system;business applications;Cloud-enabled microservices;monolithic enterprise systems;business objects;business object interactions;business object exclusive containment relationships;source code;system logs;business object containment relationships;},
URL = {http://dx.doi.org/10.1007/978-3-030-02671-4_4},
}


@inproceedings{17787216 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {An Approach to Extract the Architecture of Microservice-based Software Systems},
journal = {2018 IEEE Symposium on Service-Oriented System Engineering (SOSE)},
author = {Mayer, B. and Weinreich, R.},
year = {2018//},
pages = {21 - 30},
address = {Los Alamitos, CA, USA},
abstract = {Microservices decouple network-accessible system components to support independent development, deployment, and scalability. The architecture of microservice-based software systems is typically not defined upfront but emerges by dynamically assembling services to systems. This makes it hard to extract component relations from static sources since component relationships may only become evident at runtime. Existing systems focus either on the static structure of service relations, neglecting runtime properties, or on (short-term) monitoring of runtime properties to detect errors. We present an approach to extract and analyze the architecture of a microservice-based software system based on a combination of static service information with infrastructure-related and aggregated runtime information.},
keywords = {service-oriented architecture;software fault tolerance;},
note = {microservices decouple network-accessible system components;independent development;component relations;static sources;component relationships;existing systems;static structure;service relations;runtime properties;static service information;runtime information;microservice-based software system architecture;aggregated runtime information;infrastructure-related information;},
URL = {http://dx.doi.org/10.1109/SOSE.2018.00012},
}


@article{19877728 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {An Approach to Evolving Legacy Enterprise System to Microservice-Based Architecture through Feature-Driven Evolution Rules},
journal = {International Journal of Computer Theory and Engineering},
journal = {Int. J. Comput. Theory Eng. (Singapore)},
author = {Habibullah, S. and Xiaodong Liu and Zhiyuan Tan},
volume = { 10},
number = { 5},
year = {2018/10/},
pages = {164 - 9},
issn = {1793-8201},
address = {Singapore},
abstract = {Evolving legacy enterprise systems into a lean system architecture has been on the agendas of many enterprises. Recent advance in legacy system evaluation is in favour of microservice technologies, which not only significantly reduce the complexity in deployment of enterprise systems but also enhance the availability of services to system users. However, there are technical challenges to overcome towards a successful transformation. Challenges, relating to information security, container optimisation, the performance of a new system and its deployment, are particularly under concern. To cope with these technical challenges, a new approach is proposed in this paper to govern the evolution of legacy systems into a microservice-based and cloud-hosted architecture. This approach includes a detailed working process, a set of transformation rules towards microservices and their repositories. In addition, a conceptual framework is drawn to provide a comprehensive illustration to this evolution approach. Moreover, a case study is presented to demonstrate the application of the proposed approach on the evaluation of a chosen legacy system, as well as the procedure of system architecture optimisation.},
keywords = {business data processing;cloud computing;security of data;service-oriented architecture;software maintenance;},
note = {container optimisation;information security;legacy enterprise system;evolution approach;cloud-hosted architecture;legacy systems;enterprise systems;microservice technologies;legacy system evaluation;lean system architecture;feature-driven evolution rules;microservice-based architecture;system architecture optimisation;},
URL = {http://dx.doi.org/10.7763/IJCTE.2018.V10.1219},
}


@inproceedings{17937017 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Migrating Towards Microservice Architectures: An Industrial Survey},
journal = {2018 IEEE International Conference on Software Architecture (ICSA). Proceedings},
author = {Di Francesco, P. and Lago, P. and Malavolta, I.},
year = {2018//},
pages = {10 pp. - },
address = {Los Alamitos, CA, USA},
abstract = {Microservices are gaining tremendous traction in industry and a growing scientific interest in academia. More and more companies are adopting this architectural style for modernizing their products and taking advantage of its promised benefits (e.g., agility, scalability). Unfortunately, the process of moving towards a microservice-based architecture is anything but easy, as there are plenty of challenges to address from both technical and organizational perspectives. In this paper we report about an empirical study on migration practices towards the adoption of microservices in industry. Specifically, we designed and conducted a survey targeting practitioners involved in the process of migrating their applications and we collected information (by means of interviews and questionnaires) on (i) the performed activities, and (ii) the challenges faced during the migration. Our findings benefit both (i) researchers by highlighting future directions for industryrelevant problems and (ii) practitioners by providing a reference framework for their (future) migrations towards microservices.},
keywords = {business data processing;organisational aspects;service-oriented architecture;},
note = {industrial survey;architectural style;microservice-based architecture;technical perspectives;organizational perspectives;migration practices;},
URL = {http://dx.doi.org/10.1109/ICSA.2018.00012},
}


@inproceedings{17188420 ,
language = {English},
copyright = {Copyright 2017, The Institution of Engineering and Technology},
title = {Extraction of Microservices from Monolithic Software Architectures},
journal = {2017 IEEE International Conference on Web Services (ICWS). Proceedings},
author = {Mazlami, G. and Cito, J. and Leitner, P.},
year = {2017//},
pages = {524 - 31},
address = {Los Alamitos, CA, USA},
abstract = {Driven by developments such as mobile computing, cloud computing infrastructure, DevOps and elastic computing, the microservice architectural style has emerged as a new alternative to the monolithic style for designing large software systems. Monolithic legacy applications in industry undergo a migration to microservice-oriented architectures. A key challenge in this context is the extraction of microservices from existing monolithic code bases. While informal migration patterns and techniques exist, there is a lack of formal models and automated support tools in that area. This paper tackles that challenge by presenting a formal microservice extraction model to allow algorithmic recommendation of microservice candidates in a refactoring and migration scenario. The formal model is implemented in a web-based prototype. A performance evaluation demonstrates that the presented approach provides adequate performance. The recommendation quality is evaluated quantitatively by custom microservice-specific metrics. The results show that the produced microservice candidates lower the average development team size down to half of the original size or lower. Furthermore, the size of recommended microservice conforms with microservice sizing reported by empirical surveys and the domain-specific redundancy among different microservices is kept at a low rate.},
keywords = {cloud computing;mobile computing;service-oriented architecture;Web services;},
note = {monolithic software architectures;mobile computing;cloud computing infrastructure;DevOps;elastic computing;microservice architectural style;monolithic legacy applications;microservice-oriented architectures;monolithic code bases;informal migration patterns;formal models;microservice extraction model;algorithmic recommendation;microservice candidates;Web-based prototype;performance evaluation;microservice-specific metrics;domain-specific redundancy;},
URL = {http://dx.doi.org/10.1109/ICWS.2017.61},
}


@inproceedings{17188449 ,
language = {English},
copyright = {Copyright 2017, The Institution of Engineering and Technology},
title = {Migrating Monolithic Mobile Application to Microservice Architecture: An Experiment Report},
journal = {2017 IEEE International Conference on AI &amp; Mobile Services (AIMS)},
author = {Chen-Yuan Fan and Shang-Pin Ma},
year = {2017//},
pages = {109 - 12},
address = {Los Alamitos, CA, USA},
abstract = {The microservice architecture (MSA) is an emerging cloud software system, which provides fine-grained, self-contained service components (microservices) used in the construction of complex software systems. DevOps techniques are commonly used to automate the process of development and operation through continuous integration and continuous deployment. Monitoring software systems created by DevOps, makes it possible for MSA to obtain the feedback necessary to improve the system quickly and easily. Nonetheless, systematic, SDLC-driven methods (SDLC: software development life cycle) are lacking to facilitate the migration of software systems from a traditional monolithic architecture to MSA. Therefore, this paper proposes a migration process based on SDLC, including all of the methods and tools required during design, development, and implementation. The mobile application, EasyLearn, was used as an illustrative example to demonstrate the efficacy of the proposed migration process. We believe that this paper could provide valuable references for other development teams seeking to facilitate the migration of existing applications to MSA.},
keywords = {cloud computing;mobile computing;service-oriented architecture;software development management;},
note = {monolithic mobile application;microservice architecture;MSA;cloud software system;self-contained service components;complex software systems;DevOps techniques;SDLC-driven methods;software development life cycle;EasyLearn;migration process;development teams;},
URL = {http://dx.doi.org/10.1109/AIMS.2017.23},
}


@inproceedings{16809157 ,
language = {English},
copyright = {Copyright 2017, The Institution of Engineering and Technology},
title = {Telecom strategies for service discovery in microservice environments},
journal = {2017 20th Conference on Innovations in Clouds, Internet and Networks (ICIN)},
author = {Rotter, C. and Illes, J. and Nyiri, G. and Farkas, L. and Csatari, G. and Huszty, G.},
year = {2017//},
pages = {214 - 18},
address = {Piscataway, NJ, USA},
abstract = {In order to communicate with another service, a service needs to know the address of other services. This knowledge can be acquired by a process called service discovery (SD). In a microservice architecture (MSA), unlike SOA, a service discovery framework has not been provided out of the box. In a telecom environment additional requirements may arise, besides the basic one of discoverability. In this paper we shortly present the state of the art in service discovery with reflections on the specific needs of MSA and in particular in the context of telecom applications. In this context open source frameworks are investigated and compared.},
keywords = {telecommunication industry;telecommunication services;},
note = {telecom strategy;service discovery;microservice architecture;MSA;SOA;open source frameworks;},
URL = {http://dx.doi.org/10.1109/ICIN.2017.7899414},
}


@inproceedings{17767219 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Microservices architecture: case on the migration of reservation-based parking system},
journal = {2017 IEEE 17th International Conference on Communication Technology (ICCT)},
author = {Yugopuspito, P. and Panduwinata, F. and Sutrisno},
year = {2017//},
pages = {1827 - 31},
address = {Piscataway, NJ, USA},
abstract = {This paper explores the migration of a reservation-based parking system into microservice architecture. In the beginning the parking system is a monolith architecture, web-based technology. This is a journey report of finding microservice architecture based on monolith architecture. Several steps are taken, according to service-oriented architecture, then we migrated the design to be a microservice. This paper emphasized the existence of microservices as a refinement of services-oriented architecture, also provides the impact of business process changes due to user experiences.},
keywords = {business data processing;service-oriented architecture;traffic engineering computing;Web services;},
note = {microservice architecture;monolith architecture;services-oriented architecture;reservation-based parking system migration;Web-based technology;business process changes;user experiences;},
URL = {http://dx.doi.org/10.1109/ICCT.2017.8359946},
}


@inproceedings{17373288 ,
language = {English},
copyright = {Copyright 2017, The Institution of Engineering and Technology},
title = {Microservices for systematic profiling and monitoring of the refactoring process at the LHCb experiment},
journal = {Journal of Physics: Conference Series},
journal = {J. Phys., Conf. Ser. (UK)},
author = {Mazurov, A. and Couturier, B. and Popov, D. and Farley, N.},
volume = { 898},
year = {2017//},
pages = {072037 (8 pp.) - },
issn = {1742-6596},
address = {UK},
abstract = {Any time you modify an implementation within a program, change compiler version or operating system, you should also do regression testing. You can do regression testing by rerunning existing tests against the changes to determine whether this breaks anything that worked prior to the change and by writing new tests where necessary. At LHCb we have a huge codebase which is maintained by many people and can be run within different setups. Such situations lead to the crucial necessity to guide refactoring with a central profiling system that helps to run tests and find the impact of changes. In our work we present a software architecture and tools for running a profiling system. This system is responsible for systematically running regression tests, collecting and comparing results of these tests so changes between different setups can be observed and reported. The main feature of our solution is that it is based on a microservices architecture. Microservices break a large project into loosely coupled modules, which communicate with each other through simple APIs. Such modular architectural style helps us to avoid general pitfalls of monolithic architectures such as hard to understand a codebase as well as maintaining a large codebase and ineffective scalability. Our solution also allows to escape a complexity of microservices deployment process by using software containers and services management tools. Containers and service managers let us quickly deploy linked modules in development, production or in any other environments. Most of the developed modules are generic which means that the proposed architecture and tools can be used not only in LHCb but adopted for other experiments and companies.},
keywords = {program compilers;program debugging;program testing;regression analysis;software architecture;software maintenance;},
note = {refactoring process;systematic profiling;monolithic architectures;microservices architecture;software architecture;central profiling system;different setups;huge codebase;regression testing;change compiler version;LHCb experiment;},
URL = {http://dx.doi.org/10.1088/1742-6596/898/7/072037},
}


@inproceedings{17063567 ,
language = {English},
copyright = {Copyright 2017, The Institution of Engineering and Technology},
title = {ICN-based service discovery mechanism for microservice architecture},
journal = {2017 Ninth International Conference on Ubiquitous and Future Networks (ICUFN)},
author = {Kim Bao Long and HyunSik Yang and YoungHan Kim},
year = {2017//},
pages = {773 - 5},
address = {Piscataway, NJ, USA},
abstract = {Microservice architecture (MSA) is an emerging method of developing application systems in recent years. This architectural style enables better application performance, flexibility, and ease of deployment. In MSA, a service needs to acquire the location of other services in order to communicate with them. This problem can be solved by a process called service discovery, which is one of the big challenges in MSA. In this work, we propose an information-centric service discovery (ISD) mechanism which applies the information-centric networking (ICN) concept to solve the service discovery problem in a flexible way. Through analysis, we show that ISD achieves lower discovery latency and overhead compared to existing solutions of the MSA.},
keywords = {computer networks;Internet;service-oriented architecture;},
note = {ICN-based service discovery mechanism;microservice architecture;MSA;application system development;application performance;service location aqcuisition;information-centric service discovery;ISD mechanism;information-centric networking;ICN concept;},
}


@inproceedings{16981401 ,
language = {English},
copyright = {Copyright 2017, The Institution of Engineering and Technology},
title = {From Monolith to Microservices: Lessons Learned on an Industrial Migration to a Web Oriented Architecture},
journal = {2017 IEEE International Conference on Software Architecture: Workshops (ICSAW)},
author = {Gouigoux, J.-P. and Tamzalit, D.},
year = {2017//},
pages = {62 - 5},
address = {Los Alamitos, CA, USA},
abstract = {MGDIS SA is a software editing company that underwent a major strategic and technical change during the past three years, investing 17 300 man. Days rewriting its core business software from monolithic architecture to a Web Oriented Architecture using microservices. The paper presents technical lessons learned during and from this migration by addressing three crucial questions for a successful context-adapted migration towards a Web Oriented Architecture: how to determine (i) the most suitable granularity of micro-services, (ii) the most appropriate deployment and (iii) the most efficient orchestration?},
keywords = {Internet;service-oriented architecture;software houses;},
note = {industrial migration;Web oriented architecture;microservices;MGDIS SA;software editing company;core business software;monolithic architecture;context-adapted migration;},
URL = {http://dx.doi.org/10.1109/ICSAW.2017.35},
}


@article{15954223 ,
language = {English},
copyright = {Copyright 2016, The Institution of Engineering and Technology},
title = {Microservices architecture enables DevOps: Migration to a cloud-native architecture},
journal = {IEEE Software},
journal = {IEEE Softw. (USA)},
author = {Balalaie, A. and Heydarnoori, A. and Jamshidi, P.},
volume = { 33},
number = { 3},
year = {2016/05/},
pages = {42 - 52},
issn = {0740-7459},
address = {USA},
abstract = {This article reports on experiences and lessons learned during incremental migration and architectural refactoring of a commercial mobile back end as a service to microservices architecture. It explains how the researchers adopted DevOps and how this facilitated a smooth migration.},
keywords = {cloud computing;software architecture;software maintenance;},
note = {microservices architecture;DevOps;incremental migration;architectural refactoring;cloud-native architecture;},
URL = {http://dx.doi.org/10.1109/MS.2016.64},
}


@article{16207833 ,
language = {English},
copyright = {Copyright 2016, The Institution of Engineering and Technology},
title = {Towards a Technique for Extracting Microservices from Monolithic Enterprise Systems [arXiv]},
journal = {arXiv},
journal = {arXiv (USA)},
author = {Levcovitz, A. and Terra, R. and Valente, M.T.},
year = {2016/05/10},
pages = {8 pp. - },
address = {USA},
abstract = {The idea behind microservices architecture is to develop a single large, complex application as a suite of small, cohesive, independent services. On the other way, monolithic systems get larger over the time, deviating from the intended architecture, and becoming risky and expensive to evolve. This paper describes a technique to identify and define microservices on monolithic enterprise systems. As the major contribution, our evaluation shows that our approach was able to identify relevant candidates to become microservices on a 750 KLOC banking system.},
keywords = {bank data processing;},
note = {microservices architecture;monolithic enterprise systems;KLOC banking system;technology independence;},
}


@inproceedings{16227921 ,
language = {English},
copyright = {Copyright 2016, The Institution of Engineering and Technology},
title = {Migrating web applications to clouds with microservice architectures},
journal = {2016 International Conference on Applied System Innovation (ICASI)},
author = {Jyhjong Lin and Lin, L.C. and Shiche Huang},
year = {2016//},
pages = {4 pp. - },
address = {Piscataway, NJ, USA},
abstract = {For the recent advances of Cloud Computing technologies, cloud applications have been popularity for their rich set of features. Therefore, their practical use for promoting business values can be expected. As such, cloud applications are recognized as a trend for the next generation of existing Web applications, and hence how to migrate these Web applications to the clouds becomes a desired field in the literature. For this need, we present a migration method that employs the well-known microservice architectures to support an effective migration of Web applications into the clouds.},
keywords = {cloud computing;service-oriented architecture;Web services;},
note = {Web applications;microservice architectures;cloud computing technologies;cloud applications;business values promotion;migration method;},
URL = {http://dx.doi.org/10.1109/ICASI.2016.7539733},
}


@inproceedings{16304824 ,
language = {English},
copyright = {Copyright 2016, The Institution of Engineering and Technology},
title = {The ENTICE approach to decompose monolithic services into microservices},
journal = {2016 International Conference on High-Performance Computing &amp; Simulation (HPCS)},
author = {Kecskemeti, G. and Marosi, A.C. and Kertesz, A.},
year = {2016//},
pages = {591 - 6},
address = {Piscataway, NJ, USA},
abstract = {Cloud computing has enabled elastic and on-demand service provisioning to achieve more efficient resource utilisation and quicker responses to varying application loads. Virtual machines, the building blocks of clouds, can be created using provider specific templates stored in proprietary repositories, which may lead to provider lock-in and decreased portability. Despite these enabling technologies, large scale service oriented applications are still mostly inelastic. Such applications often use monolithic services that limit the elasticity (e.g., by obstructing the replicability of parts of a monolithic service). Decomposing these services (leading to smaller, more targeted and more modular services) would open towards elasticity, but the decomposition process is mostly manual. This paper introduces a methodology for decomposing monolithic services to several so called microservices. The proposed methodology applies several outcomes of the ENTICE project (namely its image synthesis and optimisation tools). Finally, the paper provides insights on how these outcomes help revitalise past monolithic services, and what techniques are applied to aid future microservice developers.},
keywords = {cloud computing;resource allocation;service-oriented architecture;virtual machines;},
note = {ENTICE approach;monolithic services;microservices;cloud computing;elastic service provisioning;on-demand service provisioning;resource utilisation;virtual machines;proprietary repositories;provider lock-in;portability;large scale service oriented applications;image synthesis;optimisation tools;service oriented architecture;},
URL = {http://dx.doi.org/10.1109/HPCSim.2016.7568389},
}


@article{16406538 ,
language = {English},
copyright = {Copyright 2016, The Institution of Engineering and Technology},
title = {Circuit breakers, discovery, and API gateways in microservices [arXiv]},
journal = {arXiv},
journal = {arXiv (USA)},
author = {Montesi, F. and Weber, J.},
year = {19 Sept. 2016},
pages = {8 pp. - },
address = {USA},
abstract = {We review some of the most widely used patterns for the programming of microservices: circuit breaker, service discovery, and API gateway. By systematically analysing different deployment strategies for these patterns, we reach new insight especially for the application of circuit breakers. We also evaluate the applicability of Jolie, a language for the programming of microservices, for these patterns and report on other standard frameworks offering similar solutions. Finally, considerations for future developments are presented.},
keywords = {application program interfaces;programming languages;service-oriented architecture;},
note = {circuit breakers;API gateways;microservice programming;service discovery;Jolie language;},
}


@inproceedings{21816579 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Towards Migrating Legacy Software Systems to Microservice-based Architectures: a Data-Centric Process for Microservice Identification},
journal = {2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C)},
author = {Romani, Y. and Tibermacine, O. and Tibermacine, C.},
year = {2022//},
pages = {15 - 19},
address = {Piscataway, NJ, USA},
abstract = {"Microservice-based architecture" is an architectural style exploited to develop software systems with the main concern of independent maintainability, deployability and scalability. These important capabilities in modern software development and operation settings led many companies to migrate their existing (legacy) monolithic software systems towards microservice-based architectures. The migration process is a challenging task. It requires splitting the system into consistent parts that represent the set of microservices. Existing works focus mainly on functional aspects in this splitting. We argue in this work that it would be beneficial to start this splitting by decomposing the database into clusters, where the data in each cluster is associated to a microservice's own independent database. This is commonly known as the "database-per-service" pattern in microservice architectures. This paper proposes our preliminary work on a data-centric process to identify microservices. This process performs database schema analysis and clustering in order to make topic identification. It aims at identifying a set of topics which correspond to potential microservices.},
keywords = {database management systems;pattern clustering;service-oriented architecture;software maintenance;},
note = {clustering;database schema analysis;database-per-service pattern;microservice architectures;migration process;monolithic software systems;operation settings;modern software development;microservice identification;data-centric process;microservice-based architecture;legacy software systems;},
URL = {http://dx.doi.org/10.1109/ICSA-C54293.2022.00010},
}


@inproceedings{22027055 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Architect: A Framework for the Migration to Microservices},
journal = {2022 International Conference on Computing, Electronics &amp; Communications Engineering (iCCECE)},
author = {Volynsky, E. and Mehmed, M. and Krusche, S.},
year = {2022//},
pages = {71 - 6},
address = {Piscataway, NJ, USA},
abstract = {The migration from a monolithic to a microservice architecture is a recurring step in many software projects. With the increasing distributed nature of the transformed system, new challenges for data consistency and deployment arise, which can be counteracted by the integration of microservices patterns. However, the use of such patterns is complex and time-consuming. In this paper, we describe a case study of a migration process of the learning management system Artemis which consists of two phases. The first phase shows the transformation from a monolithic architecture to a microservice architecture with a shared database. It sets as a goal the identification of microservice boundaries, the decomposition of the monolith application into multiple distributed entities, as well as their orchestration in a cloud-ready environment. The second phase migrates the shared database into multiple databases based on the database-per-microservice pattern. While analyzing the current Artemis architecture, we describe a gradual refactoring of an existing application to decompose Artemis into multiple subsystems. We developed Architect, a framework which is based on a domain-specific language for building dependable distributed systems as a template to ensure the data consistency of the distributed transactions using the Saga pattern. We decomposed Artemis into 3 microservices and provided the migration concept from shared-database to database-per-microservice using Architect. The framework helped to reduce the complexity of using the Saga pattern. It introduced the eventual consistency in a distributed database system and decreased the coupling of the data storage. The migration to a microservice architecture solves many problems of a monolith application, but introduces new challenges and increases the complexity of the overall system. Architect focuses on greenfield project, but currently does not provide a software evolution approach. We will add support for reengineering projects, which can facilitate the migration process of existing system.},
keywords = {data integrity;distributed databases;software architecture;software fault tolerance;software maintenance;software prototyping;specification languages;systems re-engineering;},
note = {Architect;microservice architecture;increasing distributed nature;transformed system;data consistency;microservices patterns;migration process;learning management system Artemis;monolithic architecture;shared database;microservice boundaries;monolith application;multiple distributed entities;multiple databases;database-per-microservice pattern;dependable distributed systems;distributed transactions;Saga pattern;migration concept;shared-database;distributed database system;Artemis architecture;cloud-ready environment;domain-specific language;software evolution approach;reengineering projects;},
URL = {http://dx.doi.org/10.1109/iCCECE55162.2022.9875096},
}


@inproceedings{18870551 ,
language = {English},
copyright = {Copyright 2019, The Institution of Engineering and Technology},
title = {Refactoring Orchestrated Web Services into Microservices Using Decomposition Pattern},
journal = {2018 IEEE 4th International Conference on Computer and Communications (ICCC). Proceedings},
author = {Tusjunt, M. and Vatanawood, W.},
year = {2018//},
pages = {609 - 13},
address = {Piscataway, NJ, USA},
abstract = {Service-oriented architecture (SOA) is an architectural design of inter-services collaborations. In general, SOA has three major roles, including client, service provider, and service broker. To access a service usually depends on a service broker, which causes inflexibility in system modification. The software industry now focuses more on productivity, flexibility of the constant changes and continuous modifications, for which the SOA style may not be suitable. Therefore, a new microservice style is an alternative serving those needs, which means a microservice unit is more adaptable and replaceable with no ripple effects. Since the microservice architecture design is considered as a collection of the small self-contained services, each service represents a business capability and carries its own isolated data. However, how to identify microservices is still a challenging task in the business process model level. This paper proposes an alternative mean to extract the existing SOA services from the BPEL flow and refactor them into a set of relevant microservices using the decomposition pattern. In our case study, we propose how to do the service refactoring against the business domain profiles collected from the extracted vocabularies from the given business scenarios. The resulting microservices are domain specific and conform to the business capability vocabularies extracted from the given business scenarios.},
keywords = {business data processing;DP industry;service-oriented architecture;Web services;},
note = {service broker;system modification;microservice architecture design;self-contained services;business process model level;decomposition pattern;service-oriented architecture;inter-services collaborations;service provider;SOA services;refactoring orchestrated Web services;client;software industry;vocabularies extraction;},
URL = {http://dx.doi.org/10.1109/CompComm.2018.8781036},
}


@inproceedings{21647076 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Migration of Monoliths through the Synthesis of Microservices using Combinatorial Optimization},
journal = {2021 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)},
author = {Filippone, G. and Autili, M. and Rossi, F. and Tivoli, M.},
year = {2021//},
pages = {144 - 7},
address = {Piscataway, NJ, USA},
abstract = {Microservices are an emerging architectural style that is gaining a growing interest from companies and research. They are small, distributed, autonomous and loosely coupled services that are deployed independently and work together by communicating through lightweight protocols. Microservices are easy to update, scale, deploy, and reduce the time-to-market thanks to continuous delivery and DevOps. Several existing systems, in contrast, are difficult to maintain, evolve, and scale. For these reasons, microservices are the ideal candidates for the refactoring and modernization of long-lived monolithic systems. However, the migration process is a complex, time-consuming and error-prone task that needs the support of appropriate tools to assist software designers and programmers from the extraction of a proper architecture to the implementation of the novel microservices. This paper proposes a possible solution for the automated decomposition of a monolithic system into microservices, which exploits combinatorial optimization techniques to manage the decomposition. Our proposal covers the whole decomposition process, from the microservice architecture definition to the generation of the code of the microservices and their APIs, in order to assist developers and ensure by construction the correct behavior of the refactored system.},
keywords = {application program interfaces;combinatorial mathematics;optimisation;service-oriented architecture;software maintenance;Web services;},
note = {combinatorial optimization;monolithic system;microservice synthesis;microservice architecture;lightweight protocols;migration process;API;},
URL = {http://dx.doi.org/10.1109/ISSREW53611.2021.00056},
}


@inproceedings{21905827 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {A Microservices Identification Approach based on Problem Frames},
journal = {2022 IEEE 2nd International Conference on Software Engineering and Artificial Intelligence (SEAI)},
author = {Yang, Z. and Wu, S. and Zhang, C.},
year = {2022//},
pages = {155 - 9},
address = {Piscataway, NJ, USA},
abstract = {As software grows in size continuously, traditional monolithic architecture is difficult to upgrade and update. As a more flexible architecture, microservices consist of smaller pieces or services that are loosely coupled and can be deployed independently. More and more IT companies are adopting microservices architecture. However, migrating to microservices is still a big challenge due to the lack of a more systematic methodology on microservices identification. Most existing studies on microservices identification are mainly based on refactoring the system module rather than considering the actual functional requirements. Therefore, we propose a microservices identification approach based on the problem frames to address this challenge, which considers real-world requirements. It relies on the merging process with the problem diagram, where the problem domain is processed, and the causal chain is obtained by searching the problem diagram. Subsequently, we calculate the correlation degree of the domains in the problem diagram. Then, based on the calculated correlation, we implement a clustering algorithm for the problem domains and get the categorization result of the problem domains which is the initial microservice candidate. The developers can consider each category of the problem domain as a microservice by converting the problem domains into the microservices. Finally, a case study verifies the validity of our proposed approach.},
keywords = {pattern clustering;software architecture;software maintenance;},
note = {microservices architecture;microservices identification;problem frames;problem diagram;monolithic architecture;flexible architecture;system module refactoring;},
URL = {http://dx.doi.org/10.1109/SEAI55746.2022.9832106},
}


@inproceedings{21921915 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Automatic Microservices Identification from Association Rules of Business Process},
journal = {Intelligent Systems Design and Applications: 21st International Conference on Intelligent Systems Design and Applications (ISDA 2021) . Lecture Notes in Networks and Systems (418)},
author = {Saidi, M. and Daoud, M. and Tissaoui, A. and Sabri, A. and Benslimane, D. and Faiz, S.},
year = {2022//},
pages = {476 - 87},
address = {Berlin, Germany},
abstract = {Compared to monolithic systems, microservice-oriented architectures is becoming an architectural style that is gaining more and more popularity whether in academia or the industrial world. Microservices emerged as a solution to breaking down monolithic applications into small, self-contained, highly cohesive, and loosely coupled services. However, identifying microservices remains a major challenge that could compromise the success and importance of this migration. In this article, we have proposed an association rules-based architecture to automatically identify microservices from a business process. Indeed, in this approach we have exploited the association analysis method to discover the hidden relationships between the attributes of each activity and consequently the activities which will share the same attributes will be classified in the same microservices. A case study on a bicycle rental system is adopted with the aim of illustrating and demonstrating our approach.},
keywords = {bicycles;business data processing;data mining;service-oriented architecture;software architecture;Web services;},
note = {monolithic applications;loosely coupled services;identifying microservices;association rules-based architecture;business process;association analysis method;bicycle rental system;automatic microservices identification;monolithic systems;microservice-oriented architectures;architectural style;},
URL = {http://dx.doi.org/10.1007/978-3-030-96308-8_44},
}


@inproceedings{21508114 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Applying Microservice Refactoring to Object-2riented Legacy System},
journal = {2021 8th International Conference on Dependable Systems and Their Applications (DSA)},
author = {Junfeng Zhao and Ke Zhao},
year = {2021//},
pages = {467 - 73},
address = {Piscataway, NJ, USA},
abstract = {With the evolvement of application demand and technology stack, the monolithic systems need to be modernized due to a series of weaknesses. Many organizations are drawn to breaking them down into microservices architecture style. In the context of adopting microservices, microservices extraction and architecture refactoring are the prior and challenge work. According to domain driven design principle in microservices, the software units that are related to a same domain can be extracted from legacy system to realize a special microservices. In software system, database structure implies domain division in large part. An improved approach is proposed to extract microservices candidates from object-oriented legacy system, which originates from database structure and combines source code relationship in the meantime. Then software architecture should be refactored to adopt the microservices. Finally, a prototype tool was developed to realize system decomposition and microservices extraction. The experiments show that the approach is efficient and the tool is helpful to system modernization.},
keywords = {database management systems;object-oriented programming;software architecture;software maintenance;software prototyping;source code (software);},
note = {monolithic systems;microservices architecture style;architecture refactoring;domain driven design principle;software system;database structure;domain division;microservice candidate extraction;object-oriented legacy system;software architecture;system decomposition;system modernization;microservice refactoring;source code relationship;},
URL = {http://dx.doi.org/10.1109/DSA52907.2021.00070},
}


@inproceedings{20730500 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Weighing the Evidence: On Relationship Types in Microservice Extraction},
journal = {2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
author = {Kirby, L.J. and Boerstra, E. and Anderson, Z.J.C. and Rubin, J.},
year = {2021//},
pages = {358 - 68},
address = {Los Alamitos, CA, USA},
abstract = {The microservice-based architecture &#8211; a SOA-inspired principle of dividing systems into components that communicate with each other using language-agnostic APIs &#8211; has gained increased popularity in industry. Yet, migrating a monolithic application to microservices is a challenging task. A number of automated microservice extraction techniques have been proposed to help developers with the migration complexity. These techniques, at large, construct a graph-based representation of an application and cluster its elements into service candidates. The techniques vary by their decomposition goals and, subsequently, types of relationships between application elements that they consider &#8211; structural, semantic term similarity, and evolutionary &#8211; with each technique utilizing a fixed subset and weighting of these relationship types.In this paper, we perform a multi-method exploratory study with 10 industrial practitioners to investigate (1) the applicability and usefulness of different relationships types during the microservice extraction process and (2) expectations practitioners have for tools utilizing such relationships. Our results show that practitioners often need a "what-if" analysis tool that simultaneously considers multiple relationship types during the extraction process and that there is no fixed way to weight these relationships. Our study also identifies organization- and application-specific considerations that lead practitioners to prefer certain relationship types over others, e.g., the age of the codebase and languages spoken in the organization. It outlines possible strategies to help developers during the extraction process, e.g., the ability to iteratively filter and customize relationships.},
keywords = {application program interfaces;graph theory;service-oriented architecture;software architecture;Web services;},
note = {weighting;fixed subset;semantic term similarity;structural term similarity;application elements;cluster its elements;graph-based representation;migration complexity;automated microservice extraction techniques;microservices;monolithic application;language-agnostic APIs;SOA-inspired principle;microservice-based architecture;application-specific considerations;multiple relationship types;microservice extraction process;different relationships types;10 industrial practitioners;multimethod exploratory study;},
URL = {http://dx.doi.org/10.1109/ICPC52881.2021.00041},
}


@inproceedings{18083487 ,
language = {English},
copyright = {Copyright 2018, The Institution of Engineering and Technology},
title = {Identifying Microservices Using Functional Decomposition},
journal = {Dependable Software Engineering. Theories, Tools, and Applications. 4th International Symposium, SETTA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 10998)},
author = {Tyszberowicz, S. and Heinrich, R. and Bo Liu and Zhiming Liu},
year = {2018//},
pages = {50 - 65},
address = {Cham, Switzerland},
abstract = {The microservices architectural style is rising fast, and many companies use this style to structure their systems. A big challenge in designing this architecture is to find an appropriate partition of the system into microservices. Microservices are usually designed intuitively, based on the experience of the designers. We describe a systematic approach to identify microservices in early design phase which is based on the specification of the system&#8217;s functional requirements and that uses functional decomposition. To evaluate our approach, we have compared microservices implementations by three independent teams to the decomposition provided by our approach. The evaluation results show that our decomposition is comparable to manual design, yet within a much shorter time frame.},
keywords = {software architecture;},
note = {functional decomposition;systematic approach;early design phase;microservice architectural style;microservice implementations;},
URL = {http://dx.doi.org/10.1007/978-3-319-99933-3_4},
}


@article{21683622 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Accumulation and Prioritization of Architectural Debt in Three Companies Migrating to Microservices},
journal = {IEEE Access},
journal = {IEEE Access (USA)},
author = {De Toledo, S.S. and Martini, A. and Nguyen, P.H. and Sjoberg, D.I.K.},
volume = { 10},
year = {2022//},
pages = {37422 - 45},
issn = {2169-3536},
address = {USA},
abstract = {Many companies migrate to microservices because they help deliver value to customers quickly and continuously. However, like any architectural style, microservices are prone to architectural technical debt (ATD), which can be costly if the debts are not timely identified, avoided, or removed. During the early stages of migration, microservice-specific ATDs (MS-ATDs) may accumulate. For example, practitioners may decide to continue using poorly defined APIs in microservices while attempting to maintain compatibility with old functionalities. The riskiest MS-ATDs must be prioritized. Nevertheless, there is limited research regarding the prioritization of MS-ATDs in companies migrating to microservices. This study aims to identify, during migration, which MS-ATDs occur, are the most severe, and are the most challenging to solve. In addition, we propose a way to prioritize these debts. We conducted a multiple exploratory case study of three large companies that were early in the migration process to microservices. We interviewed 47 practitioners with several roles to identify the debts in their contexts. We report the MS-ATDs detected during migration, the MS-ATDs that practitioners estimate to occur in the future, and the MS-ATDs that practitioners report as difficult to solve. We discuss the results in the context of the companies involved in this study. In addition, we used a risk assessment approach to propose a way for prioritizing MS-ATDs. Practitioners from other organizations and researchers may use this approach to provide rankings to help identify and prioritize which MS-ATDs should be avoided or solved in their contexts.},
keywords = {risk management;software architecture;software development management;Web services;},
note = {microservices;microservice-specific ATDs;riskiest MS-ATDs;architectural debt accumulation;architectural debt prioritization;architectural technical debt;risk assessment approach;},
URL = {http://dx.doi.org/10.1109/ACCESS.2022.3158648},
}


@article{22023196 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {A service graph based extraction of microservices from monolith services of service-oriented architecture},
journal = {Software: Practice and Experience},
journal = {Softw., Pract. Exp. (USA)},
author = {Raj, V. and Ravichandra, S.},
volume = { 52},
number = { 7},
year = {2022//},
pages = {1661 - 78},
issn = {1097-024X},
address = {USA},
abstract = {Service-oriented architecture (SOA) has been widely used to design enterprise applications in the past two decades. The services in SOA are becoming complex with the increase in changing user requirements and SOA is still seen as monolithic from a deployment perspective. Monolithic services make the application complex, and it becomes difficult to maintain. With the evolution of microservices architecture, software architects started migrating legacy applications to microservices. However, existing migration approaches in the literature mostly focus on migrating monolithic applications to microservices. To the best of our knowledge, very few works have been done in migrating SOA applications to microservices. One of the major challenges in the migration process is the extraction of microservices from the existing legacy applications. To address this, we propose an approach to extract the candidate microservices using graph based algorithms. In particular, four algorithms are defined: (i) construction of service graph (SG), (ii) construction of task graph (TG) for each service of the a SOA application, (iii) extraction of candidate microservices using the SG of SOA application, and (iv) construction of a SG for a microservices application to retain the dependencies between the generated microservices. We chose a SOA-based web application to demonstrate the proposed microservices extraction approach and extracted the microservices. Additionally, we have evaluated the extracted microservices and compared them with SOA based services. &copy; 2022 John Wiley &amp; Sons, Ltd.},
keywords = {graph theory;service-oriented architecture;software architecture;software maintenance;Web services;},
note = {candidate microservices;SOA application;microservices application;generated microservices;SOA-based web application;microservices extraction approach;extracted microservices;SOA based services;service graph;monolith services;service-oriented architecture;enterprise applications;monolithic services;application complex;microservices architecture;existing migration approaches;monolithic applications;migrating SOA applications;migration process;existing legacy applications;graph based algorithms;},
URL = {http://dx.doi.org/10.1002/spe.3081},
}


@inproceedings{22050613 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Log2MS: a framework for automated refactoring monolith into microservices using execution logs},
journal = {2022 IEEE International Conference on Web Services (ICWS)},
author = {Liu, B. and Xiong, J. and Ren, Q. and Tyszberowicz, S. and Yang, Z.},
year = {2022//},
pages = {391 - 6},
address = {Piscataway, NJ, USA},
abstract = {Service models and modelling are vital in monolith-to-microservice architecture (MSA) migration of legacy systems. Prior work focuses on service identification, whereas few efforts have been investigating microservice models and modelling. It remains an immature field of Model-Driven Development (MDD) of MSA due to it lack modelling methods and tools for monolith-to-MSA migration. We present Log2MS, an MDD framework for automated transforming legacy monolithic architecture into MSA using execution logs only. We define microservice and microservice sequence diagrams to support monolith-to-MSA structural and behavioural modelling; we present a source-code free monolith-to-MSA approach and a prototypical tool which support automatically microservices identification and MSA models generation; we developed a graphical editor to represent the generated MSA models for further interactively modelling. Log2MS is evaluated being of applicability, robustness, and effectiveness by comparative experiments with 2 representative approaches and applying to 4 projects.},
keywords = {software architecture;software engineering;software maintenance;source code (software);},
note = {execution logs;service models;monolith-to-microservice architecture migration;legacy systems;service identification;microservice models;model-driven development;lack modelling methods;monolith-to-MSA migration;Log2MS;MDD framework;automated transforming legacy monolithic architecture;microservice sequence diagrams;behavioural modelling;source-code free monolith-to-MSA approach;microservices identification;MSA models;interactively modelling;automated refactoring monolith;},
URL = {http://dx.doi.org/10.1109/ICWS55610.2022.00065},
}


@inproceedings{21838074 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Automated Microservice Decomposition Method as Multi-Objective Optimization},
journal = {2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C)},
author = {Kinoshita, T. and Kanuka, H.},
year = {2022//},
pages = {112 - 15},
address = {Piscataway, NJ, USA},
abstract = {IT architects expend a great deal of effort to manually decompose a current system into microservices (MSD) to improve the system maintainability. There are several methods that decompose the current system by automatically generating MSD candidates (MSDCs). These MSDCs are evaluated by de-fined evaluation functions, and the weighted sum of the evaluation is used to determine the best MSDC. However, it is difficult for IT architects to define the weighting on the spot. In this research, we propose an automated MSD method to generate a number of MSDCs by executing MSD as a multi-objective optimization problem. In the proposed method, a sufficient number of MSDCs is generated without weighting by using predefined MSD policies and fix operations. The generated MSDCs are mapped to a vector space that consists of basis vectors formulated in accordance with the evaluation functions defined by the MSD policies. Pareto-optimal solutions are then extracted from the mapped MSDCs by using a non-dominated sorting algorithm. We also extract MSDCs that are closest to the reference lines, which are defined to divide the vector space evenly, as distinctive MSDCs. We applied our method to two cases and found that it can automatically generate a sufficient number of distinctive MSDCs, thus enabling IT architects to efficiently find the best MSDC and rapidly execute MSD.},
keywords = {evolutionary computation;genetic algorithms;Pareto optimisation;sorting;},
note = {MSDCs;nondominated sorting algorithm;multiobjective optimization problem;automated MSD method;de-fined evaluation functions;MSD candidates;system maintainability;microservice decomposition method;vector space;pareto-optimal solutions;},
URL = {http://dx.doi.org/10.1109/ICSA-C54293.2022.00028},
}


@article{22009746 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {ServiceRank: Root Cause Identification of Anomaly in Large-Scale Microservice Architectures},
journal = {IEEE Transactions on Dependable and Secure Computing},
journal = {IEEE Trans. Dependable Secur. Comput. (USA)},
author = {Ma, M. and Lin, W. and Pan, D. and Wang, P.},
volume = { 19},
number = { 5},
year = {2022//},
pages = {3087 - 100},
issn = {1941-0018},
address = {USA},
abstract = {Nowadays, increasing business applications running in the cloud are embracing the microservice architecture. This article presents the challenges and implications of diagnosing root causes of anomalies in large-scale microservice architecture using real incidents in IBM Bluemix. We propose ServiceRank, a novel framework for anomaly detection and root cause identification in the microservice architecture to tackle these challenges. ServiceRank introduces an anomaly detector followed by a root cause analysis module, which detects the suspected abnormal service without pre-defined thresholds. To generalize our approach, we design a causal relationship extraction approach to construct impact graphs for root cause investigation according to specific anomalies. To eliminate cloud design-patterns' impact on anomaly diagnosis, we propose a correlation calibration mechanism in ServiceRank and present a calibration algorithm for the circuit breaker - A typical protection pattern in the microservice architecture. Finally, we design a heuristic investigation algorithm based on the second-order random walk to identify the anomaly's root cause. Experimental results in a simulated environment and the IBM Bluemix platform show that ServiceRank outperforms selected approaches in accuracy and offers fast identification of root cause service when an anomaly occurs. Moreover, we can deploy ServiceRank rapidly and easily in various systems without any pre-defined knowledge.},
keywords = {calibration;cloud computing;data analysis;service-oriented architecture;},
note = {ServiceRank;root cause identification;large-scale microservice architecture;business applications;anomaly detection;root cause analysis module;causal relationship extraction approach;cloud design-patterns;anomaly diagnosis;IBM Bluemix;correlation calibration mechanism;circuit breaker;heuristic investigation algorithm;second-order random walk;},
URL = {http://dx.doi.org/10.1109/TDSC.2021.3083671},
}


@inproceedings{22016791 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Automatic Microservices Identification Across Structural Dependency},
journal = {Hybrid Intelligent Systems: 21st International Conference on Hybrid Intelligent Systems (HIS 2021). Lecture Notes in Networks and Systems (420)},
author = {Saidi, M. and Tissaoui, A. and Benslimane, D. and Faiz, S.},
year = {2022//},
pages = {386 - 95},
address = {Berlin, Germany},
abstract = {Microservices oriented architecture has become increasingly popular, especially with the rise in the use of resource-intensive applications. Indeed, companies are faced with challenges related to the performance of their services in terms of technical infrastructure cost and in terms of development, deployment and system maintenance.However, microservices allow the company to react much more promptly to new requirements and therefore avoid an endless development process over several years. Identifying microservices that are cohesive, loosely coupled, and fine-grained nowadays is a major challenge for most organizations. To address this challenge, we have proposed in this paper a technique for identifying microservices which decomposes our system using clustering. To this end, we have used the business process as the system input and we have only taken into account the aspect of structural dependency.},
keywords = {business data processing;service-oriented architecture;},
note = {system maintenance;development process;system input;structural dependency;automatic microservices identification;microservices oriented architecture;resource-intensive applications;technical infrastructure cost;business process;},
URL = {http://dx.doi.org/10.1007/978-3-030-96305-7_36},
}


@inproceedings{21816636 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {A Systematic Literature Review on Migration to Microservices: a Quality Attributes perspective},
journal = {2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C)},
author = {Capuano, R. and Muccini, H.},
year = {2022//},
pages = {120 - 3},
address = {Piscataway, NJ, USA},
abstract = {Today's system migration focuses on modernizing legacy and monolithic systems towards microservices' architectures. This study aims at understanding if and how quality attributes improvement are explicitly driving the migration process. We designed and conducted a systematic literature review on the topic. We started from over 2.000 potentially relevant research papers. We applied a selection procedure resulting in 58 selected research papers over the last six years. Our study revealed the following main findings: i) while still limited, quality attributes-driven migration is getting some attention, especially during the microservices identification phase; ii) we related the migration phases to the subset of quality attributes found in the papers accepted for this systematic review.},
keywords = {business data processing;reviews;service-oriented architecture;software architecture;software quality;},
note = {systematic literature review;quality attributes perspective;system migration;legacy;monolithic systems;quality attributes improvement;migration process;selection procedure;58 selected research papers;microservices identification phase;migration phases;systematic review;},
URL = {http://dx.doi.org/10.1109/ICSA-C54293.2022.00030},
}


@article{21998739 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Adopting microservice architecture: A decision support model based on genetically evolved multi-layer FCM},
journal = {Applied Soft Computing},
journal = {Appl. Soft Comput. (Netherlands)},
author = {Christoforou, A. and Andreou, A.S. and Garriga, M. and Baresi, L.},
volume = { 114},
year = {2022//},
pages = {108066 - },
issn = {1872-9681},
address = {Netherlands},
abstract = {Microservice architectures foster the development of applications as suites of small, autonomous and conversational services, which are then easy to understand, deploy and scale. However, one of the problems nowadays is that microservices introduce new complexities to the system and, despite the hype, many factors should be considered when deciding whether to use them or not. This paper introduces a novel decision and analysis model with enhanced interpretative and explanatory capabilities. The model is conceived by identifying the key concepts and factors in deciding whether to adopt microservice architectures, or not, through literature review and experts' feedback from the industry and academia. These concepts are organized as a Multi-Layer Fuzzy Cognitive Map (MLFCM), a graph-based computational intelligent model. A new formulation is proposed, along with a novel genetically evolved algorithm, both aiming at improving the model in terms of performance, bias resilience and explainability. The model is evaluated and calibrated through a series of executions over real and synthetic scenarios. The application of static and dynamic analyses, in conjunction with the incorporation of the evolutionary approach, guide the identification of the prevailing factors that regulate the adoption of a microservice architecture and allow the interpretation of the importance of each concept. Finally, an industrial scenario leverages the assessment of the model's applicability and efficacy, highlighting some interesting results. All rights reserved Elsevier.},
keywords = {decision support systems;evolutionary computation;fuzzy cognitive maps;fuzzy set theory;genetic algorithms;},
note = {microservice architecture;decision support model;autonomous services;multilayer FCM;conversational services;multilayer fuzzy cognitive map;graph-based computational intelligent model;},
URL = {http://dx.doi.org/10.1016/j.asoc.2021.108066},
}


@inproceedings{21472991 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Microservice decomposition and evaluation using dependency graph and silhouette coefficient},
journal = {SBCARS '21: 15th Brazilian Symposium on Software Components, Architectures, and Reuse},
author = {Santos, A. and Paula, H.},
year = {2021//},
pages = {51 - 60},
address = {New York, NY, USA},
abstract = {The benefits provided by microservices architecture in some application scenarios are a motivating factor for organizations to migrate their monoliths to this architecture. Extracting microservices from existing monolithic code bases presents a key challenge in this context, and there is a lack of tools that automate not only the decomposition processes but also the evaluation of the resulting architecture. This work presents a new approach for microservice decomposition that analyzes source code of a monolithic application and, with the combined use of approaches in the literature, suggests parts to be extracted in microservices considering the artifacts: classes, methods and/or history of modifications. The quality of the microservices' suggestions are assessed, quantitatively, through the silhouette coefficient, a quality metric used in clustering analysis, and the microservice granularity. A tool was developed to automate the process of microservice decomposition for Java repositories. As a result, it was observed that the tool generated clusters with satisfactory results and can be used as an auxiliary instrument by experts during the migration process from monolithic architecture to microservices.},
keywords = {graph theory;pattern clustering;public domain software;software architecture;software maintenance;Web services;},
note = {microservice decomposition;evaluation using dependency graph;silhouette coefficient;microservices architecture;monoliths;monolithic code bases;decomposition processes;resulting architecture;source code;monolithic application;microservice granularity;monolithic architecture;},
URL = {http://dx.doi.org/10.1145/3483899.3483908},
}


@inproceedings{21046665 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Mono2Micro: a practical and effective tool for decomposing monolithic Java applications to microservices},
journal = {ESEC/FSE 2021: Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
author = {Kalia, A.K. and Jin Xiao and Krishna, R. and Sinha, S. and Vukovic, M. and Banerjee, D.},
year = {2021//},
pages = {1214 - 24},
address = {New York, NY, USA},
abstract = {In migrating production workloads to cloud, enterprises often face the daunting task of evolving monolithic applications toward a microservice architecture. At IBM, we developed a tool called Mono2Micro to assist with this challenging task. Mono2Micro performs spatio-temporal decomposition, leveraging well-defined business use cases and runtime call relations to create functionally cohesive partitioning of application classes. Our preliminary evaluation of Mono2Micro showed promising results. How well does Mono2Micro perform against other decomposition techniques, and how do practitioners perceive the tool? This paper describes the technical foundations of Mono2Micro and presents results to answer these two questions. To answer the first question, we evaluated Mono2Micro against four existing techniques on a set of open-source and proprietary Java applications and using different metrics to assess the quality of decomposition and tool's efficiency. Our results show that Mono2Micro significantly outperforms state-of-the-art baselines in specific metrics well-defined for the problem domain. To answer the second question, we conducted a survey of twenty-one practitioners in various industry roles who have used Mono2Micro. This study highlights several benefits of the tool, interesting practitioner perceptions, and scope for further improvements. Overall, these results show that Mono2Micro can provide a valuable aid to practitioners in creating functionally cohesive and explainable microservice decompositions.},
keywords = {business data processing;cloud computing;Java;object-oriented programming;public domain software;service-oriented architecture;software metrics;software quality;},
note = {Mono2Micro;spatio-temporal decomposition;Mono2Microperform;monolithic Java applications;cloud;microservice architecture;open source applications;proprietary Java applications;decomposition quality;business use cases;},
URL = {http://dx.doi.org/10.1145/3468264.3473915},
}


@inproceedings{21993236 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Distributed online extraction of a fluid model for microservice applications using local tracing data},
journal = {2022 IEEE 15th International Conference on Cloud Computing (CLOUD)},
author = {Ruuskanen, J. and Cervin, A.},
year = {2022//},
pages = {179 - 90},
address = {Piscataway, NJ, USA},
abstract = {Dynamic resource management is a difficult problem in modern microservice applications. Many proposed methods rely on the availability of an analytical performance model, often based on queueing theory. Such models can always be hand-crafted, but this takes time and requires expert knowledge. Various methods have been proposed that can automatically extract models from logs or tracing data. However, they are often intricate, requiring off-line stages and advanced algorithms for retrieving the service-time distributions. Furthermore, the resulting models can be complex and unsuitable for online evaluation. Aiming for simplicity, we in this paper introduce a general queuing network model for microservice applications that can be (i) quickly and accurately solved using a refined mean-field fluid model and (ii) completely extracted at runtime in a distributed fashion from common local tracing data at each service. The fit of the model and the prediction accuracies under system perturbations are evaluated in a cloud-based microservice application and are found to be accurate.},
keywords = {queueing theory;resource allocation;Web services;},
note = {general queuing network model;mean-field fluid model;common local tracing data;cloud-based microservice application;distributed online extraction;dynamic resource management;modern microservice applications;analytical performance model;queueing theory;hand-crafted;expert knowledge;service-time distributions;online evaluation;},
URL = {http://dx.doi.org/10.1109/CLOUD55607.2022.00037},
}


@inproceedings{21727711 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {MS2M: A message-based approach for live stateful microservices migration},
journal = {2022 5th Conference on Cloud and Internet of Things (CIoT)},
author = {Hai Dinh-Tuan and Beierle, F.},
year = {2022//},
pages = {100 - 7},
address = {Piscataway, NJ, USA},
abstract = {In the last few years, the proliferation of edge and cloud computing infrastructures as well as the increasing number of mobile devices has facilitated the emergence of many novel applications. However, that increase of complexities also creates novel challenges for service providers, for example, the efficient management of interdependent services during runtime. One strategy is to reallocate services dynamically by migrating them to suitable servers. However, not every microservice can be deployed as stateless instances, which leads to suboptimal performance of live migration techniques. In this work, we propose a novel live migration scheme focusing on stateful microservices in edge/cloud environments by utilizing the underlying messaging infrastructure to reconstruct the service's state. Not only can this approach be applied in various microservice deployment scenarios, experimental evaluation results also show a reduction of 19.92% downtime compared to the stop-and-copy migration method.},
keywords = {cloud computing;computer centres;resource allocation;virtual machines;},
note = {mobile devices;service providers;suboptimal performance;live migration scheme;messaging infrastructure;microservice deployment scenarios;MS2M;message-based approach;live stateful microservices;cloud computing infrastructures;stop-and-copy migration method;},
URL = {http://dx.doi.org/10.1109/CIoT53061.2022.9766576},
}


@inproceedings{21949337 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Allocation and migration of microservices in SDN-based vehicular fog networks},
journal = {2022 17th Iberian Conference on Information Systems and Technologies (CISTI)},
author = {Alvarenga, L.D.C. and Sousa, P. and Costa, A.},
year = {2022//},
pages = {4 pp. - },
address = {Piscataway, NJ, USA},
abstract = {The increasing growth of the vehicular ad hoc network (VANET) and the advent of the Internet of Vehicles (IoV) paradigm, have enabled a wide variety of applications of intelligent transport systems (ITS). However, many applications demand low communication latency times, which makes it unfeasible to host them in cloud services. Many works use the Fog computing paradigm to address this problem, as it brings the cloud next to the vehicular nodes, but without considering its mobility. To respond to this reality, this work aims to use Software-Defined Networking (SDN) to improve the allocation and migration of microservices in Vehicular Fog Networks (VFN) taking into account the movement of vehicular nodes.},
keywords = {ad hoc networks;cloud computing;Internet;mobile radio;software defined networking;vehicular ad hoc networks;},
note = {cloud services;fog computing paradigm;vehicular nodes;software-defined networking;SDN-based vehicular fog networks;increasing growth;vehicular ad hoc network;VANET;Vehicles paradigm;intelligent transport systems;low communication;allocation;migration;microservices;IoV paradigm;},
URL = {http://dx.doi.org/10.23919/CISTI54924.2022.9820608},
}


@article{21860836 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {GreenMicro: Identifying Microservices From Use Cases in Greenfield Development},
journal = {IEEE Access},
journal = {IEEE Access (USA)},
author = {Bajaj, D. and Goel, A. and Gupta, S.C.},
volume = { 10},
year = {2022//},
pages = {67008 - 67018},
issn = {2169-3536},
address = {USA},
abstract = {Microservices architecture is a new paradigm for developing a software system as a collection of independent services that communicate via lightweight protocols. In greenfield development, identifying the microservices is not a trivial task, as there is no legacy code lying around and no old development to start with. Thus, identification of microservices from requirements becomes an important decision during the analysis and design phase. Use cases play a vital role in the requirements analysis modeling phases in a model-driven software engineering process. Use cases capture the high-level user functions and the scope of system. In this paper, we propose GreenMicro, an automatic microservice identification technique that utilizes the use cases model and the database entities. Both features are the artifacts of analysis and design phase that depict complete functionality of an overall system. In essence, a collection of related use cases indicates a bounded context of the system that can be grouped in a suitable way as microservices. Therefore, our approach GreenMicro clusters close-knit use cases to recover meaningful microservices. We investigate and validate our approach on an in-house proprietary web application and three sample benchmark applications. We have mapped our approach to the state-of-the-art software quality assessment attributes and have presented the results. Preliminary results are motivating and the proposed methodology works as anticipated in identifying functionally cohesive and loosely coupled microservice candidate recommendations. Our approach enables the system architects to identify microservice candidates at an early analysis and design phase of development.},
keywords = {formal specification;Internet;pattern clustering;service-oriented architecture;software quality;systems analysis;},
note = {GreenMicro;software system;lightweight protocols;legacy code;requirements analysis;model-driven software engineering process;high-level user functions;automatic microservice identification technique;Greenfield development;microservice candidate recommendation;microservice architecture;software quality assessment attributes;close-knit use case clustering;system functionality;Web application;},
URL = {http://dx.doi.org/10.1109/ACCESS.2022.3182495},
}


@inproceedings{21797906 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Record and Replay of Online Traffic for Microservices with Automatic Mocking Point Identification},
journal = {2022 IEEE/ACM 44th International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP).},
author = {Liu, J. and Liu, J. and Di, P. and Liu, A.X. and Zhong, Z.},
year = {2022//},
pages = {221 - 30},
address = {Piscataway, NJ, USA},
abstract = {Using recorded online traffic for the regression testing of web applications has become a common practice in industry. However, this "record and replay" on microservices is challenging because simply recorded online traffic (i.e., values for variables or input/output for function calls) often cannot be successfully replayed because microservices often have various dependencies on the complicated online environment. These dependencies include the states of underlying systems, internal states (e.g., caches), and external states (e.g., interaction with other microservices/middleware). Considering the large size and the complexity of industrial microservices, an automatic, scalable, and precise identification of such dependencies is needed as manual identification is time-consuming. In this paper, we propose an industrial grade solution to identifying all dependencies, and generating mocking points automatically using static program analysis techniques. Our solution has been deployed in a large Internet company (i.e., Ant Group) to handle hundreds of microservices, which consists of hundreds of millions lines of code, with high success rate in replay (99% on average). Moreover, our framework can boost the efficiency of the testing system by refining dependencies that must not affect the behavior of a microservice. Our experimental results show that our approach can filter out 73.1% system state dependency and 71.4% internal state dependency, which have no effect on the behavior of the microservice.},
keywords = {Internet;program diagnostics;program testing;},
note = {automatic mocking point identification;online traffic;complicated online environment;industrial microservices;industrial grade solution;regression testing;Web application;static program analysis technique;Internet company;system state dependency;internal state dependency;},
URL = {http://dx.doi.org/10.1109/ICSE-SEIP55303.2022.9793867},
}


@inproceedings{21593096 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Following Domain Driven Design principles for Microservices decomposition: is it enough?},
journal = {2021 IEEE/ACS 18th International Conference on Computer Systems and Applications (AICCSA)},
author = {Farsi, H. and Allaki, D. and En-nouaary, A. and Dahchour, M.},
year = {2021//},
pages = {8 pp. - },
address = {Piscataway, NJ, USA},
abstract = {Building software using a microservice architecture is a means that gives more options to scale up applications, deploy them independently and limit their "blast radius" of failure. Microservices tend to solve the complexity and the increasing development problems by applying the functional decomposition principle. This main feature can become a point of weakness in the absence of a fully credible splitting mechanism. One of the main adopted approaches to design services and deal with the boundary identification concern is the Domain Driven Design (DDD). In this paper, we aim to study the efficiency of this approach. We intend to give software architects a full understanding of its capabilities and main limits to be aware of the potential resulting anti-patterns. To this end, we use graph theory to experiment and analyze a reference example, implementing many microservices good practices and patterns. The obtained results show whether if we can rely only on the DDD principles to decompose microservices, or not.},
keywords = {graph theory;software architecture;},
note = {DDD principles;microservices decomposition;microservice architecture;functional decomposition principle;fully credible splitting mechanism;boundary identification concern;software architects;domain driven design principles;graph theory;},
URL = {http://dx.doi.org/10.1109/AICCSA53542.2021.9686947},
}


@article{21102632 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Microservices: Migration of a Mission Critical System},
journal = {IEEE Transactions on Services Computing},
journal = {IEEE Trans. Serv. Comput. (USA)},
author = {Mazzara, M. and Dragoni, N. and Bucchiarone, A. and Giaretta, A. and Larsen, S.T. and Dustdar, S.},
volume = { 14},
number = { 5},
year = {2021//},
pages = {1464 - 77},
issn = {1939-1374},
address = {USA},
abstract = {An increasing interest is growing around the idea of microservices and the promise of improving scalability when compared to monolithic systems. Several companies are evaluating pros and cons of a complex migration. In particular, financial institutions are positioned in a difficult situation due to the economic climate and the appearance of agile competitors that can navigate in a more flexible legal framework and started their business since day one with more agile architectures and without being bounded to outdated technological standard. In this paper, we present a real world case study in order to demonstrate how scalability is positively affected by re-implementing a monolithic architecture (MA) into a microservices architecture (MSA). The case study is based on the FX Core system, a mission critical system of Danske Bank, the largest bank in Denmark and one of the leading financial institutions in Northern Europe. The technical problem that has been addressed and solved in this paper is the identification of a repeatable migration process that can be used to convert a real world Monolithic architecture into a Microservices architecture in the specific setting of financial domain, typically characterized by legacy systems and batch-based processing on heterogeneous data sources.},
keywords = {bank data processing;service-oriented architecture;software maintenance;},
note = {financial institutions;agile competitors;flexible legal framework;agile architectures;microservices architecture;FX Core system;monolithic architecture;legacy systems;MSA;Danske Bank;Denmark;batch-based processing;heterogeneous data sources;mission critical system migration process;},
URL = {http://dx.doi.org/10.1109/TSC.2018.2889087},
}


@inproceedings{21138934 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Using dependency graph and graph theory concepts to identify anti-patterns in a microservices system: A tool-based approach},
journal = {2021 Moratuwa Engineering Research Conference (MERCon)},
author = {Gamage, I.U.P. and Perera, I.},
year = {2021//},
pages = {699 - 704},
address = {Piscataway, NJ, USA},
abstract = {Microservice architecture (MSA) based application developments are becoming the common trend in implementing large-scale applications. Unlike the traditional monolith applications, MSA applications are composed of many services hence there is an immense possibility of anti-patterns introduced into the system. To identify these design problems, a detailed analysis of the architecture needs to be performed. We see great potential for adopting graph concepts and algorithms in this regard. However, the few tools proposed by existing work to find anti-patterns that adopt graph concepts are not up to providing developers with adequate statistical information such as metrics along with visualization techniques or they are not fully automated. In this research, we present a tool-based solution for this problem which is capable of utilizing traced data of an MSA system to generate dependency graphs and thereby extract metrics using graph theory concepts and algorithms. We analyze a sample MSA system for anti-patterns with the tool. To verify the usability of the tool further, a group of developers also analyze an open-source system with the tool.},
keywords = {graph theory;service-oriented architecture;statistical analysis;},
note = {anti-patterns;tool-based solution;graph theory concepts;sample MSA system;open-source system;dependency graph;microservices system;tool-based approach;microservice architecture based application developments;large-scale applications;monolith applications;MSA applications;visualization techniques;adequate statistical information;},
URL = {http://dx.doi.org/10.1109/MERCon52712.2021.9525743},
}


@inproceedings{21785323 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Refactoring Java Monoliths into Executable Microservice-Based Applications},
journal = {SBLP'21: 25th Brazilian Symposium on Programming Languages},
author = {Freitas, F. and Ferreira, A. and Cunha, J.},
year = {2021//},
pages = {100 - 7},
address = {New York, NY, USA},
abstract = {In the last few years we have been seeing a drastic change in the way software is developed. Large-scale software projects are being assembled by a flexible composition of many (small) components possibly written in different programming languages and deployed anywhere in the cloud - the so-called microservice-based applications. The dramatic growth in popularity of microservice-based applications has pushed several companies to apply major refactorings to their software systems. However, this is a challenging task that may take several months or even years. We propose a methodology to automatically evolve a Java monolithic application into a microservice-based one. Our methodology receives the Java code and a proposition of microservices and refactors the original classes to make each microservice independent. Our methodology creates an API for each method call to classes that are in other services. The database entities are also refactored to be included in the corresponding service. The initial evaluation shows that our tool can successfully refactor 80% of the applications tested.},
keywords = {application program interfaces;Java;software maintenance;Web services;},
note = {Java monoliths;executable microservice-based applications;large-scale software projects;refactorings;software systems;Java monolithic application;Java code;microservices;API;},
URL = {http://dx.doi.org/10.1145/3475061.3475086},
}


@article{21657079 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {The TOSCA toolchain: Mining, analyzing, and refactoring microservice-based architectures},
journal = {Software: Practice and Experience},
journal = {Softw., Pract. Exp. (USA)},
author = {Soldani, J. and Muntoni, G. and Neri, D. and Brogi, A.},
volume = { 51},
number = { 7},
year = {2021//},
pages = {1591 - 621},
issn = {1097-024X},
address = {USA},
abstract = {Exploiting microservices to architect enterprise applications is becoming commonplace. This makes it crucial to provide some support for designing and analyzing microservice-based applications, for example, for understanding whether a microservice-based application adheres to the main design principles of microservices and for choosing how to refactor it when this is not the case. To provide such support, in this article we present the &mu;TOSCA toolchain. More precisely, we first introduce the &mu;TOSCA model to represent the architecture of microservice-based applications with the OASIS standard TOSCA. We then describe a technique to automatically mine the architecture of a microservice-based application and represent it with &mu;TOSCA, given the Kubernetes deployment of the application. We also present a methodology to analyze the &mu;TOSCA representation of a microservice-based architecture to systematically identify the architectural smells potentially affecting the corresponding application and to resolve them. Finally, we present two prototype tools, &mu;Miner and &mu;Freshener, implementing our mining solution and the support for identifying and resolving architectural smells in microservice-based applications, respectively. We then assess -by discussing some case studies- how effectively &mu;Miner, &mu;Freshener, and the &mu;TOSCA toolchain can support researchers and practitioners working with microservices. &copy; 2021 John Wiley &amp; Sons, Ltd.},
keywords = {data mining;service-oriented architecture;},
note = {microservice-based architecture;architect enterprise applications;&mu;TOSCA toolchain;mining solution;Kubernetes deployment;OASIS standard;refactoring;},
URL = {http://dx.doi.org/10.1002/spe.2974},
}


@inproceedings{21486445 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {A Hot Decomposition Procedure: Operational Monolith System to Microservices},
journal = {2021 International Conference Automatics and Informatics (ICAI)},
author = {Ivanov, N. and Tasheva, A.},
year = {2021//},
pages = {182 - 7},
address = {Piscataway, NJ, USA},
abstract = {In the context of the popular microservice architecture we make a brief overview of the software architectures evolution starting as a monolith. We have investigated the decomposition templates for database and business functionalities and then proposed an exemplary procedure for decomposition of monolithic applications that are in operation. The procedure aims to make the transition to microservices gradually without downtime. A proof of concept application is initially implemented as monolithic, and decomposed consequently to microservices.},
keywords = {business data processing;database management systems;service-oriented architecture;},
note = {monolithic applications;microservices;hot decomposition procedure;operational monolith system;popular microservice architecture;software architectures evolution;database;business functionalities;},
URL = {http://dx.doi.org/10.1109/ICAI52893.2021.9639494},
}


@article{21657074 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Migrating production monolithic systems to microservices using aspect oriented programming},
journal = {Software: Practice and Experience},
journal = {Softw., Pract. Exp. (USA)},
author = {Freire, A.F.A.A. and Sampaio, A.F. and Carvalho, L.H.L. and Medeiros, O. and Mendonca, N.C.},
volume = { 51},
number = { 6},
year = {2021//},
pages = {1280 - 307},
issn = {1097-024X},
address = {USA},
abstract = {Several organizations need to address the challenge to migrate current traditional monolithic applications in production to microservices, preferably, without having to schedule maintenances to take the application offline. This article presents an approach for migrating to microservices with almost zero downtime and minimal changes in the monolithic code. The approach is based on the concepts of aspect-oriented programming (AOP) and reflection to enable to intercept calls inside the monolith and transform them into service requests invoking the newly built microservices using the concept of around advices. The aspects do the "dirty work" of decoupling what will be refactored and which service to call and practically "zero" code changes need to be done in the original monolithic code. This enables one key novel contribution of our migration approach which is the ability to revert code and data changes without having to take the system offline. Two applications are used as proofs of concept to demonstrate that the proposed approach enables to go "forward" or "backward" among different versions of the application with minimal code or data changes. An evaluation performed in the cloud demonstrates that this work does not introduce significant performance or cost overhead when compared to the current state of the art and to the original monolith. &copy; 2021 John Wiley &amp; Sons, Ltd.},
keywords = {aspect-oriented programming;software maintenance;},
note = {zero downtime;microservices;data changes;minimal code;migrating production monolithic systems;schedule maintenances;zero code changes;},
URL = {http://dx.doi.org/10.1002/spe.2956},
}


@inproceedings{20691827 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Monolith Modularization Towards Microservices: Refactoring and Performance Trade-offs},
journal = {2021 IEEE 18th International Conference on Software Architecture Companion (ICSA-C)},
author = {Goncalves, N. and Faustino, D. and Silva, A.R. and Portela, M.},
year = {2021//},
pages = {54 - 61},
address = {Piscataway, NJ, USA},
abstract = {The agility inherent to today&#8217;s business promotes the definition of software architectures where the business entities are decoupled into modules and/or services. However, there are advantages in having a rich domain model, where domain entities are tightly connected, because it fosters reuse. On the other hand, the split of the business logic into modules and its encapsulation through well-defined interfaces introduces a cost in terms of performance. In this paper we analyze the impact of migrating a rich domain object into a modular architecture, both in terms of the development cost associated with the refactoring, and the performance cost associated with the execution. Current state of the art analyses the migration of monolith systems to a microservices architecture, but we observed that migration effort and performance issues are already relevant in the migration to a modular monolith.},
keywords = {software architecture;software maintenance;},
note = {modular architecture;monolith systems;microservices architecture;migration effort;modular monolith;software architectures;business entities;rich domain model;business logic;monolith modularization;},
URL = {http://dx.doi.org/10.1109/ICSA-C52384.2021.00015},
}


@inproceedings{21364764 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Adopting Microservices for Industrial Control Systems: A Five Step Migration Path},
journal = {2021 26th IEEE International Conference on Emerging Technologies and Factory Automation (ETFA )},
author = {Buchgeher, G. and Ramlerf, R. and Stummer, H. and Kaufmann, H.},
year = {2021//},
pages = {8 pp. - },
address = {Piscataway, NJ, USA},
abstract = {Microservices are widely used by large internet companies as they support scalable systems with high resilience and fault-tolerance, flexible and agile development, and continuous delivery enabling fast time to market. Hence, there is an increasing interest in adopting microservices in the field of industrial automation. This raises the question, if and to what degree this architectural style can also be applied for the development of industrial control systems (ICS). In this paper, we have systematically analyzed the applicability of microservices for ICS development. Together with domain experts from industry, we have developed a migration path from a monolithic ICS towards cloud-ready systems based on microservices. By studying the central principles for microservice development and operation, we found that microservices can be applied in the context of ICS and the use of microservices leads to increased flexibility with regard to frequent software releases and the development of new deployment variants. However, communication between real-time services is still an open research challenge that poses a potential technical risk in the migration towards adopting full microservice-based system architectures.},
keywords = {cloud computing;industrial control;Internet;mobile computing;program testing;service-oriented architecture;software architecture;software maintenance;software prototyping;},
note = {ICS development;cloud-ready systems;microservices;microservice development;microservice-based system architectures;industrial control systems;step migration path;scalable systems;high resilience;fault-tolerance;industrial automation;},
URL = {http://dx.doi.org/10.1109/ETFA45728.2021.9613622},
}


@inproceedings{21410769 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Migrating Monoliths to Microservices-based Customizable Multi-tenant Cloud-native Apps},
journal = {2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
author = {Haugeland, S.G. and Nguyen, P.H. and Hui Song and Chauvel, F.},
year = {2021//},
pages = {170 - 7},
address = {Piscataway, NJ, USA},
abstract = {It was common that software vendors sell licenses to their clients to use software products, such as Enterprise Resource Planning, which are deployed as a monolithic entity on clients' premises. Moreover, many clients, especially big organizations, often require software products to be customized for their specific needs before deployment on premises. While software vendors are trying to migrate their monolithic software products to Cloud-native Software-as-a-Service (SaaS), they face two big challenges that this paper aims at addressing: 1) How to migrate their exclusive monoliths to multi-tenant Cloud-native SaaS; and 2) How to enable tenant-specific customization for multi-tenant Cloud-native SaaS. This paper suggests an approach for migrating monoliths to microservice-based Cloud-native SaaS, providing customers with a flexible customization opportunity, while taking advantage of the economies of scale that the Cloud and multi-tenancy provide. Our approach shows not only the migration to microservices but also how to introduce the necessary infrastructure to support the new services and enable tenant-specific customization. We illustrate the application of our approach on migrating a reference application of Microsoft called SportStore.},
keywords = {cloud computing;DP industry;service-oriented architecture;},
note = {tenant-specific customization;software vendors;monolithic software products;multitenant cloud-native SaaS;monolith migration;microservices-based customizable multitenant cloud-native apps;cloud-native software-as-a-service;},
URL = {http://dx.doi.org/10.1109/SEAA53835.2021.00030},
}


@inproceedings{21128805 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Monolithic to Microservices Migration Strategy in Public Safety Secretariat of Mato Grosso},
journal = {2021 International Conference on Electrical, Communication, and Computer Engineering (ICECCE)},
author = {Preti, J.P.D. and Souza, A.N.A. and Freiberger, E.C. and De Almeida Lacerda, T.},
year = {2021//},
pages = {5 pp. - },
address = {Piscataway, NJ, USA},
abstract = {This paper presents the migration strategy that is being used by Public Safety Secretariat of Mato Grosso (SESP-MT) to convert its legacy systems that are monoliths to a microservice oriented architecture. Despite the standards already defined for a microservice project, it is difficult to find successful processes and practical experiences reports in gradual migration from a monolith to a microservice architecture, especially regard to the legacy database split and separation. Our research group obtained successful results applying the database sharing strategies and migration process described in this paper through a period of monolith and microservice coexistence. This is the contribution of this paper.},
keywords = {database management systems;software architecture;software maintenance;},
note = {legacy database;database sharing strategies;microservices migration strategy;Mato Grosso;SESP-MT;legacy systems;microservice oriented architecture;gradual migration;monolithic migration;public safety secretariat;},
URL = {http://dx.doi.org/10.1109/ICECCE52056.2021.9514268},
}


@article{21332671 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {BIGMSA-Microservice-Based Model for Big Data Knowledge Discovery: Thinking Beyond the Monoliths},
journal = {Wireless Personal Communications},
journal = {Wirel. Pers. Commun. (Germany)},
author = {Singh, N. and Singh, D.P. and Pant, B. and Tiwari, U.K.},
volume = { 116},
number = { 4},
year = {2021/02/},
pages = {2819 - 33},
issn = {0929-6212},
address = {Germany},
abstract = {Enterprise thrives on software applications that are built to fulfil the core business requirements. A single business application can offer a cluster of capabilities to generate value from processing huge amount of data often termed as Big Data. The time-based requirements of these applications are satisfied frequently by applying monolithic approaches with increased complexity and less scalability. Traditional approaches for Big Data Analytics suffer from overpriced, excessive and irrelevant data transfer owing to the constricted coupling amongst computing resources and data processing logic. Service-oriented approach came into existence as a new paradigm to enable applications to be rendered as service for better flexibility and scalability. Service orientation architecture avoids monolithic style but web services, one of its major implementation encourages monolith development of software application. Thus building a scalable, robust, resilient, cost-effective and optimum solution is one of the major requirements for outsized data. New software development style Microservices offer low degree of coupling and smaller size. This work reviews the existing and prevalent approaches like monolithic architecture in this area along with their drawbacks. This work also proposes a generic microservice model &#956;BIGMSA for handling Knowledge Discovery in Big Data. Reference applications are implemented using proposed model. The effectiveness of the proposed model is evaluated by comparing the reference application with the monolithic application using various software metrics.},
keywords = {Big Data;business data processing;data analysis;data mining;Internet;public domain software;service-oriented architecture;software metrics;Web services;},
note = {&#956;BIGMSA-microservice-based model;enterprise thrives;single business application;time-based requirements;monolithic approaches;Big Data analytics;data processing logic;service-oriented approach;service orientation architecture;Web services;monolith development;software development style;monolithic architecture;generic microservice model &#956;BIGMSA;reference application;monolithic application;software metrics;Big Data knowledge discovery;business requirements;data transfer owing;},
URL = {http://dx.doi.org/10.1007/s11277-020-07822-0},
}


@article{21772839 ,
language = {Chinese},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Microservice resilience risk identification and analysis based on chaos engineering},
journal = {Journal of Software},
journal = {J. Softw. (China)},
author = {Yin kang-lin and Du qing-feng},
volume = { 32},
number = { 5},
year = {2021//},
pages = {1231 - 55},
issn = {1000-9825},
address = {China},
abstract = {Microservice architecture has already become the mainstream architecture pattern of Internet applications in recent years. However, compared with traditional software architectures, microservice architecture has a more sophisticated deployment structure, which makes it have to face more potential threats that make the system in fault, as well as the greater diversity of fault symptoms. Since traditional measurements like reliability cannot fully show a microservice architecture system's capability to cope with failures, microservice developers started to use the word "resilience" to describe such capability. In order to improve a microservice architecture system's resilience, developers usually need to design specific mechanisms for different system environment disruptions. How to judge whether a system environment disruption is a risk to microservice resilience, and how to find these resilience risks as much as possible before the system is released, are the research questions in microservice development. According to the microservice resilience measurement model which is proposed in authors'previous research, by integrating the chaos engineering practice, resilience risk identification and analysis approaches for microservice architecture systems are proposed. The identification approach continuously generates random system environment disruptions to the target system and monitors variations in system service performance, to find potential resilience risks, which greatly reduces human effort in risk identification. For identified resilience risks, by collecting performance monitoring data during chaos engineering, the analysis approach uses the causality search algorithm to build influence chains among system performance indicators, and provide chains with high possibility to system operators for further analysis. Finally, the effectiveness of the proposed approach is proved by a case study on a microservice architecture system.},
keywords = {cloud computing;fault diagnosis;Internet;mobile computing;program testing;risk analysis;software architecture;software prototyping;},
note = {system environment disruption;microservice development;microservice resilience measurement model;analysis approach;microservice architecture system;random system environment disruptions;target system;system service performance;potential resilience risks;identified resilience risks;chaos engineering;system performance indicators;system operators;microservice resilience risk identification;mainstream architecture pattern;traditional software architectures;microservice developers;word resilience;different system environment disruptions;},
URL = {http://dx.doi.org/10.13328/j.cnki.jos.006231},
}


@inproceedings{20691825 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {A Process Model for Microservices Design and Identification},
journal = {2021 IEEE 18th International Conference on Software Architecture Companion (ICSA-C)},
author = {Schroer, C. and Wittfoth, S. and Gomez, J.M.},
year = {2021//},
pages = {38 - 45},
address = {Piscataway, NJ, USA},
abstract = {Microservices have been established as an architectural style for developing modern applications. A major challenge in theory and praxis is to identify a adequate granularity of microservices. In order to achieve a consistent and easily understandable process, this paper presents a process model for the design and identification of microservices. This process model should support the development of microservices and the selection of suitable identification approaches. The process model is deductively derived on the basis of existing identification approaches from literature. This serves to classify the approaches into the phases of the presented process model but also to identify research gaps and thus new approaches. The process model is evaluated first by integrating existing identification approaches into the model. Second, a case study shows that the process model allows for multiple perspectives on microservice architecture and can lead to different architecture alternatives. As a result, microservice architecture decisions can be better justified, compared and derived by software architects in a standardized way. We also show that the process model can be integrated into existing software development processes.},
keywords = {software architecture;},
note = {software development process;architectural style;architecture alternative;microservice architecture decisions;},
URL = {http://dx.doi.org/10.1109/ICSA-C52384.2021.00013},
}


@inproceedings{20839843 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Monoliths to Microservices - Migration Problems and Challenges: A SMS},
journal = {2021 Second International Conference on Information Systems and Software Technologies (ICI2ST)},
author = {Velepucha, V. and Flores, P.},
year = {2021//},
pages = {135 - 42},
address = {Piscataway, NJ, USA},
abstract = {There are currently many applications that companies have accumulated over the years to leverage the operation of their businesses, however, over the years these applications have fallen into obsolescence. Most of these applications have been built following a monolith architectural style. With today&#8217;s great technological advances and for companies to remain competitive, many of these applications need to be migrated and/or modernized to take advantage of current technologies. The process of migrating from a monolithic application to a microservice is a challenging process and there are few reported successful experiences. The objective of this paper is to contribute to the findings of problems and challenges reported in scientific literature, that companies have faced when migrating a monolithic application to a microservices architecture.},
keywords = {software architecture;},
note = {microservices;monolith architectural style;monolithic application;microservices architecture;},
URL = {http://dx.doi.org/10.1109/ICI2ST51859.2021.00027},
}


@article{21311934 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Deployment Management and Topology Discovery of Microservice Applications in the Multicloud Environment},
journal = {Journal of Grid Computing},
journal = {J. Grid Comput. (Germany)},
author = {Wei, H. and Rodriguez, J.S. and Garcia, O.N.-T.},
volume = { 19},
number = { 1},
year = {2021/03/},
pages = {22 pp. - },
issn = {1570-7873},
address = {Germany},
abstract = {Cloud computing enables the evolution of modern software application design. Applications based on microservice architecture are an example. Meanwhile, multiclouds are widely accepted by enterprise as an infrastructure strategy; however, challenges remain. The autonomous and distributable nature of modern applications, as well as the complexity of multicloud infrastructure, often make universal application deployment management impractical. This phenomenon may further hinder application quality and efficiency. Therefore, deployment resource control and topology discovery in the multicloud infrastructure environment is an intriguing area of cloud computing research. This paper proposes a framework to manage application deployment in the multicloud environment. The framework uses a policy-based deployment control to automatically select and provide deployment resources from the multicloud infrastructure, and it subsequently uses topology discovery to visualize and verify the actual deployment. The proposed framework design is introduced in the paper, and a proof-of-concept prototype is implemented. Experiments in empirical scenarios are conducted. The experimental results indicate that the proposed framework is effective in controlling deployment resources and presenting actual deployment across clouds.},
keywords = {cloud computing;data visualisation;program verification;software architecture;software prototyping;Web services;},
note = {infrastructure strategy;deployment resource control;microservice application topology discovery;multicloud infrastructure environment;policy-based deployment control;microservice application deployment management;cloud computing;software application design;microservice architecture;deployment visualization;deployment verification;roof-of-concept prototype;},
URL = {http://dx.doi.org/10.1007/s10723-021-09539-1},
}


@article{21596455 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Does migrating a monolithic system to microservices decrease the technical debt?},
journal = {Journal of Systems and Software},
journal = {J. Syst. Softw. (Netherlands)},
author = {Lenarduzzi, V. and Lomio, F. and Saarimaki, N. and Taibi, D.},
volume = { 169},
year = {2020/11/},
pages = {118 - 33},
issn = {0164-1212},
address = {Netherlands},
abstract = {Background: The migration from a monolithic system to microservices requires a deep refactoring of the system. Therefore, such a migration usually has a big economic impact and companies tend to postpone several activities during this process, mainly to speed up the migration itself, but also because of the demand for releasing new features. Objective: We monitored the technical debt of an SME while it migrated from a legacy monolithic system to an ecosystem of microservices. Our goal was to analyze changes in the code technical debt before and after the migration to microservices. Method: We conducted a case study analyzing more than four years of the history of a twelve-year-old project (280K Lines of Code) where two teams extracted five business processes from the monolithic system as microservices. For the study, we first analyzed the technical debt with SonarQube and then performed a qualitative study with company members to understand the perceived quality of the system and the motivation for possibly postponed activities. Results: The migration to microservices helped to reduce the technical debt in the long run. Despite an initial spike in the technical debt due to the development of the new microservice, after a relatively short period of time the technical debt tended to grow slower than in the monolithic system. [All rights reserved Elsevier].},
keywords = {information management;small-to-medium enterprises;software maintenance;software quality;},
note = {microservice;monolithic system;code technical debt;SME;SonarQube;},
URL = {http://dx.doi.org/10.1016/j.jss.2020.110710},
}


@inproceedings{19632127 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Microservice Decomposition via Static and Dynamic Analysis of the Monolith},
journal = {2020 IEEE International Conference on Software Architecture Companion (ICSA-C). Proceedings},
author = {Krause, A. and Zirkelbach, C. and Hasselbring, W. and Lenga, S. and Kroger, D.},
year = {2020//},
pages = {9 - 16},
address = {Los Alamitos, CA, USA},
abstract = {Migrating monolithic software systems into microservices requires the application of decomposition techniques to find and select appropriate service boundaries. These techniques are often based on domain knowledge, static code analysis, and non-functional requirements such as maintainability. In this paper, we present our experience with an approach that extends static analysis with dynamic analysis of a legacy software system&#8217;s runtime behavior, including the live trace visualization to support the decomposition into microservices. Overall, our approach combines established analysis techniques for microservice decomposition, such as the bounded context pattern of domain-driven design, and enriches the collected information via dynamic software visualization to identify appropriate microservice boundaries. In collaboration with the German IT service provider adesso SE, we applied our approach to their real-word, legacy lottery application in|FOCUS to identify good microservice decompositions for this layered monolithic Enterprise Java system.},
keywords = {data visualisation;Java;program diagnostics;program visualisation;software architecture;software maintenance;system monitoring;},
note = {microservice decomposition;dynamic analysis;monolithic software systems;service boundaries;domain knowledge;static code analysis;nonfunctional requirements;legacy software system;live trace visualization;domain-driven design;dynamic software visualization;German IT service provider;legacy lottery application;layered monolithic enterprise Java system;},
URL = {http://dx.doi.org/10.1109/ICSA-C50368.2020.00011},
}


@inproceedings{19635772 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Automated Microservice Identification in Legacy Systems with Functional and Non-Functional Metrics},
journal = {2020 IEEE International Conference on Software Architecture (ICSA). Proceedings},
author = {Yukun Zhang and Bo Liu and Liyun Dai and Kang Chen and Xuelian Cao},
year = {2020//},
pages = {135 - 45},
address = {Los Alamitos, CA, USA},
abstract = {Since microservice has merged as a promising architectural style with advantages in maintainability, scalability, evolvability, etc., increasing companies choose to restructure their legacy monolithic software systems as the microservice architecture. However, it is quite a challenge to properly partitioning the systems into suitable parts as microservices. Most approaches perform microservices identification from a function-splitting perspective and with sufficient legacy software artifacts. That may be not realistic in industrial practices and possibly results in generating unexpected microservices. To address this, we proposed an automated microservice identification (AMI) approach that extracts microservices from the execution and performance logs without providing documentation, models or source codes, while taking both functional and non-functional metrics into considerations. Our work firstly collects logs from the executable legacy system. Then, controller objects (COs) are identified as the key objects to converge strongly related subordinate objects (SOs). Subsequently, the relation between each pair of CO and SO is evaluated by a relation matrix from both the functional and non-functional perspective. We ultimately cluster classes(objects) into the microservices by optimizing the multi-objective of high-cohesion-low-coupling and load balance. The usefulness of the proposed approach is illustrated by applying to a case study.},
keywords = {formal specification;matrix algebra;object-oriented programming;pattern clustering;resource allocation;service-oriented architecture;software architecture;software maintenance;software metrics;},
note = {nonfunctional metrics;architectural style;legacy monolithic software systems;microservice architecture;performance logs;executable legacy system;automated microservice identification;legacy software artifacts;microservice identification;function-splitting;maintainability;scalability;evolvability;controller object identification;subordinate objects;relation matrix;object clustering;class clustering;high-cohesion-low-coupling optimization;load balance;},
URL = {http://dx.doi.org/10.1109/ICSA47634.2020.00021},
}


@inproceedings{20532948 ,
language = {English},
copyright = {Copyright 2021, The Institution of Engineering and Technology},
title = {Towards Decomposing Monolithic Applications into Microservices},
journal = {2020 IEEE 14th International Conference on Application of Information and Communication Technologies (AICT)},
author = {Kuryazov, D. and Jabborov, D. and Khujamuratov, B.},
year = {2020//},
pages = {4 pp. - },
address = {Piscataway, NJ, USA},
abstract = {Continuously changing the existing software systems results in large and monolith software solutions making them difficult to maintain. As maintenance and development of monolithic software systems is a difficult task, there is a need for decomposing these monolithic systems into smaller subsystems, components and services, i.e., microservices. Service-oriented architectures yield more maintenance and less complexity in developing large-scale software applications. Thus, this paper focuses on decomposing monolithic software systems into microservices in order to maintain them with less development effort. Moreover, it addresses to the problem of architectural refactoring and improvement of software systems during architectural migration.},
keywords = {service-oriented architecture;software maintenance;Web services;},
note = {monolithic applications;microservices;maintenance;monolithic software systems;service-oriented architectures;large-scale software applications;},
URL = {http://dx.doi.org/10.1109/AICT50176.2020.9368571},
}


@inproceedings{20003995 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Monolith Migration Complexity Tuning Through the Application of Microservices Patterns},
journal = {Software Architecture. 14th European Conference, ECSA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12292)},
author = {Almeida, J.F. and Silva, A.R.},
year = {2020//},
pages = {39 - 54},
address = {Cham, Switzerland},
abstract = {The microservices architecture has become mainstream for the development of business applications because it supports the adaptation of scalability to the type of demand, but, most importantly, because it fosters an agile development process based on small teams focused on the product. Therefore, there is the need to migrate the existing monolith systems to microservices. Current approaches to the identification of candidate microservices in a monolith neglect the cost of redesigning the monolith functionality due to the impact of the CAP theorem. In this paper we propose a redesign process, guided by a set of complexity metrics, that allows the software architect to analyse and redesign the monolith functionality given a candidate decomposition. Both, the redesign process and the metrics are evaluated in the context of candidate decompositions of two monolith systems.},
keywords = {commerce;computational complexity;service-oriented architecture;software architecture;software prototyping;},
note = {microservices architecture;business applications;monolith systems;candidate microservices;CAP theorem;redesign process;complexity metrics;candidate decomposition;monolith migration complexity tuning;microservices patterns;scalability adaptation;agile development;},
URL = {http://dx.doi.org/10.1007/978-3-030-58923-3_3},
}


@inproceedings{19733377 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Extracting Microservices' Candidates from Monolithic Applications: Interface Analysis and Evaluation Metrics Approach},
journal = {2020 IEEE 15th International Conference of System of Systems Engineering (SoSE). Proceedings},
author = {Al-Debagy, O. and Martinek, P.},
year = {2020//},
pages = {289 - 94},
address = {Piscataway, NJ, USA},
abstract = {There is a migration trend toward microservices architecture coming from the monolithic applications. This research proposes a decomposition method that extracts microservices&#8217; candidates through analyzing the application programming interface in order to extract the operations and the parameters. Then the operation names are converted into word representations using word embedding models. Next, semantically similar operations are clustered together to provide a microservice&#8217; candidate. Additional step is to evaluate the proposed candidate using cohesion and complexity metrics. The proposed algorithm improved the decomposition approach for big applications but did not affect the decomposition of smaller applications.},
keywords = {application program interfaces;natural language processing;software architecture;user interfaces;Web services;},
note = {interface analysis;evaluation metrics;microservices architecture;application programming interface;word representations;word embedding models;microservice candidate extraction;},
URL = {http://dx.doi.org/10.1109/SoSE50414.2020.9130466},
}


@inproceedings{19716893 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Migration of Monolithic Applications Towards Microservices Under the Vision of the Information Hiding Principle: A Systematic Mapping Study},
journal = {Advances in Emerging Trends and Technologies. Advances in Intelligent Systems and Computing (AISC 1066)},
author = {Velepucha, V. and Flores, P. and Torres, J.},
volume = {vol.1},
year = {2020//},
pages = {90 - 100},
address = {Cham, Switzerland},
abstract = {Organizations throughout time accumulate applications, which, given their old age, are generally designed in monolithic architecture. Given technological advances, enterprise has the necessity to modernize these applications, being the migration from a monolithic architecture towards microservice architecture a good alternative, however according to our research many failed attempts were found. We performed a Systematic Mapping Study in order to obtain studies to show how to migrate or modernize monolithic applications towards microservices based on some principle of Software Engineering. As a result, we found that there are different types of approaches of studies, such as: (a) solution proposals, (b) experience reports, (c) validations research and (d) opinion articles. Between the studies found, there are no studies related to migration process that is based on a Software Engineering principle, nor the Information Hiding Principle. This research indicates that there is a lack of a theoretical foundation with guidelines on how to perform a decomposition of a monolithic application towards microservices. Given this gap, we propose to migrate a monolithic application to microservices following the principles of the Information Hiding Principle.},
keywords = {software architecture;},
note = {monolithic application;microservices;Information Hiding Principle;Systematic Mapping Study;time accumulate applications;monolithic architecture;microservice architecture;migration process;software engineering principle;},
URL = {http://dx.doi.org/10.1007/978-3-030-32022-5_9},
}


@inproceedings{19536244 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Identifying microservices using structured system analysis},
journal = {2020 24th International Conference on Information Technology (IT)},
author = {Stojanovic, T.D. and Lazarevic, S.D. and Milic, M. and Antovic, I.},
year = {2020//},
pages = {4 pp. - },
address = {Piscataway, NJ, USA},
abstract = {In this article it will be presented how to identify microservices using structured system analysis. Structured system analysis describes all the system functions, data stores and algorithms of the functions. When all of the functions of the system are described, they can be grouped into microservices. These microservices should be loosely coupled and highly cohesive. Rules for grouping microservices will be presented. It will be shown not only how to declare functions as microservices but also how to decompose data stores, thus these microservices share-as-little-as-possible by having separate databases.},
keywords = {database management systems;groupware;storage management;systems analysis;Web services;},
note = {structured system analysis;system functions;data storage;microservices identification;databases;data algorithm;microservices grouping;},
URL = {http://dx.doi.org/10.1109/IT48810.2020.9070652},
}


@inproceedings{19286531 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {A Model-Driven Approach Towards Automatic Migration to Microservices},
journal = {Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment. Second International Workshop, DEVOPS 2019. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12055)},
author = {Bucchiarone, A. and Soysal, K. and Guidi, C.},
year = {2020//},
pages = {15 - 36},
address = {Cham, Switzerland},
abstract = {Microservices have received and are still receiving an increasing attention, both from academia and the industrial world. To guarantee scalability and availability while developing modern software systems, microservices allow developers to realize complex systems as a set of small services that operate independently and that are easy to maintain and evolve. Migration from monolithic applications to microservices-based application is a challenging task that very often it is done manually by the developers taking into account the main business functionalities of the input application and without a supporting tool. In this paper, we present a model-driven approach for the automatic migration to microservices. The approach is implemented by means of JetBrains MPS, a text-based metamodelling framework, and validated using a first migration example from a Java-based application to Jolie - a programming language for defining microservices.},
keywords = {business data processing;formal specification;Java;object-oriented programming;programming languages;public domain software;text analysis;},
note = {model-driven approach;automatic migration;software systems;complex systems;monolithic applications;microservices-based application;input application;Java-based application;Jolie;programming language;},
URL = {http://dx.doi.org/10.1007/978-3-030-39306-9_2},
}


@inproceedings{19632119 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Towards Identifying Microservice Candidates from Business Rules Implemented in Stored Procedures},
journal = {2020 IEEE International Conference on Software Architecture Companion (ICSA-C). Proceedings},
author = {Gomes Barbosa, M.H. and Maia, P.H.},
year = {2020//},
pages = {41 - 8},
address = {Los Alamitos, CA, USA},
abstract = {During the 1980 and 1990&#8217;s decades, relational database management systems arose as an alternative to implement and store application business logic due to its robustness. Many of those legacy systems suffer from several problems such as low scalability, database vendor lock-in, and complex maintenance and evolution. With the success of lightweight virtualization techniques and new distributed architectures, mainly the microservices, companies are migrating legacy systems to this architectural style. Although several studies have proposed migration processes and reported migration experience to microservices, to the best of our knowledge, none of them has addressed systems whose business rules are implemented in database artifacts, particularly stored procedures. Therefore, this paper presents a process to identify microservice candidates from application business rules implemented in stored procedures. We applied the process to a real large scale system, for which 357 business rules were mapped and 13 microservices were identified. In addition, the process helped to find out many duplicated pieces of code, thus also improving the system maintainability.},
keywords = {business data processing;relational databases;software architecture;software maintenance;},
note = {legacy systems;architectural style;migration processes;migration experience;microservices;database artifacts;particularly stored procedures;application business rules;system maintainability;relational database management systems;application business logic;low scalability;complex maintenance;lightweight virtualization techniques;distributed architectures;microservice candidates identification;database vendor lock-in;},
URL = {http://dx.doi.org/10.1109/ICSA-C50368.2020.00015},
}


@article{21555694 ,
language = {English},
copyright = {Copyright 2022, The Institution of Engineering and Technology},
title = {Design principles, architectural smells and refactorings for microservices: a multivocal review},
journal = {SICS Software-Intensive Cyber-Physical Systems},
journal = {SICS Softw.-Intensive Cyber-Phys. Syst. (Germany)},
author = {Neri, D. and Soldani, J. and Zimmermann, O. and Brogi, A.},
volume = { 35},
number = { 1-2},
year = {2020/08/},
pages = {3 - 15},
issn = {2524-8510},
address = {Germany},
abstract = {Potential benefits such as agile service delivery have led many companies to deliver their business capabilities through microservices. Bad smells are however always around the corner, as witnessed by the considerable body of literature discussing architectural smells that possibly violate the design principles of microservices. In this paper, we systematically review the white and grey literature on the topic, in order to identify the most recognised architectural smells for microservices and to discuss the architectural refactorings allowing to resolve them.},
keywords = {software architecture;software maintenance;},
note = {architectural refactorings;architectural smells;grey literature;white literature;bad smells;agile service delivery;multivocal review;microservices;design principles;},
URL = {http://dx.doi.org/10.1007/s00450-019-00407-8},
}


@inproceedings{19596720 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Freshening the Air in Microservices: Resolving Architectural Smells via Refactoring},
journal = {Service-Oriented Computing &#8211; ICSOC 2019 Workshops. WESOACS, ASOCA, ISYCC, TBCE, and STRAPS. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12019)},
author = {Brogi, A. and Neri, D. and Soldani, J.},
year = {2020//},
pages = {17 - 29},
address = {Cham, Switzerland},
abstract = {The adoption of microservice-based architectures is becoming common practice for enterprise applications. Checking whether an application adheres to the main design principles of microservices, and &#8212;if not&#8212; understanding how to refactor it, are two key issues in that context. In this paper, we present a methodology to systematically identify the architectural smells that possibly violate the main design principles of microservices, and to select suitable architectural refactorings to resolve them. We also present a prototype implementing the methodology, based on a novel representation of microservices in TOSCA.},
keywords = {formal verification;software architecture;software maintenance;},
note = {microservice-based architectures;enterprise applications;architectural refactorings;application checking;TOSCA;},
URL = {http://dx.doi.org/10.1007/978-3-030-45989-5_2},
}


@inproceedings{20131851 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {On the Performance and Adoption of Search-Based Microservice Identification with toMicroservices},
journal = {2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
author = {Carvalho, L. and Garcia, A. and Colanzi, T.E. and Assuncao, W.K.G. and Pereira, J.A. and Fonseca, B. and Ribeiro, M. and de Lima, M.J. and Lucena, C.},
year = {2020//},
pages = {569 - 80},
address = {Los Alamitos, CA, USA},
abstract = {The expensive maintenance of legacy systems leads companies to migrate such systems to microservice architectures. This migration requires the identification of system&#8217;s legacy parts to become microservices. However, the successful identification of microservices, which are promising to be adoptable in practice, requires the simultaneous satisfaction of many criteria, such as coupling, cohesion, reuse and communication overhead. Search-based microservice identification has been recently investigated to address this problem. However, state-of-the-art search-based approaches are limited as they only consider one or two criteria (namely cohesion and coupling), possibly not fulfilling the practical needs of developers. To overcome these limitations, we propose toMicroservices, a many-objective search-based approach that considers five criteria, the most cited by practitioners in recent studies. Our approach was evaluated in a real-life industrial legacy system undergoing a microservice migration process. The performance of toMicroservices was quantitatively compared to a baseline. We also gathered qualitative evidence based on developers&#8217; perceptions, who judged the adoptability of the recommended microservices. The results show that our approach is both: (i) very similar to the most recent proposed approach on optimizing the traditional criteria of coupling and cohesion, but (ii) much better when taking into account all the five criteria. Finally, most of the microservice candidates were considered adoptable by practitioners.},
keywords = {cloud computing;mobile computing;optimisation;search problems;software architecture;software maintenance;software performance evaluation;},
note = {search-based microservice identification;legacy systems;microservice architectures;successful identification;communication overhead;search-based approaches;many-objective search-based approach;real-life industrial legacy system;microservice migration process;recommended microservices;microservice candidates;},
URL = {http://dx.doi.org/10.1109/ICSME46990.2020.00060},
}


@inproceedings{20004409 ,
language = {English},
copyright = {Copyright 2020, The Institution of Engineering and Technology},
title = {Microservices Backlog - A Model of Granularity Specification and Microservice Identification},
journal = {Services Computing &#8211; SCC 2020. 17th International Conference Held as Part of the Services Conference Federation, SCF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12409)},
author = {Vera-Rivera, F.H. and Puerto-Cuadros, E.G. and Astudillo, H. and Gaona-Cuevas, C.M.},
year = {2020//},
pages = {85 - 102},
address = {Cham, Switzerland},
abstract = {Microservices are a software development approach where applications are composed of small independent services that communicate through well-defined APIs. A major challenge of designing these applications is determining the appropriate microservices granularity, which is currently done by architects using their judgment. This article describes Microservice Backlog (MB), a fully automatic genetic-programming technique that uses the product backlog&#8217;s user stories to (1) propose a set of microservices for optimal granularity and (2) allow architects to visualize at design time their design metrics. Also, a new Granularity Metric (GM) was defined that combines existing metrics of coupling, cohesion, and associated user stories. The MB-proposed decomposition for a well-known state-of-the-art case study was compared with three existing methods (two automatics and one semi-automatic); it had consistently better GM scoring and fewer average calls among microservices, and it allowed to identify critical points. The wider availability of techniques like MB will allow architects to automate microservices identification, optimize their granularity, visually assess their design metrics, and identify at design time the system critical points.},
keywords = {application program interfaces;formal specification;service-oriented architecture;},
note = {software development;APIs;design metrics;microservices identification;automatic genetic programming;microservice backlog;microservices granularity metric;granularity specification;design metrics visualization;},
URL = {http://dx.doi.org/10.1007/978-3-030-59592-0_6},
}


