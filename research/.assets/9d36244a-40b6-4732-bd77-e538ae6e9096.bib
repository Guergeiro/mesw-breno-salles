@inproceedings{8305969,
author={Chen, Rui and Li, Shanshan and Li, Zheng},
booktitle={2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
title={From Monolith to Microservices: A Dataflow-Driven Approach},
year={2017},
volume={},
number={},
pages={466-475},
abstract={Emerging from the agile practitioner communities, the microservice-oriented architecture emphasizes implementing and employing multiple small-scale and independently deployable microservices, rather than encapsulating all function capabilities into one monolithic application. Correspondingly, microservice-oriented decomposition, which has been identified to be an extremely challenging and complex task, plays a crucial and prerequisite role in developing microservice-based software systems. To address this challenge and reduce the complexity, we proposed a top-down analysis approach and developed a dataflow-driven decomposition algorithm. In brief, a three-step process is defined: first, engineers together with users conduct business requirement analysis and construct a purified while detailed dataflow diagram of the business logic; then, our algorithm combines the same operations with the same type of output data into a virtual abstract dataflow; finally, the algorithm extracts individual modules of "operation and its output data" from the virtual abstract dataflow to represent the identified microservice candidates. We have employed two use cases to demonstrate our microservice identification mechanism, as well as making comparisons with an existing microservice identification tool. The comparison and evaluation show that, our dataflow-driven identification mechanism is able to deliver more rational, objective, understandable and consistent microservice candidates, through a more rigorous and practical implementation procedure.},
keywords={Business;Computer architecture;Service-oriented architecture;Complexity theory;Data mining;Electronic mail;microservices;monolith;decomposition;data flow;business logic},
doi={10.1109/APSEC.2017.53},
issn={},
month={Dec},}
@inproceedings{9885771,
author={Liu, Bo and Xiong, Jingliu and Ren, Qiurong and Tyszberowicz, Shmuel and Yang, Zheng},
booktitle={2022 IEEE International Conference on Web Services (ICWS)},
title={Log2MS: a framework for automated refactoring monolith into microservices using execution logs},
year={2022},
volume={},
number={},
pages={391-396},
abstract={Service models and modelling are vital in monolith-to-microservice architecture (MSA) migration of legacy systems. Prior work focuses on service identification, whereas few efforts have been investigating microservice models and modelling. It remains an immature field of Model-Driven Development (MDD) of MSA due to it lack modelling methods and tools for monolith-to-MSA migration. We present Log2MS, an MDD framework for automated transforming legacy monolithic architecture into MSA using execution logs only. We define microservice and microservice sequence diagrams to support monolith-to-MSA structural and behavioural modelling; we present a source-code free monolith-to-MSA approach and a prototypical tool which support automatically microservices identification and MSA models generation; we developed a graphical editor to represent the generated MSA models for further interactively modelling. Log2MS is evaluated being of applicability, robustness, and effectiveness by comparative experiments with 2 representative approaches and applying to 4 projects.},
keywords={Systematics;Web services;Microservice architectures;Aging;Robustness;Task analysis;Model-driven development;Microservice models and modelling;Legacy monolith refactoring;MSA;MDD;UML profiling},
doi={10.1109/ICWS55610.2022.00065},
issn={},
month={July},}
@inproceedings{9463006,
author={Kirby, Lisa J. and Boerstra, Evelien and Anderson, Zachary J.C. and Rubin, Julia},
booktitle={2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
title={Weighing the Evidence: On Relationship Types in Microservice Extraction},
year={2021},
volume={},
number={},
pages={358-368},
abstract={The microservice-based architecture - a SOA-inspired principle of dividing systems into components that communicate with each other using language-agnostic APIs - has gained increased popularity in industry. Yet, migrating a monolithic application to microservices is a challenging task. A number of automated microservice extraction techniques have been proposed to help developers with the migration complexity. These techniques, at large, construct a graph-based representation of an application and cluster its elements into service candidates. The techniques vary by their decomposition goals and, subsequently, types of relationships between application elements that they consider - structural, semantic term similarity, and evolutionary - with each technique utilizing a fixed subset and weighting of these relationship types.In this paper, we perform a multi-method exploratory study with 10 industrial practitioners to investigate (1) the applicability and usefulness of different relationships types during the microservice extraction process and (2) expectations practitioners have for tools utilizing such relationships. Our results show that practitioners often need a "what-if" analysis tool that simultaneously considers multiple relationship types during the extraction process and that there is no fixed way to weight these relationships. Our study also identifies organization- and application-specific considerations that lead practitioners to prefer certain relationship types over others, e.g., the age of the codebase and languages spoken in the organization. It outlines possible strategies to help developers during the extraction process, e.g., the ability to iteratively filter and customize relationships.},
keywords={Industries;Computer languages;Semantics;Organizations;Tools;Complexity theory;Task analysis;microservices;decomposition;extraction;migration;architectural refactoring},
doi={10.1109/ICPC52881.2021.00041},
issn={2643-7171},
month={May},}
@inproceedings{8990249,
author={Janes, Andrea and Russo, Barbara},
booktitle={2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)},
title={Automatic Performance Monitoring and Regression Testing During the Transition from Monolith to Microservices},
year={2019},
volume={},
number={},
pages={163-168},
abstract={The transition from monolith to microservices poses several challenges, like how to redistribute the features of system over different microservices. During the transition, developers may also redesign or rethink system services significantly, which can have a strong impact on various quality aspects of the resulting system. Thus, the new system may be more or less performing depending on the ability of the developers to design microservices and the capability of the microservice architecture to represent the system. Overall, a transition to microservices may or may not end up with the same or a better performing system. One way to control the migration to microservices is to continuously monitor a system by continuously collecting performance data and feeding the resulting data analysis back in the transition process. In DevOps, such continuous feedback can be exploited to re-tune the development and deployment of system's builds. In this paper, we present PPTAM+, a tool to continuously assess the degradation of a system during a transition to microservices. In an in-production system, the tool can continuously monitor each microservice and provide indications of lost performance and overall degradation. The system is designed to be integrated in a DevOps process. The tool automates the whole process from collecting data for building the reference operational profile to streamline performance data and automatically adapt and regress performance tests on each build based the analysis' feedback obtained from tests of the previous build.},
keywords={Microservices;DevOps;Testing},
doi={10.1109/ISSREW.2019.00067},
issn={},
month={Oct},}
